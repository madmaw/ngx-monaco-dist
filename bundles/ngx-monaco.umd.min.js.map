{"version":3,"file":"ngx-monaco.umd.min.js","sources":["../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operators/windowTime.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/operators.ts","~/ngx-monaco/src/utils/observable/from-disposable.ts","~/ngx-monaco/src/tokens/completion-provider.token.ts","~/ngx-monaco/src/tokens/editor-options.token.ts","~/ngx-monaco/src/services/monaco-editor.service.ts","~/ngx-monaco/src/directives/monaco-editor/monaco-editor.directive.ts","~/ngx-monaco/src/monaco-editor.module.ts"],"sourcesContent":["// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n/**\n * Create an observable from a disposable.\n * @template T\n * @param {?} source\n * @return {?}\n */\nexport function fromDisposable<T>(source: (listener: (e: T) => void) => monaco.IDisposable): Observable<T> {\n\treturn Observable.create((observer: Observer<T>) => {\n\t\tconst /** @type {?} */ disposable = source(e => {\n\t\t\tobserver.next(e);\n\t\t});\n\n\t\treturn () => disposable.dispose();\n\t});\n}\n","import {InjectionToken} from '@angular/core';\n/**\n * Use this token to inject custom completion providers.\n */\nexport const COMPLETION_PROVIDERS = new InjectionToken('Completion Provider');\n","import {InjectionToken} from '@angular/core';\n\nimport {MonacoEditorOptions} from '../entities/editor-options';\n/**\n * Use this token to inject the default monaco editor options.\n */\nexport const MONACO_EDITOR_OPTIONS = new InjectionToken<MonacoEditorOptions>('Monaco Editor Options');\n","/// <reference path=\"../typings/monaco-editor/monaco.d.ts\" />\n\nimport {Injectable, ElementRef, Optional, Inject, NgZone} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {shareReplay, take, map, takeUntil, tap} from 'rxjs/operators';\n\nimport {fromDisposable} from '../utils/observable/from-disposable';\n\n// Tokens\n\nimport {COMPLETION_PROVIDERS} from '../tokens/completion-provider.token';\nimport {MONACO_EDITOR_OPTIONS} from '../tokens/editor-options.token';\n\n// Entities\n\nimport {CompletionItemProvider} from '../entities/completion-item-provider';\nimport {MonacoEditorOptions} from '../entities/editor-options';\nimport {MonacoFile} from '../entities/file';\n\ndeclare const window: any;\nexport class MonacoEditorService {\nprivate file: MonacoFile;\nprivate monacoEditor: monaco.editor.IEditor;\nprivate onFileChange = new Subject<MonacoFile>();\n\n\tfileChange$ = this.onFileChange.asObservable();\n\n\tbootstrap$ = Observable.create((observer: any) => {\n\t\tconst /** @type {?} */ script = document.createElement('script');\n\t\tscript.type = 'text/javascript';\n\t\tscript.src = 'libs/vs/loader.js';\n\t\tscript.onload = () => {\n\t\t\twindow.require.config({paths: {vs: 'libs/vs'}});\n\t\t\twindow.require(['vs/editor/editor.main'], () => {\n\t\t\t\t// Emit that we are ready\n\t\t\t\tobserver.next();\n\t\t\t});\n\t\t};\n\n\t\t// Add the script tag to the page in order to start loading monaco\n\t\tdocument.body.appendChild(script);\n\t}).pipe(shareReplay(1));\n/**\n * @param {?} completionProviders\n * @param {?} editorOptions\n * @param {?} zone\n */\nconstructor(\nprivate completionProviders: CompletionItemProvider[],\nprivate editorOptions: MonacoEditorOptions,\nprivate zone: NgZone\n\t) {}\n/**\n * @return {?}\n */\nget editor() {\n\t\treturn this.monacoEditor;\n\t}\n/**\n * @param {?} compilerOptions\n * @return {?}\n */\npublic setDefaultJavascriptCompilerOptions(compilerOptions: monaco.languages.typescript.CompilerOptions) {\n\t\tmonaco.languages.typescript.javascriptDefaults.setCompilerOptions(compilerOptions);\n\t}\n/**\n * @param {?} code\n * @param {?=} filename\n * @return {?}\n */\npublic addDefaultJavascriptExtraLib(code: string, filename?: string) {\n\t\tmonaco.languages.typescript.javascriptDefaults.addExtraLib(code, filename);\n\t}\n/**\n * @return {?}\n */\nprivate registerCompletionProviders() {\n\t\tif (!this.completionProviders) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Register all the completion providers\n\t\tfor (const /** @type {?} */ completionProvider of this.completionProviders) {\n\t\t\tmonaco.languages.registerCompletionItemProvider(completionProvider.language, completionProvider);\n\t\t}\n\t}\n/**\n * @param {?} file\n * @param {?} model\n * @return {?}\n */\nprivate registerModelChangeListener(file: MonacoFile, model: monaco.editor.IModel) {\n\t\tconst /** @type {?} */ destroy = fromDisposable(model.onWillDispose.bind(model)).pipe(take(1));\n\n\t\t// Subscribe to changes from the model\n\t\tfromDisposable(model.onDidChangeContent.bind(model))\n\t\t\t.pipe(\n\t\t\t\tmap(() => model.getValue()),\n\t\t\t\ttakeUntil(destroy)\n\t\t\t)\n\t\t\t.subscribe(content => {\n\t\t\t\tthis.zone.run(() => {\n\t\t\t\t\tthis.onFileChange.next({\n\t\t\t\t\t\t...file,\n\t\t\t\t\t\tcontent\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t}\n/**\n * Dispose all editor models\n * @return {?}\n */\ndisposeModels() {\n\t\tif (!window.monaco) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const /** @type {?} */ model of monaco.editor.getModels()) {\n\t\t\tmodel.dispose();\n\t\t}\n\t}\n/**\n * Bootstrap the monaco editor.\n * \n * @param {?} container Container of the editor.\n * @param {?=} options Editor options.\n * @return {?}\n */\nload(container: ElementRef, options: {theme?: string; editor?: MonacoEditorOptions} = {}): Observable<void> {\n\t\tconst /** @type {?} */ editorOptions = options.editor || this.editorOptions || {};\n\n\t\treturn this.bootstrap$.pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Dispose all the current models\n\t\t\t\tthis.disposeModels();\n\n\t\t\t\t// Create a new monaco editor\n\t\t\t\tthis.monacoEditor = monaco.editor.create(container.nativeElement, {\n\t\t\t\t\ttheme: options.theme,\n\t\t\t\t\t...editorOptions\n\t\t\t\t});\n\n\t\t\t\t// Register the completion providers\n\t\t\t\tthis.registerCompletionProviders();\n\n\t\t\t\t// Open the file\n\t\t\t\tif (this.file) {\n\t\t\t\t\tthis.open(this.file);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n/**\n * Open the provided file with the editor.\n * \n * @param {?} file File to open.\n * @return {?}\n */\nopen(file: MonacoFile) {\n\t\tthis.file = file;\n\n\t\tif (!this.monacoEditor) {\n\t\t\t// Exit early if the editor is not bootstrapped yet. It will automatically open the provided file when ready.\n\t\t\treturn;\n\t\t}\n\n\t\tconst /** @type {?} */ uri = monaco.Uri.file(file.uri);\n\n\t\tlet /** @type {?} */ model = monaco.editor.getModel(uri);\n\n\t\tif (model) {\n\t\t\tif (file.language && model.getModeId() !== file.language) {\n\t\t\t\tmodel.dispose();\n\n\t\t\t\tmodel = undefined;\n\t\t\t} else {\n\t\t\t\tmodel.setValue(file.content);\n\t\t\t}\n\t\t}\n\n\t\tif (!model) {\n\t\t\tmodel = monaco.editor.createModel(file.content, file.language, uri);\n\n\t\t\t// Listen for changes in the model\n\t\t\tthis.registerModelChangeListener(file, model);\n\t\t}\n\n\t\tthis.monacoEditor.setModel(model);\n\t}\n/**\n * Change the options of the editor.\n * \n * @param {?} options Editor options.\n * @return {?}\n */\nupdateOptions(options: monaco.editor.IEditorOptions) {\n\t\tif (this.monacoEditor) {\n\t\t\tthis.monacoEditor.updateOptions(options);\n\t\t}\n\t}\n/**\n * Change the theme of the monaco editor.\n * \n * @param {?} theme Name of the editor theme.\n * @return {?}\n */\nsetTheme(theme: string) {\n\t\tif (window.monaco) {\n\t\t\tmonaco.editor.setTheme(theme);\n\t\t}\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Inject, args: [COMPLETION_PROVIDERS, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_EDITOR_OPTIONS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction MonacoEditorService_tsickle_Closure_declarations() {\n/** @type {?} */\nMonacoEditorService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMonacoEditorService.ctorParameters;\n/** @type {?} */\nMonacoEditorService.prototype.file;\n/** @type {?} */\nMonacoEditorService.prototype.monacoEditor;\n/** @type {?} */\nMonacoEditorService.prototype.onFileChange;\n/** @type {?} */\nMonacoEditorService.prototype.fileChange$;\n/** @type {?} */\nMonacoEditorService.prototype.bootstrap$;\n/** @type {?} */\nMonacoEditorService.prototype.completionProviders;\n/** @type {?} */\nMonacoEditorService.prototype.editorOptions;\n/** @type {?} */\nMonacoEditorService.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/// <reference path=\"../../typings/monaco-editor/monaco.d.ts\" />\n\nimport {Directive, ElementRef, OnInit, Input, Output, EventEmitter, HostListener, OnDestroy, OnChanges, AfterViewChecked, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {debounceTime, takeUntil, filter, map, distinctUntilChanged} from 'rxjs/operators';\n\n// Services\n\nimport {MonacoEditorService} from '../../services/monaco-editor.service';\n\n// Entities\n\nimport {MonacoFile} from '../../entities/file';\nimport {MonacoEditorOptions} from '../../entities/editor-options';\nexport class MonacoEditorDirective implements OnInit, OnDestroy, OnChanges, AfterViewChecked {\n\t// Inputs\n\t theme: string;\n\t file: MonacoFile;\n\t options: MonacoEditorOptions;\n\n\t// Outputs\n\t ready = new EventEmitter();\n\t fileChange = new EventEmitter<MonacoFile>();\nprivate resize$ = new Subject();\nprivate destroy$ = new Subject();\n/**\n * @param {?} monacoEditorService\n * @param {?} editorRef\n */\nconstructor(\nprivate monacoEditorService: MonacoEditorService,\nprivate editorRef: ElementRef\n\t) {}\n/**\n * @return {?}\n */\nonResize() {\n\t\tthis.resize$.next();\n\t}\n/**\n * Open the provided file with the editor.\n * \n * @param {?} file File to open.\n * @return {?}\n */\nopen(file: MonacoFile) {\n\t\tthis.monacoEditorService.open(file);\n\t}\n/**\n * @return {?}\n */\nngOnInit() {\n\t\t// Load the monaco editor\n\t\tthis.monacoEditorService.load(this.editorRef, {\n\t\t\ttheme: this.theme,\n\t\t\teditor: this.options\n\t\t}).subscribe(() => {\n\t\t\tthis.ready.emit();\n\t\t});\n\n\t\t// Listen for file changes\n\t\tthis.monacoEditorService.fileChange$.pipe(\n\t\t\ttakeUntil(this.destroy$)\n\t\t).subscribe(file => {\n\t\t\tthis.fileChange.emit(file);\n\t\t});\n\n\t\t// Resize the editor when the window resizes\n\t\tthis.resize$.pipe(\n\t\t\tfilter(() => Boolean(this.monacoEditorService.editor)),\n\t\t\tmap(() => ({width: this.editorRef.nativeElement.clientWidth, height: this.editorRef.nativeElement.clientHeight})),\n\t\t\tdistinctUntilChanged((a, b) => a.width === b.width && a.height === b.height),\n\t\t\tdebounceTime(50),\n\t\t\ttakeUntil(this.destroy$),\n\t\t).subscribe(dimension => {\n\t\t\tthis.monacoEditorService.editor.layout(dimension);\n\t\t});\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tthis.destroy$.next();\n\t}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n\t\tif (changes.options) {\n\t\t\t// Update the monaco editor options\n\t\t\tthis.monacoEditorService.updateOptions(changes.options.currentValue);\n\t\t}\n\n\t\tif (changes.theme) {\n\t\t\t// Update the theme\n\t\t\tthis.monacoEditorService.setTheme(changes.theme.currentValue);\n\t\t}\n\n\t\tif (changes.file) {\n\t\t\t// Open the new file\n\t\t\tthis.open(changes.file.currentValue);\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n\t\tthis.resize$.next();\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n\tselector: 'monaco-editor,[monaco-editor]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MonacoEditorService, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'theme': [{ type: Input },],\n'file': [{ type: Input },],\n'options': [{ type: Input },],\n'ready': [{ type: Output },],\n'fileChange': [{ type: Output },],\n'onResize': [{ type: HostListener, args: ['window:resize', ] },],\n};\n}\n\nfunction MonacoEditorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMonacoEditorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMonacoEditorDirective.ctorParameters;\n/** @type {?} */\nMonacoEditorDirective.propDecorators;\n/** @type {?} */\nMonacoEditorDirective.prototype.theme;\n/** @type {?} */\nMonacoEditorDirective.prototype.file;\n/** @type {?} */\nMonacoEditorDirective.prototype.options;\n/** @type {?} */\nMonacoEditorDirective.prototype.ready;\n/** @type {?} */\nMonacoEditorDirective.prototype.fileChange;\n/** @type {?} */\nMonacoEditorDirective.prototype.resize$;\n/** @type {?} */\nMonacoEditorDirective.prototype.destroy$;\n/** @type {?} */\nMonacoEditorDirective.prototype.monacoEditorService;\n/** @type {?} */\nMonacoEditorDirective.prototype.editorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n// Directives\n\nimport {MonacoEditorDirective} from './directives/monaco-editor/monaco-editor.directive';\n\n// Services\n\nimport {MonacoEditorService} from './services/monaco-editor.service';\n\n// Tokens\n\nimport {MONACO_EDITOR_OPTIONS} from './tokens/editor-options.token';\n\n// Entities\n\nimport {MonacoEditorOptions} from './entities/editor-options';\nexport class MonacoEditorModule {\n/**\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(config: {options?: MonacoEditorOptions} = {}): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: MonacoEditorModule,\n\t\t\tproviders: [\n\t\t\t\tMonacoEditorService,\n\t\t\t\t{provide: MONACO_EDITOR_OPTIONS, useValue: config.options || {}}\n\t\t\t]\n\t\t};\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [\n\t\tCommonModule\n\t],\n\tdeclarations: [\n\t\tMonacoEditorDirective\n\t],\n\texports: [\n\t\tMonacoEditorDirective\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MonacoEditorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMonacoEditorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMonacoEditorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tryCatchTarget","e","tryCatcher","apply","this","arguments","errorObject_1","errorObject","fn","x","Array","isArray","length","_super","UnsubscriptionError","errors","call","err","Error","map","i","toString","join","name","stack","message","__extends","flattenUnsubscriptionErrors","reduce","errs","concat","UnsubscriptionError_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","empty","prototype","hasErrors","index","len","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","next","value","error","complete","__window","window","__self","self","WorkerGlobalScope","_root","global","root_1","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","obj","rxSubscriber_1","trustedSubscriber","SafeSubscriber","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","Object","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","Subscriber_1","subscribe","then","nextOrObserver","getSymbolObservable","$$observable","observable","pipeFromArray","fns","input","prev","noop_1","noop","_i","Observable$$1","_isScalar","_subscribe","Observable","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","Observable_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","done","obs","TypeError","msg","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","subscribeToResult_1","subscribeToResult","clearThrottle","OuterSubscriber_1","Action","scheduler","work","schedule","state","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","undefined","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","active","scheduled","action","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","val","parseFloat","isNaN","TimerObservable","dueTime","period","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","arg","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","selector","caught","err2","ScalarObservable","EmptyObservable","ArrayObservable","array","of","pop","ScalarObservable_1","EmptyObservable_1","none","CombineLatestSubscriber","project","values","observables","toRespond","unused","oldVal","_tryProject","slice","dispatchNext","dispatchError","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","hasError","return","str","idx","charAt","arr","o","isFinite","valueAsNumber","Math","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable","arrayLike","Notification","kind","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","MergeMapSubscriber","resultSelector","concurrent","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","debounceTime_2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$1","DefaultIfEmptySubscriber","defaultValue","isEmpty","DelayMessage","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","minimalSetImpl","MinimalSet","_values","has","defineProperty","get","clear","DistinctSubscriber","keySelector","flushes","_useKeySelector","_finalizeNext","distinctUntilChanged_2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","ArgumentOutOfRangeError","ElementAtSubscriber","ArgumentOutOfRangeError_1","EverySubscriber","thisArg","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandSubscriber","subscribeToProjection","filter_2","FilterOperator","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","EmptyError","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","Subject$$1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","asObservable","Subject_2","MapPolyfill","size","_keys","set","delete","cb","MapPolyfill_1","FastMap","hasOwnProperty","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","Subject_1","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","LastSubscriber","map_2","MapOperator","MapSubscriber","MapOperator_1","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","seed","TakeLastSubscriber","total","ring","MergeMapToSubscriber","MergeScanSubscriber","acc","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","refCount_1","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","QueueAction_1","ReplaySubject","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","dispatchNotification","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_a","_b","_oneComplete","emit","checkValues","a","b","areEqual","nextB","isComplete","ReplaySubject_1","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","isInnerStopped","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToSubscriber","inner","tryResultSelector","take_2","TakeOperator","TakeSubscriber","takeUntil_2","TakeUntilOperator","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","tap_2","DoOperator","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","dispatchNext$2","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","args","StaticIterator","ZipSubscriber","iterators","StaticArrayIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","debounceTime","debounceTime_1","distinctUntilChanged","distinctUntilChanged_1","filter","filter_1","map_1","shareReplay","shareReplay_1","take","take_1","takeUntil","takeUntil_1","tap","tap_1","throttle_1","fromDisposable","disposable","dispose","COMPLETION_PROVIDERS","InjectionToken","MONACO_EDITOR_OPTIONS","MonacoEditorService","completionProviders","editorOptions","zone","onFileChange","fileChange$","bootstrap$","script","document","createElement","type","src","onload","require","paths","vs","body","appendChild","monacoEditor","setDefaultJavascriptCompilerOptions","compilerOptions","monaco","languages","typescript","javascriptDefaults","setCompilerOptions","addDefaultJavascriptExtraLib","code","filename","addExtraLib","registerCompletionProviders","_d","_e","completionProvider","registerCompletionItemProvider","language","registerModelChangeListener","file","model","destroy","onWillDispose","onDidChangeContent","content","run","assign","disposeModels","editor","getModels","load","container","options","nativeElement","theme","open","uri","Uri","getModel","getModeId","setValue","createModel","setModel","updateOptions","setTheme","decorators","Injectable","ctorParameters","Optional","Inject","NgZone","MonacoEditorDirective","monacoEditorService","editorRef","ready","EventEmitter","fileChange","resize$","destroy$","onResize","ngOnInit","width","clientWidth","height","clientHeight","dimension","layout","ngOnDestroy","ngOnChanges","changes","currentValue","ngAfterViewChecked","Directive","ElementRef","propDecorators","Input","Output","HostListener","MonacoEditorModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations"],"mappings":"0jBACa,ICCTA,iBDD4B,CAAEC,EAAG,KCGrC,SAAAC,IACE,IACE,OAAOF,EAAeG,MAAMC,KAAMC,WAClC,MAAOJ,GAEP,OADAK,EAAJC,YAAgBN,EAAIA,EACTK,EAAXC,aAIgB,gBAAhB,SAA6CC,GAE3C,OADAR,EAAiBQ,EACLN,ICfE,kBAAhB,SAA2BO,GACzB,MAAoB,mBAANA,eCDOC,MAAMC,SAAO,SAASF,GAAqB,OAAAA,GAAyB,iBAAbA,EAAEG,SCAhE,gBAAhB,SAAyBH,GACvB,OAAY,MAALA,GAA0B,iBAANA,kNCG7B,SAAAI,GACE,SAAFC,EAAqBC,GACjBF,EAAJG,KAAAZ,MADqBA,KAArBW,OAAqBA,EAEjB,IAAME,EAAWC,MAAMF,KAAKZ,KAAMW,EAC7BA,EAAOH,OAAhB,8CACIG,EAAOI,IAAI,SAACF,EAAKG,GAAM,OAAGA,EAAI,EADlC,KACwCH,EAAII,aAAcC,KAAK,QAAY,IAChElB,KAAMmB,KAAON,EAAIM,KAAO,sBACxBnB,KAAMoB,MAAQP,EAAIO,MAClBpB,KAAMqB,QAAUR,EAAIQ,QAE/B,OAVyCC,EAAzCZ,EAAAD,GAUAC,EAVA,CAAyCI,QCuNzC,SAAAS,EAAqCZ,GACpC,OAAOA,EAAOa,OAAO,SAACC,EAAMZ,GAAQ,OAAAY,EAAKC,OAAQb,aAAec,EAAjEjB,oBAAwFG,EAAIF,OAASE,IAAM,wBA9L3G,WAoBE,SAAFe,EAAcC,GAVL7B,KAAT8B,QAA2B,EAEf9B,KAAZ+B,QAAoC,KACxB/B,KAAZgC,SAAuC,KAC7BhC,KAAViC,eAA4C,KAOpCJ,IACK7B,KAAMkC,aAAeL,GArBK,IAASM,EA0LhD,OA3JEP,EAAFQ,UAAAP,YAAE,WACE,IACIlB,EADA0B,GAAY,EAGhB,IAAIrC,KAAK8B,OAAT,CAIA,IAAMC,EAAV/B,KAAA+B,QAAmBC,EAAnBhC,KAAAgC,SAA6BE,EAA7BlC,KAAAkC,aAA2CD,EAA3CjC,KAAAiC,eAEIjC,KAAK8B,QAAS,EACd9B,KAAK+B,QAAU,KACf/B,KAAKgC,SAAW,KAGhBhC,KAAKiC,eAAiB,KAOtB,IALA,IAAIK,GAAS,EACTC,EAAMP,EAAWA,EAASxB,OAAS,EAIhCuB,GACLA,EAAQS,OAAOxC,MAGf+B,IAAYO,EAAQC,GAAOP,EAASM,IAAU,KAGhD,GAAIG,EAARC,WAAmBR,GACDS,EAAlBC,SAA2BV,GAActB,KAAKZ,QAC1BE,EAApBC,cACQkC,GAAY,EACZ1B,EAASA,IACPT,EADVC,YACsBN,aAAa8B,EADnCjB,oBAEYa,EAA4BrB,EAAxCC,YAAoDN,EAAEc,QAAU,CAACT,EAAjEC,YAA6EN,KAKzE,GAAIgD,EAARtC,QAAgB0B,GAKV,IAHAK,GAAS,EACTC,EAAMN,EAAezB,SAEZ8B,EAAQC,GAAK,CACpB,IAAMO,EAAMb,EAAeK,GAC3B,GAAIS,EAAZC,SAAqBF,GAEX,GADYH,EAAtBC,SAA+BE,EAAIjB,aAAajB,KAAKkC,KAC7B5C,EAAxBC,YAAqC,CACzBkC,GAAY,EACZ1B,EAASA,GAAU,GACnB,IAAIE,EAAMX,EAAtBC,YAAkCN,EAClBgB,aAAec,EAA/BjB,oBACcC,EAASA,EAAOe,OAAOH,EAA4BV,EAAIF,SAEvDA,EAAOsC,KAAKpC,IAOtB,GAAIwB,EACF,MAAM,IAAIV,EAAhBjB,oBAAoCC,KAsBlCiB,EAAFQ,UAAAc,IAAE,SAAIC,GACF,IAAKA,GAAaA,IAAavB,EAAawB,MAC1C,OAAOxB,EAAawB,MAGtB,GAAID,IAAanD,KACf,OAAOA,KAGT,IAAIqD,EAA+BF,EAEnC,cAAeA,GACb,IAAK,WACHE,EAAe,IAAIzB,EAA6BuB,GAClD,IAAK,SACH,GAAIE,EAAavB,QAA8C,mBAA7BuB,EAAaxB,YAC7C,OAAOwB,EACF,GAAIrD,KAAK8B,OAEd,OADAuB,EAAaxB,cACNwB,EACF,GAAuC,mBAA5BA,EAAaC,WAA6C,CAC1E,IAAMC,EAAMF,GACZA,EAAe,IAAIzB,GACNK,eAAiB,CAACsB,GAEjC,MACF,QACE,MAAM,IAAIzC,MAAM,yBAA2BqC,EAAW,2BAQ1D,OALsBnD,KAAKiC,iBAAmBjC,KAAKiC,eAAiB,KAEtDgB,KAAKI,GACnBA,EAAaC,WAAWtD,MAEjBqD,GASTzB,EAAFQ,UAAAI,OAAE,SAAOa,GACL,IAAMG,EAAgBxD,KAAKiC,eAC3B,GAAIuB,EAAe,CACjB,IAAMC,EAAoBD,EAAcE,QAAQL,IACrB,IAAvBI,GACFD,EAAcG,OAAOF,EAAmB,KAKtC7B,EAAVQ,UAAAkB,WAAE,SAAmBM,GACjB,IAAM7B,EAAV/B,KAAA+B,QAAmBC,EAAnBhC,KAAAgC,SACSD,GAAWA,IAAY6B,EAIhB5B,GAI6B,IAA9BA,EAAS0B,QAAQE,IAE1B5B,EAASiB,KAAKW,GAHd5D,KAAKgC,SAAW,CAAC4B,GAJjB5D,KAAK+B,QAAU6B,GAhLLhC,EAAhBwB,QAAgDjB,EAG5C,IAAIP,GAFEE,QAAS,EACRK,GAwLXP,EA3LA,aCAoC,CAClCE,QAAQ,EACR+B,KAAF,SAAOC,KACLC,MAAF,SAAQlD,GAAkB,MAAMA,GAC9BmD,SAAF,eCnBMC,EAA6B,oBAAXC,QAA0BA,OAC5CC,EAAyB,oBAATC,MAAqD,oBAAtBC,mBACjDD,gBAAgBC,mBAAqBD,KAEnCE,EAAaL,QADgB,IAAXM,GAA0BA,GACPJ,EAW3CK,EAAAF,GANA,WACE,IAAKA,EACH,MAAM,IAAIxD,MAAM,iEAFpB,oCCtBA,IAAM2D,EAAcD,EAApBE,KAAyBD,OAEZE,EAAbC,aAA+C,mBAAXH,GAA+C,mBAAfA,EAAOI,OACzEJ,EAAOI,OAAI,gBAAkB,iBAKlBF,EAAbG,eAA8BH,EAA9BC,wOCMAG,EAAA,SAAAtE,GAsCE,SAAFsE,EAAcC,EACAjB,EACAC,GAGV,OAFAvD,EAAJG,KAAAZ,MAlBSA,KAATiF,eAA+B,KACtBjF,KAATkF,iBAAoC,EAC3BlF,KAATmF,oBAAuC,EAE3BnF,KAAZoF,WAAiC,EAgBrBnF,UAAUO,QAChB,KAAK,EACHR,KAAKqF,YAAcC,EAA3BnD,MACQ,MACF,KAAK,EACH,IAAK6C,EAAmB,CACtBhF,KAAKqF,YAAcC,EAA7BnD,MACU,MAEF,GAAiC,iBAAtB6C,EAAgC,CAGzC,IAoNmBO,EApNKP,aAqNVD,GAAe,uBAAwBQ,GAAOA,EAAIC,EAA1EZ,cArNsD,CAC1C,IAAMa,EAAoBT,EAAkBQ,EAAxDZ,gBACY5E,KAAKmF,mBAAqBM,EAAkBN,oBAC5CnF,KAAKqF,YAAcI,GACDvC,IAAIlD,WAEtBA,KAAKmF,oBAAqB,EAC1BnF,KAAKqF,YAAc,IAAIK,EAAkB1F,KAA6BgF,GAExE,MAEJ,QACEhF,KAAKmF,oBAAqB,EAC1BnF,KAAKqF,YAAc,IAAIK,EAAkB1F,KAA6BgF,EAAmBjB,EAAOC,GAuMxG,IAA6BuB,EAzH7B,OAlJmCjE,EAAnCyD,EAAAtE,GAEEsE,EAAF3C,UAAGoD,EAAHZ,cAAE,WAAyB,OAAO5E,MAazB+E,EAATY,OAAE,SAAiB9B,EACAE,EACAC,GACf,IAAM4B,EAAa,IAAIb,EAAWlB,EAAME,EAAOC,GAE/C,OADA4B,EAAWT,oBAAqB,EACzBS,GA4DTb,EAAF3C,UAAAyB,KAAE,SAAKC,GACE9D,KAAKoF,WACRpF,KAAK6F,MAAM/B,IAWfiB,EAAF3C,UAAA2B,MAAE,SAAMlD,GACCb,KAAKoF,YACRpF,KAAKoF,WAAY,EACjBpF,KAAK8F,OAAOjF,KAUhBkE,EAAF3C,UAAA4B,SAAE,WACOhE,KAAKoF,YACRpF,KAAKoF,WAAY,EACjBpF,KAAK+F,cAIThB,EAAF3C,UAAAP,YAAE,WACM7B,KAAK8B,SAGT9B,KAAKoF,WAAY,EACjB3E,EAAJ2B,UAAUP,YAAVjB,KAAAZ,QAGY+E,EAAZ3C,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKqF,YAAYxB,KAAKC,IAGdiB,EAAZ3C,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKqF,YAAYtB,MAAMlD,GACvBb,KAAK6B,eAGGkD,EAAZ3C,UAAA2D,UAAE,WACE/F,KAAKqF,YAAYrB,WACjBhE,KAAK6B,eAGGkD,EAAZ3C,UAAA4D,uBAAE,WACE,IAAQjE,EAAZ/B,KAAA+B,QAAqBC,EAArBhC,KAAAgC,SAQI,OAPAhC,KAAK+B,QAAU,KACf/B,KAAKgC,SAAW,KAChBhC,KAAK6B,cACL7B,KAAK8B,QAAS,EACd9B,KAAKoF,WAAY,EACjBpF,KAAK+B,QAAUA,EACf/B,KAAKgC,SAAWA,EACThC,MAEX+E,EAlJA,CAAmCkB,EAkJnCrE,cAlJAsE,EAAAnB,EAyJAW,EAAA,SAAAjF,GAIE,SAAFiF,EAAsBS,EACRC,EACArC,EACAC,GAGV,IAAIH,EAFJpD,EAAJG,KAAAZ,MAJsBA,KAAtBmG,kBAAsBA,EAOlB,IAAIE,EAAerG,KAEfyC,EAARC,WAAmB0D,GACbvC,EAA+BuC,EACtBA,IACTvC,EAA6BuC,EAAgBvC,KAC7CE,EAA8BqC,EAAgBrC,MAC9CC,EAAiCoC,EAAgBpC,SAC7CoC,IAAmBd,EAA7BnD,QACQkE,EAAUC,OAAOX,OAAOS,GACpB3D,EAAZC,WAAuB2D,EAAQxE,cACrB7B,KAAKkD,IAAiBmD,EAAQxE,YAAY0E,KAAKF,IAEjDA,EAAQxE,YAAc7B,KAAK6B,YAAY0E,KAAKvG,QAIhDA,KAAKwG,SAAWH,EAChBrG,KAAK6F,MAAQhC,EACb7D,KAAK8F,OAAS/B,EACd/D,KAAK+F,UAAY/B,EAiFrB,OAhHgC1C,EAAhCoE,EAAAjF,GAkCEiF,EAAFtD,UAAAyB,KAAE,SAAKC,GACH,IAAK9D,KAAKoF,WAAapF,KAAK6F,MAAO,CACzB,IAAdM,EAAAnG,KAAAmG,kBACWA,EAAkBhB,mBAEZnF,KAAKyG,gBAAgBN,EAAmBnG,KAAK6F,MAAO/B,IAC7D9D,KAAK6B,cAFL7B,KAAK0G,aAAa1G,KAAK6F,MAAO/B,KAOpC4B,EAAFtD,UAAA2B,MAAE,SAAMlD,GACJ,IAAKb,KAAKoF,UAAW,CACX,IAAde,EAAAnG,KAAAmG,kBACM,GAAInG,KAAK8F,OACFK,EAAkBhB,mBAIrBnF,KAAKyG,gBAAgBN,EAAmBnG,KAAK8F,OAAQjF,GAHrDb,KAAK0G,aAAa1G,KAAK8F,OAAQjF,GAI/Bb,KAAK6B,kBAEF,CAAA,IAAKsE,EAAkBhB,mBAE5B,MADAnF,KAAK6B,cACChB,EAENsF,EAAkBlB,eAAiBpE,EACnCsF,EAAkBjB,iBAAkB,EACpClF,KAAK6B,iBAKX6D,EAAFtD,UAAA4B,SAAE,WAAA,IAAF2C,EAAA3G,KACI,IAAKA,KAAKoF,UAAW,CACX,IAAde,EAAAnG,KAAAmG,kBACM,GAAInG,KAAK+F,UAAW,CAClB,IAAMa,EAAkB,WAAM,OAAAD,EAAKZ,UAAUnF,KAAK+F,EAAKH,WAElDL,EAAkBhB,mBAIrBnF,KAAKyG,gBAAgBN,EAAmBS,GAHxC5G,KAAK0G,aAAaE,GAIlB5G,KAAK6B,mBAGP7B,KAAK6B,gBAKH6D,EAAVtD,UAAAsE,aAAE,SAAqBtG,EAAc0D,GACjC,IACE1D,EAAGQ,KAAKZ,KAAKwG,SAAU1C,GACvB,MAAOjD,GAEP,MADAb,KAAK6B,cACChB,IAIF6E,EAAVtD,UAAAqE,gBAAE,SAAwB7C,EAAuBxD,EAAc0D,GAC3D,IACE1D,EAAGQ,KAAKZ,KAAKwG,SAAU1C,GACvB,MAAOjD,GAGP,OAFA+C,EAAOqB,eAAiBpE,EACxB+C,EAAOsB,iBAAkB,EAG3B,OAAO,GAGCQ,EAAZtD,UAAAF,aAAE,WACU,IAAZiE,EAAAnG,KAAAmG,kBACInG,KAAKwG,SAAW,KAChBxG,KAAKmG,kBAAoB,KACzBA,EAAkBtE,eAEtB6D,EAhHA,CAAgCX,kOCjKhC,SAAAtE,GAAA,SAAAoG,IAA2CpG,EAA3CV,MAAAC,KAAAC,WAcA,OAd2CqB,EAA3CuF,EAAApG,GACEoG,EAAFzE,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKqF,YAAYxB,KAAKmD,IAGxBH,EAAFzE,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAKqF,YAAYtB,MAAMA,IAGzB8C,EAAFzE,UAAAiF,eAAE,SAAeF,GACbnH,KAAKqF,YAAYrB,YAErB6C,EAdA,CAA2CS,EAc3CvC,4BCtBwB,SAAQ1E,GAA8B,OAAAA,GAAyB,iBAAbA,EAAEG,SCA5D,iBAAhB,SAA6BsD,GAC3B,OAAOA,GAA2C,mBAArBA,EAAOyD,WAA2D,mBAAvBzD,EAAc0D,OCGxE,oBAAhB,SACEC,EACA1D,EACAC,GAEA,GAAIyD,EAAgB,CAClB,GAAIA,aAA0BH,EAAlCvC,WACM,OAAwB0C,EAG1B,GAAIA,EAAejC,EAAvBZ,cACM,OAAO6C,EAAejC,EAA5BZ,gBAIE,OAAK6C,GAAmB1D,GAAUC,EAI3B,IAAIsD,EAAbvC,WAAwB0C,EAAgB1D,EAAOC,GAHpC,IAAIsD,EAAfvC,WAA0BO,EAA1BnD,2BClBA,SAAAuF,EAAoCrB,GAClC,IAAIsB,EACAlD,EAAS4B,EAAQ5B,OAarB,MAXsB,mBAAXA,EACLA,EAAOmD,WACTD,EAAelD,EAAOmD,YAEpBD,EAAelD,EAAO,cACtBA,EAAOmD,WAAaD,GAGxBA,EAAe,eAGVA,EAfOhD,EAAhB+C,oBAAAA,EAkBa/C,EAAbiD,WAA0BF,EAAoBlD,EAA9CE,MAKaC,EAAbgD,aAA4BhD,EAA5BiD,+DCxBgB,YAAhB,cCoBA,SAAAC,EAAoCC,GAClC,OAAKA,EAIc,IAAfA,EAAItH,OACCsH,EAAI,GAGN,SAAeC,GACpB,OAAOD,EAAItG,OAAO,SAACwG,EAAW5H,GAA4B,OAAAA,EAAG4H,IAAOD,IAR7DE,EAAXC,KAFgB,YALhB,WAAA,IAA2B,IAA3BJ,EAAA,GAAAK,EAAA,EAA2BA,EAA3BlI,UAAAO,OAA2B2H,IAAAL,EAA3BK,EAAA,GAAAlI,UAAAkI,GACE,OAAON,EAAcC,kBAIvBD,iBCMA,WAcE,SAAFO,EAAcb,GAZLvH,KAATqI,WAA8B,EAatBd,IACFvH,KAAKsI,WAAaf,GAsTxB,OA7REgB,EAAFnG,UAAAoG,KAAE,SAAQC,GACN,IAAMb,EAAa,IAAIW,EAGvB,OAFAX,EAAWc,OAAS1I,KACpB4H,EAAWa,SAAWA,EACfb,GAuHTW,EAAFnG,UAAAmF,UAAE,SAAUnB,EACArC,EACAC,GAEA,IAAZyE,EAAAzI,KAAAyI,SACUE,EAAOC,EAAjBC,aAA8BzC,EAAgBrC,EAAOC,GAQjD,GANIyE,EACFA,EAAS7H,KAAK+H,EAAM3I,KAAK0I,QAEzBC,EAAKzF,IAAIlD,KAAK0I,SAAWC,EAAKxD,mBAAqBnF,KAAKsI,WAAWK,GAAQ3I,KAAK8I,cAAcH,IAG5FA,EAAKxD,qBACPwD,EAAKxD,oBAAqB,EACtBwD,EAAKzD,iBACP,MAAMyD,EAAK1D,eAIf,OAAO0D,GAGCJ,EAAZnG,UAAA0G,cAAE,SAAwBH,GACtB,IACE,OAAO3I,KAAKsI,WAAWK,GACvB,MAAO9H,GACP8H,EAAKzD,iBAAkB,EACvByD,EAAK1D,eAAiBpE,EACtB8H,EAAK5E,MAAMlD,KAWf0H,EAAFnG,UAAA2G,QAAE,SAAQlF,EAA0BmF,GAAlC,IAAFrC,EAAA3G,KASI,GARKgJ,IACCxE,EAAVE,KAAeuE,IAAMzE,EAArBE,KAA0BuE,GAAGC,QAAU1E,EAAvCE,KAA4CuE,GAAGC,OAAOC,QAC9CH,EAAcxE,EAAtBE,KAA2BuE,GAAGC,OAAOC,QACpB3E,EAAjBE,KAAsByE,UACdH,EAAcxE,EAAtBE,KAA2ByE,WAIlBH,EACH,MAAM,IAAIlI,MAAM,yBAGlB,OAAO,IAAIkI,EAAkB,SAACI,EAASC,GAGrC,IAAIhG,EACJA,EAAesD,EAAKY,UAAU,SAACzD,GAC7B,GAAIT,EAKF,IACEQ,EAAKC,GACL,MAAOjD,GACPwI,EAAOxI,GACPwC,EAAaxB,mBASfgC,EAAKC,IAENuF,EAAQD,MAILb,EAAZnG,UAAAkG,WAAE,SAAqB1C,GACnB,OAAO5F,KAAK0I,OAAOnB,UAAU3B,IAY/B2C,EAAFnG,UAAGkH,EAAH1B,YAAE,WACE,OAAO5H,MAkCTuI,EAAFnG,UAAAmH,KAAE,WAAF,IAAU,IAAVC,EAAA,GAAArB,EAAA,EAAUA,EAAVlI,UAAAO,OAAU2H,IAAAqB,EAAVrB,EAAA,GAAAlI,UAAAkI,GACI,OAA0B,IAAtBqB,EAAWhJ,OACNR,KAGFyJ,EAAX5B,cAAyB2B,EAAdC,CAA0BzJ,OASnCuI,EAAFnG,UAAAsH,UAAE,SAAUV,GAAV,IAAFrC,EAAA3G,KASI,GARKgJ,IACCxE,EAAVE,KAAeuE,IAAMzE,EAArBE,KAA0BuE,GAAGC,QAAU1E,EAAvCE,KAA4CuE,GAAGC,OAAOC,QAC9CH,EAAcxE,EAAtBE,KAA2BuE,GAAGC,OAAOC,QACpB3E,EAAjBE,KAAsByE,UACdH,EAAcxE,EAAtBE,KAA2ByE,WAIlBH,EACH,MAAM,IAAIlI,MAAM,yBAGlB,OAAO,IAAIkI,EAAY,SAACI,EAASC,GAC/B,IAAIvF,EACJ6C,EAAKY,UAAU,SAAClH,GAAS,OAAAyD,EAAQzD,GAAG,SAACQ,GAAa,OAAAwI,EAAOxI,IAAM,WAAM,OAAAuI,EAAQtF,QArS1EyE,EAAT5C,OAA4B,SAAI4B,GAC5B,OAAO,IAAIgB,EAAchB,IAuS7BgB,EAtUA,sBCzBA,SAAAoB,EAAuCjF,GACrC,IAAMD,EAAcC,EAAKD,OAEzB,GAAsB,mBAAXA,EAIT,OAHKA,EAAOmF,WACVnF,EAAOmF,SAAWnF,EAAO,sBAEpBA,EAAOmF,SAGN,IAAZC,EAAAnF,EAAAoF,IACI,GAAID,GAA0C,mBAA5B,IAAIA,GAAM,cAC1B,MAAO,aAED,IAAZE,EAAArF,EAAAsF,IAEI,GAAID,EAEF,IADA,IAAIE,EAAO3D,OAAO4D,oBAAoBH,EAAI3H,WACjCpB,EAAI,EAAGA,EAAIiJ,EAAKzJ,SAAUQ,EAAG,CACpC,IAAImJ,EAAMF,EAAKjJ,GAEf,GAAY,YAARmJ,GAA6B,SAARA,GAAkBJ,EAAI3H,UAAU+H,KAASJ,EAAI3H,UAAmB,QACvF,OAAO+H,EAIb,MAAO,aA1BKxF,EAAhBgF,uBAAAA,EA8BahF,EAAbiF,SAAwBD,EAAuBnF,EAA/CE,MAKaC,EAAbyF,WAA0BzF,EAA1BiF,wQC7BA,SAAAnJ,GAGE,SAAF4J,EAAsBzG,EAAuCmD,EAAuBE,GAChFxG,EAAJG,KAAAZ,MADsBA,KAAtB4D,OAAsBA,EAAuC5D,KAA7D+G,WAA6DA,EAAuB/G,KAApFiH,WAAoFA,EAF1EjH,KAAVsC,MAA0B,EAmB1B,OApB2ChB,EAA3C+I,EAAA5J,GAOY4J,EAAZjI,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAK4D,OAAOkD,WAAW9G,KAAK+G,WAAYjD,EAAO9D,KAAKiH,WAAYjH,KAAKsC,QAAStC,OAGtEqK,EAAZjI,UAAA0D,OAAE,SAAiB/B,GACf/D,KAAK4D,OAAOwD,YAAYrD,EAAO/D,MAC/BA,KAAK6B,eAGGwI,EAAZjI,UAAA2D,UAAE,WACE/F,KAAK4D,OAAOyD,eAAerH,MAC3BA,KAAK6B,eAETwI,EApBA,CAA2C/C,EAoB3CvC,aCZgB,yBAAhB,SAAqCuF,EACAC,EACAxD,EACAE,GACnC,IAAI5B,EAA+B,IAAImF,EAAzCH,gBAAyDC,EAAiBvD,EAAYE,GAEpF,GAAI5B,EAAYvD,OACd,OAAO,KAGT,GAAIyI,aAAkBE,EAAxBlC,WACI,OAAIgC,EAAOlC,WACThD,EAAYxB,KAAW0G,EAAQzG,OAC/BuB,EAAYrB,WACL,OAEPqB,EAAYF,oBAAqB,EAC1BoF,EAAOhD,UAAUlC,IAErB,GAAIqF,EAAbC,YAAyBJ,GAAS,CAC9B,IAAK,IAAIvJ,EAAI,EAAGuB,EAAMgI,EAAO/J,OAAQQ,EAAIuB,IAAQ8C,EAAYvD,OAAQd,IACnEqE,EAAYxB,KAAK0G,EAAOvJ,IAErBqE,EAAYvD,QACfuD,EAAYrB,eAET,CAAA,GAAI4G,EAAbC,UAAuBN,GAcnB,OAbAA,EAAO/C,KACL,SAAC1D,GACMuB,EAAYvD,SACfuD,EAAYxB,KAAUC,GACtBuB,EAAYrB,aAGhB,SAACnD,GAAa,OAAAwE,EAAYtB,MAAMlD,KAEjC2G,KAAK,KAAM,SAAC3G,GAEX2D,EAANE,KAAWoG,WAAW,WAAQ,MAAMjK,MAEzBwE,EACF,GAAIkF,GAA6C,mBAA5BA,EAAOQ,EAArCnB,UAEI,IADA,IAAMA,EAAgBW,EAAOQ,EAAjCnB,cACO,CACD,IAAIoB,EAAOpB,EAAS/F,OACpB,GAAImH,EAAKC,KAAM,CACb5F,EAAYrB,WACZ,MAGF,GADAqB,EAAYxB,KAAKmH,EAAKlH,OAClBuB,EAAYvD,OACd,WAGC,GAAIyI,GAA+C,mBAA9BA,EAAOjB,EAArC1B,YAAwE,CACpE,IAAMsD,EAAMX,EAAOjB,EAAvB1B,cACI,GAA6B,mBAAlBsD,EAAI3D,UAGb,OAAO2D,EAAI3D,UAAU,IAAIiD,EAA/BH,gBAA+CC,EAAiBvD,EAAYE,IAFtE5B,EAAYtB,MAAM,IAAIoH,UAAU,uEAI7B,CACL,IACMC,EAAV,iBADkBrI,EAAlBC,SAA2BuH,GAAU,oBAAsB,IAAIA,EAA/D,KACA,4FAEIlF,EAAYtB,MAAM,IAAIoH,UAAUC,KAElC,OAAO,iMCZT,SAAA3K,GAME,SAAF4K,EAAchG,EACQiG,GAClB7K,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBsL,iBAAsBA,EAJZtL,KAAVuL,UAA8B,EAHMjK,EAApC+J,EAAA5K,GAWY4K,EAAZjJ,UAAAyD,MAAE,SAAgB/B,GAGd,GAFA9D,KAAK8D,MAAQA,EACb9D,KAAKuL,UAAW,GACXvL,KAAKwL,UAAW,CACnB,IAAMC,EAAW9I,EAAvBC,SAAgC5C,KAAKsL,iBAAd3I,CAAgCmB,GACjD,GAAI2H,IAAavL,EAAvBC,YACQH,KAAKqF,YAAYtB,MAAM7D,EAA/BC,YAA2CN,OAC9B,CACL,IAAM6L,EAAoBC,EAAlCC,kBAAoD5L,KAAMyL,GAC9CC,EAAkB5J,OACpB9B,KAAK6L,gBAEL7L,KAAKkD,IAAIlD,KAAKwL,UAAYE,MAMlCL,EAAFjJ,UAAAyJ,cAAE,WACE,IAAQ/H,EAAZ9D,KAAA8D,MAAmByH,EAAnBvL,KAAAuL,SAA6BC,EAA7BxL,KAAAwL,UACQA,IACFxL,KAAKwC,OAAOgJ,GACZxL,KAAKwL,UAAY,KACjBA,EAAU3J,eAER0J,IACFvL,KAAK8D,MAAQ,KACb9D,KAAKuL,UAAW,EAChBvL,KAAKqF,YAAYxB,KAAKC,KAI1BuH,EAAFjJ,UAAA0E,WAAE,SAAWC,EAAeC,EAAeC,EAAoBC,GAC3DlH,KAAK6L,iBAGPR,EAAFjJ,UAAAiF,eAAE,WACErH,KAAK6L,iBAhDT,CAAoCC,EAkDpCjF,iNCxGA,SAAApG,GACE,SAAFsL,EAAcC,EAAsBC,GAChCxL,EAAJG,KAAAZ,MAeA,OAjB+BsB,EAA/ByK,EAAAtL,GAcSsL,EAAT3J,UAAA8J,SAAE,SAAgBC,EAAWC,GACzB,YADJ,IAAAA,IAA6BA,EAA7B,GACWpM,MAEX+L,EAjBA,CAA+B9F,EAiB/BrE,qNCxBA,SAAAnB,GAOE,SAAF4L,EAAwBL,EACAC,GACpBxL,EAAJG,KAAAZ,KAAUgM,EAAWC,GAFGjM,KAAxBgM,UAAwBA,EACAhM,KAAxBiM,KAAwBA,EAHZjM,KAAZsM,SAA+B,EA0I/B,OA/IoChL,EAApC+K,EAAA5L,GAYS4L,EAATjK,UAAA8J,SAAE,SAAgBC,EAAWC,GAEzB,QAFJ,IAAAA,IAA6BA,EAA7B,GAEQpM,KAAK8B,OACP,OAAO9B,KAITA,KAAKmM,MAAQA,EAIbnM,KAAKsM,SAAU,EAEf,IAAMC,EAAKvM,KAAKuM,GACVP,EAAYhM,KAAKgM,UA+BvB,OARU,MAANO,IACFvM,KAAKuM,GAAKvM,KAAKwM,eAAeR,EAAWO,EAAIH,IAG/CpM,KAAKoM,MAAQA,EAEbpM,KAAKuM,GAAKvM,KAAKuM,IAAMvM,KAAKyM,eAAeT,EAAWhM,KAAKuM,GAAIH,GAEtDpM,MAGCqM,EAAZjK,UAAAqK,eAAE,SAAyBT,EAA2BO,EAAUH,GAC5D,YADJ,IAAAA,IAAgEA,EAAhE,GACW5H,EAAXE,KAAgBgI,YAAYV,EAAUW,MAAMpG,KAAKyF,EAAWhM,MAAOoM,IAGvDC,EAAZjK,UAAAoK,eAAE,SAAyBR,EAA2BO,EAASH,GAE3D,YAFJ,IAAAA,IAA+DA,EAA/D,GAEkB,OAAVA,GAAkBpM,KAAKoM,QAAUA,IAA0B,IAAjBpM,KAAKsM,QAC1CC,EAIF/H,EAAXE,KAAgBkI,cAAcL,IAAOM,WAAaA,WAOzCR,EAATjK,UAAA0K,QAAE,SAAeX,EAAUC,GAEvB,GAAIpM,KAAK8B,OACP,OAAO,IAAIhB,MAAM,gCAGnBd,KAAKsM,SAAU,EACf,IAAMvI,EAAQ/D,KAAK+M,SAASZ,EAAOC,GACnC,GAAIrI,EACF,OAAOA,GACmB,IAAjB/D,KAAKsM,SAAgC,MAAXtM,KAAKuM,KAcxCvM,KAAKuM,GAAKvM,KAAKwM,eAAexM,KAAKgM,UAAWhM,KAAKuM,GAAI,QAIjDF,EAAZjK,UAAA2K,SAAE,SAAmBZ,EAAUC,GAC3B,IAAIY,GAAmB,EACnBC,EAAkBJ,UACtB,IACE7M,KAAKiM,KAAKE,GACV,MAAOtM,GACPmN,GAAU,EACVC,IAAepN,GAAKA,GAAK,IAAIiB,MAAMjB,GAErC,GAAImN,EAEF,OADAhN,KAAK6B,cACEoL,GAIDZ,EAAZjK,UAAAF,aAAE,WAEE,IAAMqK,EAAKvM,KAAKuM,GACVP,EAAYhM,KAAKgM,UACjBkB,EAAUlB,EAAUkB,QACpB5K,EAAQ4K,EAAQxJ,QAAQ1D,MAE9BA,KAAKiM,KAAQ,KACbjM,KAAKmM,MAAQ,KACbnM,KAAKsM,SAAU,EACftM,KAAKgM,UAAY,MAEF,IAAX1J,GACF4K,EAAQvJ,OAAOrB,EAAO,GAGd,MAANiK,IACFvM,KAAKuM,GAAKvM,KAAKwM,eAAeR,EAAWO,EAAI,OAG/CvM,KAAKoM,MAAQ,MAEjBC,EA/IA,CAAoCc,EA+IpCpB,sBClIA,WAIE,SAAFqB,EAAsBC,EACRC,QAAd,IAAAA,IAAcA,EAAoBF,EAAUE,KADtBtN,KAAtBqN,gBAAsBA,EAElBrN,KAAKsN,IAAMA,EAiCf,OAHSF,EAAThL,UAAA8J,SAAE,SAAmBD,EAA4CG,EAAmBD,GAChF,YADJ,IAAAC,IAAiEA,EAAjE,GACW,IAAIpM,KAAKqN,gBAAmBrN,KAAMiM,GAAMC,SAASC,EAAOC,IAnCnDgB,EAAhBE,IAAoCC,KAAKD,IAAMC,KAAKD,IAAM,WAAM,OAAC,IAAIC,MAqCrEH,EAvCA,6MCpBA,SAAA3M,GAAA,SAAA+M,IAAoC/M,EAApCV,MAAAC,KAAAC,WACSD,KAATkN,QAA4C,GAMnClN,KAATyN,QAA2B,EAOlBzN,KAAT0N,UAA0Bb,UA6B1B,OA3CoCvL,EAApCkM,EAAA/M,GAgBS+M,EAATpL,UAAAuK,MAAE,SAAagB,GAEJ,IAAXT,EAAAlN,KAAAkN,QAEI,GAAIlN,KAAKyN,OACPP,EAAQjK,KAAK0K,OADf,CAKA,IAAI5J,EACJ/D,KAAKyN,QAAS,EAEd,GACE,GAAI1J,EAAQ4J,EAAOb,QAAQa,EAAOxB,MAAOwB,EAAOvB,OAC9C,YAEKuB,EAAST,EAAQU,SAI1B,GAFA5N,KAAKyN,QAAS,EAEV1J,EAAO,CACT,KAAO4J,EAAST,EAAQU,SACtBD,EAAO9L,cAET,MAAMkC,KAGZyJ,EA3CA,CAAoCK,EA2CpCT,qBCAqB,IAAIU,EAAzBN,eAAwCO,EAAxC1B,cC5CgB,iBAAhB,SAA0B2B,GAKxB,OAAQnL,EAAVtC,QAAkByN,IAAuC,GAA9BA,EAAMC,WAAWD,GAAO,ICNnC,oBAAhB,SAA4BlK,GAC1B,OAAOA,GAA0C,mBAApBA,EAAOoI,WCFtB,eAAhB,SAAuBpI,GACrB,OAAOA,aAAiByJ,OAASW,OAAOpK,iMCa1C,SAAArD,GAuEE,SAAF0N,EAAcC,EACAC,EACArC,QAFd,IAAAoC,IAAcA,EAAd,GAGI3N,EAAJG,KAAAZ,MAPUA,KAAVqO,QAA4B,EAClBrO,KAAVoO,QAA4B,EAQpBE,EAARC,UAAkBF,GACZrO,KAAKqO,OAASG,OAAOH,GAAU,EAAK,EAAKG,OAAOH,GACvCI,GAAfC,YAA2BL,KACrBrC,EAAyBqC,GAGtBI,GAATC,YAAqB1C,KACfA,EAAY2C,EAAlBC,OAGI5O,KAAKgM,UAAYA,EACjBhM,KAAKoO,QAAUS,GAAnBC,OAA0BV,IAClBA,EAAUpO,KAAKgM,UAAUsB,MACjBc,EAzFqB9M,GAArC6M,EAAA1N,GA4CS0N,EAATxI,OAAE,SAAcoJ,EACAV,EACArC,GACZ,YAHJ,IAAA+C,IAAgBA,EAAhB,GAGW,IAAIZ,EAAgBY,EAAcV,EAAQrC,IAG5CmC,EAATa,SAAE,SAAgB7C,GAEN,IAAZ7J,EAAA6J,EAAA7J,MAAmB+L,EAAnBlC,EAAAkC,OAA2BzI,EAA3BuG,EAAAvG,WAKI,GAFAA,EAAW/B,KAAKvB,IAEZsD,EAAW9D,OAAf,CAEO,IAAgB,IAAZuM,EACT,OAAOzI,EAAW5B,WAGpBmI,EAAM7J,MAAQA,EAAQ,EAVAtC,KAWfkM,SAASC,EAAOkC,KA4BfF,EAAZ/L,UAAAkG,WAAE,SAAqB1C,GACnB,IACQyI,EAAZrO,KAAAqO,OAAoBD,EAApBpO,KAAAoO,QAEI,OAFJpO,KAAAgM,UAEqBE,SAASiC,EAAgBa,SAAUZ,EAAS,CAC3D9L,MAJY,EAIL+L,OAAbA,EAAqBzI,WAArBA,KAjGA,CAAqC6E,EAoGrClC,sMCrDA,SAAA9H,GAGE,SAAFwO,EAAc5J,EAA8B6J,GACxCzO,EAAJG,KAAAZ,KAAUqF,GAHArF,KAAVmP,OAAwB,GAIpBnP,KAAKkD,IAAIyI,EAAbC,kBAA+B5L,KAAMkP,IALH5N,GAAlC2N,EAAAxO,GAQYwO,EAAZ7M,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKmP,OAAOlM,KAAKa,IAGnBmL,EAAF7M,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAMgI,EAASnP,KAAKmP,OACpBnP,KAAKmP,OAAS,GACdnP,KAAKqF,YAAYxB,KAAKsL,IAjB1B,CAAkCrD,EAmBlCjF,2MCNA,SAAApG,GAGE,SAAF2O,EAAc/J,EAAsCgK,GAChD5O,EAAJG,KAAAZ,KAAUqF,GAD0CrF,KAApDqP,WAAoDA,EAF1CrP,KAAVmP,OAAwB,GADe7N,GAAvC8N,EAAA3O,GAOY2O,EAAZhN,UAAAyD,MAAE,SAAgB/B,GACd,IAAMqL,EAASnP,KAAKmP,OAEpBA,EAAOlM,KAAKa,GAERqL,EAAO3O,QAAUR,KAAKqP,aACxBrP,KAAKqF,YAAYxB,KAAKsL,GACtBnP,KAAKmP,OAAS,KAIRC,EAAZhN,UAAA2D,UAAE,WACE,IAAMoJ,EAASnP,KAAKmP,OACA,EAAhBA,EAAO3O,QACTR,KAAKqF,YAAYxB,KAAKsL,GAExB1O,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAvBA,CAAuCsH,EAyBvCvC,YAOA,SAAAtE,GAIE,SAAF6O,EAAcjK,EAAsCgK,EAA4BE,GAC5E9O,EAAJG,KAAAZ,KAAUqF,GAD0CrF,KAApDqP,WAAoDA,EAA4BrP,KAAhFuP,iBAAgFA,EAHtEvP,KAAVwP,QAAgC,GACtBxP,KAAVyP,MAA0B,EAFiBnO,GAA3CgO,EAAA7O,GAQY6O,EAAZlN,UAAAyD,MAAE,SAAgB/B,GACd,IAAQuL,EAAZrP,KAAAqP,WAAwBE,EAAxBvP,KAAAuP,iBAA0CC,EAA1CxP,KAAAwP,QAAmDC,EAAnDzP,KAAAyP,MAEIzP,KAAKyP,QACDA,EAAQF,GAAqB,GAC/BC,EAAQvM,KAAK,IAGf,IAAK,IAAIjC,EAAIwO,EAAQhP,OAAQQ,KAAO,CAClC,IAAMmO,EAASK,EAAQxO,GACvBmO,EAAOlM,KAAKa,GACRqL,EAAO3O,SAAW6O,IACpBG,EAAQ7L,OAAO3C,EAAG,GAClBhB,KAAKqF,YAAYxB,KAAKsL,MAKlBG,EAAZlN,UAAA2D,UAAE,WAGE,IAFA,IAAQyJ,EAAZxP,KAAAwP,QAAqBnK,EAArBrF,KAAAqF,YAE4B,EAAjBmK,EAAQhP,QAAY,CACzB,IAAI2O,EAASK,EAAQ5B,QACD,EAAhBuB,EAAO3O,QACT6E,EAAYxB,KAAKsL,GAGrB1O,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAnCA,CAA2CsH,EAsC3CvC,kMC/CA2K,GAAA,WACE1P,KAAFmP,OAAgB,KAgBhB,SAAA1O,GAIE,SAAFkP,EAActK,EACQuK,EACAC,EACAC,EACA9D,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtB4P,eAAsBA,EACA5P,KAAtB6P,uBAAsBA,EACA7P,KAAtB8P,cAAsBA,EACA9P,KAAtBgM,UAAsBA,EAPZhM,KAAV+P,SAAwC,GASpC,IAAM1J,EAAUrG,KAAKgQ,cAErB,GADAhQ,KAAKiQ,aAAyC,MAA1BJ,GAAkCA,EAAyB,EAC3E7P,KAAKiQ,aAAc,CACrB,IAAMC,EAAoB,CAAEtK,WAAY5F,KAAMqG,QAApDA,EAA6DuJ,eAA7DA,GACM5P,KAAKkD,IAAImD,EAAQ8J,YAAcnE,EAAUE,SAASkE,GAA4BR,EAAgBM,QACzF,CACL,IAAMG,EAAa,CAAEzK,WAAY5F,KAAMqG,QAA7CA,GACYiK,EAAkC,CAAEV,eAAhDA,EAAgEC,uBAAhEA,EAAwFjK,WAAY5F,KAAMgM,UAA1GA,GACMhM,KAAKkD,IAAImD,EAAQ8J,YAAcnE,EAAUE,SAASqE,GAAqBX,EAAgBS,IACvFrQ,KAAKkD,IAAI8I,EAAUE,SAASsE,GAAwBX,EAAwBS,KAnB5ChP,GAAtCqO,EAAAlP,GAuBYkP,EAAZvN,UAAAyD,MAAE,SAAgB/B,GAId,IAHA,IAEI2M,EAFEV,EAAW/P,KAAK+P,SAChBxN,EAAMwN,EAASvP,OAEZQ,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAMqF,EAAU0J,EAAS/O,GACnBmO,EAAS9I,EAAQ8I,OACvBA,EAAOlM,KAAKa,GACRqL,EAAO3O,QAAUR,KAAK8P,gBACxBW,EAAsBpK,GAItBoK,GACFzQ,KAAK0Q,aAAaD,IAIZd,EAAZvN,UAAA0D,OAAE,SAAiBjF,GACfb,KAAK+P,SAASvP,OAAS,EACvBC,EAAJ2B,UAAU0D,OAAVlF,KAAAZ,KAAiBa,IAGL8O,EAAZvN,UAAA2D,UAAE,WAEE,IADA,IAAQgK,EAAZ/P,KAAA+P,SAAsB1K,EAAtBrF,KAAAqF,YAC6B,EAAlB0K,EAASvP,QAAY,CAC1B,IAAM6F,EAAU0J,EAASnC,QACzBvI,EAAYxB,KAAKwC,EAAQ8I,QAE3B1O,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAGY2P,EAAZvN,UAAAF,aAAE,WACElC,KAAK+P,SAAW,MAGRJ,EAAZvN,UAAAsO,aAAE,SAAuBrK,GACrBrG,KAAK2Q,aAAatK,GAClB,IAAM8J,EAAc9J,EAAQ8J,YAI5B,GAHAA,EAAYtO,cACZ7B,KAAKwC,OAAO2N,IAEPnQ,KAAK8B,QAAU9B,KAAKiQ,aAAc,CACrC5J,EAAUrG,KAAKgQ,cACf,IAAMJ,EAAiB5P,KAAK4P,eACtBM,EAAoB,CAAEtK,WAAY5F,KAAMqG,QAApDA,EAA6DuJ,eAA7DA,GACM5P,KAAKkD,IAAImD,EAAQ8J,YAAcnQ,KAAKgM,UAAUE,SAASkE,GAA4BR,EAAgBM,MAIvGP,EAAFvN,UAAA4N,YAAE,WACE,IAAM3J,EAAsB,IAAIqJ,GAEhC,OADA1P,KAAK+P,SAAS9M,KAAKoD,GACZA,GAGTsJ,EAAFvN,UAAAuO,aAAE,SAAatK,GACXrG,KAAKqF,YAAYxB,KAAKwC,EAAQ8I,QAC9B,IAAMY,EAAW/P,KAAK+P,SAGH,IADCA,EAAWA,EAASrM,QAAQ2C,IAAY,IAE1D0J,EAASpM,OAAOoM,EAASrM,QAAQ2C,GAAU,IArFjD,CAAsCiB,EAwFtCvC,YAEA,SAAAqL,GAAuDjE,GACrD,IAAMvG,EAAwCuG,EAAMvG,WAE9CgL,EAAczE,EAAM9F,QACtBuK,GACFhL,EAAW+K,aAAaC,GAGrBhL,EAAW9D,SACdqK,EAAM9F,QAAUT,EAAWoK,cAC3B7D,EAAM9F,QAAQ8J,YAAcnQ,KAAKkM,SAASC,EAAOA,EAAMyD,iBAS3D,SAAAY,GAAmErE,GACzD,IAAV0D,EAAA1D,EAAA0D,uBAAkCD,EAAlCzD,EAAAyD,eAAkDhK,EAAlDuG,EAAAvG,WAA8DoG,EAA9DG,EAAAH,UACQ3F,EAAUT,EAAWoK,cAEtBpK,EAAW9D,SACd8D,EAAW1C,IAAImD,EAAQ8J,YAAcnE,EAAUE,SAAyBqE,GAAqBX,EAAgB,CAAEhK,WAAnHA,EAA+HS,QAA/HA,KAF2CrG,KAGhCkM,SAASC,EAAO0D,IAI3B,SAAAU,GAAgCM,GACtB,IAAVjL,EAAAiL,EAAAjL,WAAsBS,EAAtBwK,EAAAxK,QACET,EAAW+K,aAAatK,mMC9J1B,SAAA5F,GAGE,SAAFqQ,EAAczL,EACQ0L,EACAC,GAClBvQ,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB+Q,SAAsBA,EACA/Q,KAAtBgR,gBAAsBA,EAJZhR,KAAV+P,SAA8C,GAM1C/P,KAAKkD,IAAIyI,EAAbC,kBAA+B5L,KAAM+Q,IAPMzP,GAA3CwP,EAAArQ,GAUYqQ,EAAZ1O,UAAAyD,MAAE,SAAgB/B,GAGd,IAFA,IAAMiM,EAAW/P,KAAK+P,SAChBxN,EAAMwN,EAASvP,OACZQ,EAAI,EAAGA,EAAIuB,EAAKvB,IACvB+O,EAAS/O,GAAGmO,OAAOlM,KAAKa,IAIlBgN,EAAZ1O,UAAA0D,OAAE,SAAiBjF,GAEf,IADA,IAAMkP,EAAW/P,KAAK+P,SACG,EAAlBA,EAASvP,QAAY,CAC1B,IAAM6F,EAAU0J,EAASnC,QACzBvH,EAAQhD,aAAaxB,cACrBwE,EAAQ8I,OAAS,KACjB9I,EAAQhD,aAAe,KAEzBrD,KAAK+P,SAAW,KAChBtP,EAAJ2B,UAAU0D,OAAVlF,KAAAZ,KAAiBa,IAGLiQ,EAAZ1O,UAAA2D,UAAE,WAEE,IADA,IAAMgK,EAAW/P,KAAK+P,SACG,EAAlBA,EAASvP,QAAY,CAC1B,IAAM6F,EAAU0J,EAASnC,QACzB5N,KAAKqF,YAAYxB,KAAKwC,EAAQ8I,QAC9B9I,EAAQhD,aAAaxB,cACrBwE,EAAQ8I,OAAS,KACjB9I,EAAQhD,aAAe,KAEzBrD,KAAK+P,SAAW,KAChBtP,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAGE8Q,EAAF1O,UAAA0E,WAAE,SAAWC,EAAiBC,EACjBC,EAAoBC,EACpBC,GACTJ,EAAa/G,KAAKiR,YAAYlK,GAAc/G,KAAKkR,WAAWlK,IAG9D8J,EAAF1O,UAAAiF,eAAE,SAAeF,GACbnH,KAAKiR,YAAmB9J,EAAUd,UAG5ByK,EAAV1O,UAAA8O,WAAE,SAAmBpN,GACjB,IACE,IACMoL,EADkBlP,KAAKgR,gBACWpQ,KAAKZ,KAAM8D,GAC/CoL,GACFlP,KAAKmR,aAAajC,GAEpB,MAAOrO,GACPb,KAAK8F,OAAOjF,KAIRiQ,EAAV1O,UAAA6O,YAAE,SAAoB5K,GAClB,IAAM0J,EAAW/P,KAAK+P,SAEtB,GAAIA,GAAY1J,EAAS,CACf,IAAd8I,EAAA9I,EAAA8I,OAAsB9L,EAAtBgD,EAAAhD,aACMrD,KAAKqF,YAAYxB,KAAKsL,GACtBY,EAASpM,OAAOoM,EAASrM,QAAQ2C,GAAU,GAC3CrG,KAAKwC,OAAOa,GACZA,EAAaxB,gBAITiP,EAAV1O,UAAA+O,aAAE,SAAqBjC,GACnB,IAAMa,EAAW/P,KAAK+P,SAGhB1M,EAAe,IAAI4C,EAA7BrE,aACUyE,EAAU,CAAE8I,OAFO,GAEC9L,aAA9BA,GACI0M,EAAS9M,KAAKoD,GAEd,IAAMqF,EAAoBC,EAA9BC,kBAAgD5L,KAAMkP,EAAsB7I,IAEnEqF,GAAqBA,EAAkB5J,OAC1C9B,KAAKiR,YAAY5K,IAEVqF,EAAmBrF,QAAUA,EAEpCrG,KAAKkD,IAAIwI,GACTrI,EAAaH,IAAIwI,KA7FvB,CAA2CI,EAgG3CjF,2MC5GA,SAAApG,GAKE,SAAF2Q,EAAc/L,EAAsC2L,GAChDvQ,EAAJG,KAAAZ,KAAUqF,GAD0CrF,KAApDgR,gBAAoDA,EAH1ChR,KAAVqR,aAAiC,EAK7BrR,KAAKkR,aAP6B5P,GAAtC8P,EAAA3Q,GAUY2Q,EAAZhP,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKmP,OAAOlM,KAAKa,IAGTsN,EAAZhP,UAAA2D,UAAE,WACE,IAAMoJ,EAASnP,KAAKmP,OAChBA,GACFnP,KAAKqF,YAAYxB,KAAKsL,GAExB1O,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAGYoR,EAAZhP,UAAAF,aAAE,WACElC,KAAKmP,OAAS,KACdnP,KAAKqR,aAAc,GAGrBD,EAAFhP,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKkR,cAGPE,EAAFhP,UAAAiF,eAAE,WACMrH,KAAKqR,YACPrR,KAAKgE,WAELhE,KAAKkR,cAITE,EAAFhP,UAAA8O,WAAE,WAEQ,IAAVI,EAAAtR,KAAAsR,oBAEQA,IACFtR,KAAKwC,OAAO8O,GACZA,EAAoBzP,eAGtB,IAAMsN,EAASnP,KAAKmP,OAChBnP,KAAKmP,QACPnP,KAAKqF,YAAYxB,KAAKsL,GAGxBnP,KAAKmP,OAAS,GAEd,IAAMD,EAAkBvM,EAA5BC,SAAqC5C,KAAKgR,gBAAdrO,GAEpBuM,IAAoBhP,EAA5BC,YACMH,KAAK+D,MAAM7D,EAAjBC,YAA6BN,IAEvByR,EAAsB,IAAIrL,EAAhCrE,aACM5B,KAAKsR,oBAAsBA,EAC3BtR,KAAKkD,IAAIoO,GACTtR,KAAKqR,aAAc,EACnBC,EAAoBpO,IAAIyI,EAA9BC,kBAAgD5L,KAAMkP,IAChDlP,KAAKqR,aAAc,IAnEzB,CAAsCvF,EAsEtCjF,2MC9CA,SAAApG,GACE,SAAF8Q,EAAclM,EACQmM,EACAC,GAClBhR,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBwR,SAAsBA,EACAxR,KAAtByR,OAAsBA,EAHcnQ,GAApCiQ,EAAA9Q,GAYE8Q,EAAFnP,UAAA2B,MAAE,SAAMlD,GACJ,IAAKb,KAAKoF,UAAW,CACnB,IAAImF,OAAV,EACM,IACEA,EAASvK,KAAKwR,SAAS3Q,EAAKb,KAAKyR,QACjC,MAAOC,GAEP,YADAjR,EAAR2B,UAAc2B,MAAdnD,KAAAZ,KAAoB0R,GAGd1R,KAAKgG,yBACLhG,KAAKkD,IAAIyI,EAAfC,kBAAiC5L,KAAMuK,MAtBvC,CAAoCuB,EAyBpCjF,4NCxGA,SAAApG,GAwBE,SAAFkR,EAAqB7N,EAAkBkI,GACnCvL,EAAJG,KAAAZ,MADqBA,KAArB8D,MAAqBA,EAAkB9D,KAAvCgM,UAAuCA,EAFrChM,KAAFqI,WAAuB,EAIf2D,IACFhM,KAAKqI,WAAY,GAmBvB,OA9CyC/G,GAAzCqQ,EAAAlR,GACSkR,EAAThM,OAAE,SAAiB7B,EAAUkI,GACzB,OAAO,IAAI2F,EAAiB7N,EAAOkI,IAG9B2F,EAAT3C,SAAE,SAAgB7C,GACN,IAAZlB,EAAAkB,EAAAlB,KAAkBnH,EAAlBqI,EAAArI,MAAyB8B,EAAzBuG,EAAAvG,WAEQqF,EACFrF,EAAW5B,YAIb4B,EAAW/B,KAAKC,GACZ8B,EAAW9D,SAIfqK,EAAMlB,MAAO,EACNjL,KAAMkM,SAASC,MAYdwF,EAAZvP,UAAAkG,WAAE,SAAqB1C,GACnB,IAAM9B,EAAQ9D,KAAK8D,MACbkI,EAAYhM,KAAKgM,UAEvB,GAAIA,EACF,OAAOA,EAAUE,SAASyF,EAAiB3C,SAAU,EAAG,CACtD/D,MAAM,EAAOnH,MAArBA,EAA4B8B,WAA5BA,IAGMA,EAAW/B,KAAKC,GACX8B,EAAW9D,QACd8D,EAAW5B,YAInB2N,EA9CA,CAAyClH,EA8CzClC,yNC1CA,SAAA9H,GAsDE,SAAFmR,EAAsB5F,GAClBvL,EAAJG,KAAAZ,MADsBA,KAAtBgM,UAAsBA,EActB,OApEwC1K,GAAxCsQ,EAAAnR,GA6CSmR,EAATjM,OAAE,SAAiBqG,GACf,OAAO,IAAI4F,EAAmB5F,IAGzB4F,EAAT5C,SAAE,SAAmB6B,GACrBA,EAAAjL,WACe5B,YAOH4N,EAAZxP,UAAAkG,WAAE,SAAqB1C,GAEnB,IAAMoG,EAAYhM,KAAKgM,UAEvB,GAAIA,EACF,OAAOA,EAAUE,SAAS0F,EAAgB5C,SAAU,EAAG,CAAEpJ,WAA/DA,IAEMA,EAAW5B,YAGjB4N,EApEA,CAAwCnH,EAoExClC,yNCrEA,SAAA9H,GA0FE,SAAFoR,EAAsBC,EAAoB9F,GACtCvL,EAAJG,KAAAZ,MADsBA,KAAtB8R,MAAsBA,GAAoB9R,KAA1CgM,UAA0CA,IAEH,IAAjB8F,EAAMtR,SACtBR,KAAKqI,WAAY,EACjBrI,KAAK8D,MAAQgO,EAAM,IAqBzB,OAnHwCxQ,GAAxCuQ,EAAApR,GAESoR,EAATlM,OAAE,SAAiBmM,EAAY9F,GAC3B,OAAO,IAAI6F,EAAgBC,EAAO9F,IA8C7B6F,EAATE,GAAE,WAAF,IAAe,IAAfD,EAAA,GAAA3J,EAAA,EAAeA,EAAflI,UAAAO,OAAe2H,IAAA2J,EAAf3J,EAAA,GAAAlI,UAAAkI,GACI,IAAI6D,EAAwB8F,EAAMA,EAAMtR,OAAS,GAC7CiO,GAARC,YAAoB1C,GACd8F,EAAME,MAENhG,EAAY,KAGd,IAAMzJ,EAAMuP,EAAMtR,OAClB,OAAU,EAAN+B,EACK,IAAIsP,EAAwBC,EAAO9F,GACzB,IAARzJ,EACF,IAAI0P,GAAjBN,iBAA0CG,EAAM,GAAI9F,GAEvC,IAAIkG,GAAjBN,gBAAoC5F,IAI3B6F,EAAT7C,SAAE,SAAgB7C,GAEN,IAAZ2F,EAAA3F,EAAA2F,MAAmBxP,EAAnB6J,EAAA7J,MAA0BmN,EAA1BtD,EAAAsD,MAAiC7J,EAAjCuG,EAAAvG,WAEiB6J,GAATnN,EACFsD,EAAW5B,YAIb4B,EAAW/B,KAAKiO,EAAMxP,IAElBsD,EAAW9D,SAIfqK,EAAM7J,MAAQA,EAAQ,EAEftC,KAAMkM,SAASC,MAcd0F,EAAZzP,UAAAkG,WAAE,SAAqB1C,GACnB,IACMkM,EAAQ9R,KAAK8R,MACbrC,EAAQqC,EAAMtR,OACdwL,EAAYhM,KAAKgM,UAEvB,GAAIA,EACF,OAAOA,EAAUE,SAAS2F,EAAgB7C,SAAU,EAAG,CACrD8C,MAARA,EAAexP,MAPC,EAOMmN,MAAtBA,EAA6B7J,WAA7BA,IAGM,IAAK,IAAI5E,EAAI,EAAGA,EAAIyO,IAAU7J,EAAW9D,OAAQd,IAC/C4E,EAAW/B,KAAKiO,EAAM9Q,IAExB4E,EAAW5B,YAGjB6N,EAnHA,CAAwCpH,EAmHxClC,qMCtHM4J,GAAO,OA6Fb,SAAA1R,GAME,SAAF2R,EAAc/M,EAAoCgN,GAC9C5R,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlDqS,QAAkDA,EALxCrS,KAAVyN,OAA2B,EACjBzN,KAAVsS,OAA0B,GAChBtS,KAAVuS,YAA+B,GAHoBjR,GAAnD8Q,EAAA3R,GAUY2R,EAAZhQ,UAAAyD,MAAE,SAAgB+B,GACd5H,KAAKsS,OAAOrP,KAAKkP,IACjBnS,KAAKuS,YAAYtP,KAAK2E,IAGdwK,EAAZhQ,UAAA2D,UAAE,WACE,IAAMwM,EAAcvS,KAAKuS,YACnBhQ,EAAMgQ,EAAY/R,OACxB,GAAY,IAAR+B,EACFvC,KAAKqF,YAAYrB,eACZ,CACLhE,KAAKyN,OAASlL,EACdvC,KAAKwS,UAAYjQ,EACjB,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAM4G,EAAa2K,EAAYvR,GAC/BhB,KAAKkD,IAAIyI,EAAjBC,kBAAmC5L,KAAM4H,EAAYA,EAAY5G,OAK/DoR,EAAFhQ,UAAAiF,eAAE,SAAeoL,GACc,IAAtBzS,KAAKyN,QAAU,IAClBzN,KAAKqF,YAAYrB,YAIrBoO,EAAFhQ,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAMmL,EAAStS,KAAKsS,OACdI,EAASJ,EAAOrL,GAChBuL,EAAaxS,KAAKwS,UAEpBE,IAAWP,KAASnS,KAAKwS,UAAYxS,KAAKwS,UAD1C,EAEJF,EAAOrL,GAAcD,EAEH,IAAdwL,IACExS,KAAKqS,QACPrS,KAAK2S,YAAYL,GAEjBtS,KAAKqF,YAAYxB,KAAKyO,EAAOM,WAK3BR,EAAVhQ,UAAAuQ,YAAE,SAAoBL,GAClB,IAAI/H,EACJ,IACEA,EAASvK,KAAKqS,QAAQtS,MAAMC,KAAMsS,GAClC,MAAOzR,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IA/D1B,CAAmDuB,EAiEnDjF,uMCxDA,SAAAgM,GAAyBhC,GACf,IAAV/M,EAAA+M,EAAA/M,MAAiB8B,EAAjBiL,EAAAjL,WACOA,EAAW9D,SACd8D,EAAW/B,KAAKC,GAChB8B,EAAW5B,YAQf,SAAA8O,GAA0BjC,GAChB,IAAVhQ,EAAAgQ,EAAAhQ,IAAe+E,EAAfiL,EAAAjL,WACOA,EAAW9D,QACd8D,EAAW7B,MAAMlD,6BApHrB,SAAAJ,GAkCE,SAAFsS,EAAsBC,EAAiChH,GACnDvL,EAAJG,KAAAZ,MADsBA,KAAtBgT,QAAsBA,EAAiChT,KAAvDgM,UAAuDA,EA6DvD,OA/F0C1K,GAA1CyR,EAAAtS,GA8BSsS,EAATpN,OAAE,SAAiBqN,EAAyBhH,GACxC,OAAO,IAAI+G,EAAkBC,EAAShH,IAO9B+G,EAAZ3Q,UAAAkG,WAAE,SAAqB1C,GAArB,IAAFe,EAAA3G,KACUgT,EAAUhT,KAAKgT,QACfhH,EAAYhM,KAAKgM,UAEvB,GAAiB,MAAbA,EACEhM,KAAKqI,UACFzC,EAAW9D,SACd8D,EAAW/B,KAAK7D,KAAK8D,OACrB8B,EAAW5B,YAGbgP,EAAQxL,KACN,SAAC1D,GACC6C,EAAK7C,MAAQA,EACb6C,EAAK0B,WAAY,EACZzC,EAAW9D,SACd8D,EAAW/B,KAAKC,GAChB8B,EAAW5B,aAGf,SAACnD,GACM+E,EAAW9D,QACd8D,EAAW7B,MAAMlD,KAItB2G,KAAK,KAAM,SAAA3G,GAEV2D,EAAVE,KAAeoG,WAAW,WAAQ,MAAMjK,WAIlC,GAAIb,KAAKqI,WACP,IAAKzC,EAAW9D,OACd,OAAOkK,EAAUE,SAAS2G,GAAc,EAAG,CAAE/O,MAAO9D,KAAK8D,MAAO8B,WAA1EA,SAGQoN,EAAQxL,KACN,SAAC1D,GACC6C,EAAK7C,MAAQA,EACb6C,EAAK0B,WAAY,EACZzC,EAAW9D,QACd8D,EAAW1C,IAAI8I,EAAUE,SAAS2G,GAAc,EAAG,CAAE/O,MAAnEA,EAA0E8B,WAA1EA,MAGU,SAAC/E,GACM+E,EAAW9D,QACd8D,EAAW1C,IAAI8I,EAAUE,SAAS4G,GAAe,EAAG,CAAEjS,IAApEA,EAAyE+E,WAAzEA,OAGW4B,KAAK,KAAM,SAAC3G,GAEX2D,EAAZE,KAAiBoG,WAAW,WAAQ,MAAMjK,OAK1CkS,EA/FA,CAA0CtI,EA+F1ClC,qMC9FA0K,GAAA,SAAAxS,GAmCE,SAAFyS,EAActJ,EAAuBoC,GAGjC,GAFAvL,EAAJG,KAAAZ,MADqCA,KAArCgM,UAAqCA,EAGjB,MAAZpC,EACF,MAAM,IAAI9I,MAAM,4BAGlBd,KAAK4J,SAkET,SAAqBrE,GACnB,IAAMvE,EAAIuE,EAAIwF,EAAhBnB,UACE,IAAK5I,GAAoB,iBAARuE,EACf,OAAO,IAAI4N,GAAe5N,GAE5B,IAAKvE,GAAKuE,EAAI/E,SAAWqM,UACvB,OAAO,IAAIuG,GAAc7N,GAE3B,IAAKvE,EACH,MAAM,IAAImK,UAAU,0BAEtB,OAAO5F,EAAIwF,EAAbnB,YA7EoByJ,CAAYzJ,GA8BhC,OAxE2CtI,GAA3C4R,EAAAzS,GAGSyS,EAATvN,OAAE,SAAiBiE,EAAeoC,GAC9B,OAAO,IAAIkH,EAAmBtJ,EAAUoC,IAGnCkH,EAATlE,SAAE,SAAgB7C,GAEN,IAAZ7J,EAAA6J,EAAA7J,MAAmBgR,EAAnBnH,EAAAmH,SAA6B1J,EAA7BuC,EAAAvC,SAAuChE,EAAvCuG,EAAAvG,WAEI,GAAI0N,EACF1N,EAAW7B,MAAMoI,EAAMpI,WADzB,CAKA,IAAIwG,EAASX,EAAS/F,OAClB0G,EAAOU,KACTrF,EAAW5B,YAIb4B,EAAW/B,KAAK0G,EAAOzG,OACvBqI,EAAM7J,MAAQA,EAAQ,EAElBsD,EAAW9D,OACkB,mBAApB8H,EAAS2J,WAClB3J,EAAS2J,YAKNvT,KAAMkM,SAASC,MAad+G,EAAZ9Q,UAAAkG,WAAE,SAAqB1C,GAEnB,IACQgE,EAAZ5J,KAAA4J,SAAsBoC,EAAtBhM,KAAAgM,UAEI,GAAIA,EACF,OAAOA,EAAUE,SAASgH,EAAmBlE,SAAU,EAAG,CACxD1M,MALQ,EAKDsH,SAAfA,EAAyBhE,WAAzBA,IAGM,OAAG,CACD,IAAI2E,EAASX,EAAS/F,OACtB,GAAI0G,EAAOU,KAAM,CACfrF,EAAW5B,WACX,MAIF,GAFE4B,EAAW/B,KAAK0G,EAAOzG,OAErB8B,EAAW9D,OAAQ,CACU,mBAApB8H,EAAS2J,WAClB3J,EAAS2J,YAEX,SAKVL,EAxEA,CAA2CzI,EAwE3ClC,YAEA4K,GAAA,WACE,SAAFA,EAAsBK,EACAC,EACAlR,QADtB,IAAAkR,IAAcA,EAAd,QACA,IAAAlR,IAAcA,EAAsBiR,EAAIhT,QAFlBR,KAAtBwT,IAAsBA,EACAxT,KAAtByT,IAAsBA,EACAzT,KAAtBuC,IAAsBA,EAYtB,OAVE4Q,EAAF/Q,UAAG2I,EAAHnB,UAAE,WAAsB,OAAA,MACtBuJ,EAAF/Q,UAAAyB,KAAE,WACE,OAAO7D,KAAKyT,IAAMzT,KAAKuC,IAAM,CACzB0I,MAAM,EACNnH,MAAO9D,KAAKwT,IAAIE,OAAO1T,KAAKyT,QAC5B,CACAxI,MAAM,EACNnH,MAAO+I,YAGfsG,EAfA,GAiBAC,GAAA,WACE,SAAFA,EAAsBO,EACAF,EACAlR,QADtB,IAAAkR,IAAcA,EAAd,QACA,IAAAlR,IAAcA,EA8Bd,SAAkBqR,GAChB,IAAIrR,GAAOqR,EAAEpT,OACb,GAAI0N,MAAM3L,GACN,OAAO,EAEX,GAAY,IAARA,IAakBuB,EAbWvB,EAcT,iBAAVuB,IAAsBU,EAAtCE,KAA2CmP,SAAS/P,IAb9C,OAAOvB,EAYb,IAAwBuB,EATtB,GAaYA,EAdDvB,EAePuR,GAAiBhQ,GAfrBvB,GAgBsB,IAAlBuR,EACKA,EAEL5F,MAAM4F,GACDA,EAEFA,EAAgB,GAAK,EAAI,GAtBdC,KAAKC,MAAMD,KAAKE,IAAI1R,MAC3B,EACP,OAAO,EAYb,IAAcuB,EACRgQ,EAXJ,GAAUI,GAAN3R,EACA,OAAO2R,GAEX,OAAO3R,EA7C2B4R,CAASR,IAFvB3T,KAAtB2T,IAAsBA,EACA3T,KAAtByT,IAAsBA,EACAzT,KAAtBuC,IAAsBA,EAYtB,OAVE6Q,EAAFhR,UAAG2I,EAAHnB,UAAE,WAAsB,OAAO5J,MAC7BoT,EAAFhR,UAAAyB,KAAE,WACE,OAAO7D,KAAKyT,IAAMzT,KAAKuC,IAAM,CACzB0I,MAAM,EACNnH,MAAO9D,KAAK2T,IAAI3T,KAAKyT,QACrB,CACAxI,MAAM,EACNnH,MAAO+I,YAGfuG,EAfA,GA+BA,IAAMc,GAAiBH,KAAKK,IAAI,EAAG,IAAM,iPC1HzC,SAAA3T,GAmCE,SAAF4T,EAAsBC,EAAiCtI,GACnDvL,EAAJG,KAAAZ,MADsBA,KAAtBsU,UAAsBA,GAAiCtU,KAAvDgM,UAAuDA,IAEZ,IAArBsI,EAAU9T,SAC1BR,KAAKqI,WAAY,EACjBrI,KAAK8D,MAAQwQ,EAAU,IAoB7B,OA3D4ChT,GAA5C+S,EAAA5T,GAES4T,EAAT1O,OAAE,SAAiB2O,EAAyBtI,GACxC,IAAMxL,EAAS8T,EAAU9T,OACzB,OAAe,IAAXA,EACK,IAAI0R,GAAjBN,gBAC0B,IAAXpR,EACF,IAAIyR,GAAjBN,iBAA0C2C,EAAU,GAAItI,GAE3C,IAAIqI,EAAoBC,EAAWtI,IAIvCqI,EAATrF,SAAE,SAAgB7C,GACN,IAAZmI,EAAAnI,EAAAmI,UAAuBhS,EAAvB6J,EAAA7J,MAA8B9B,EAA9B2L,EAAA3L,OAAsCoF,EAAtCuG,EAAAvG,WAEQA,EAAW9D,SAIFtB,GAAT8B,EACFsD,EAAW5B,YAIb4B,EAAW/B,KAAKyQ,EAAUhS,IAE1B6J,EAAM7J,MAAQA,EAAQ,EAEftC,KAAMkM,SAASC,MAcdkI,EAAZjS,UAAAkG,WAAE,SAAqB1C,GACnB,IACQ0O,EAAZtU,KAAAsU,UAAuBtI,EAAvBhM,KAAAgM,UACUxL,EAAS8T,EAAU9T,OAEzB,GAAIwL,EACF,OAAOA,EAAUE,SAASmI,EAAoBrF,SAAU,EAAG,CACzDsF,UAARA,EAAmBhS,MANH,EAMU9B,OAA1BA,EAAkCoF,WAAlCA,IAGM,IAAK,IAAI5E,EAAI,EAAGA,EAAIR,IAAWoF,EAAW9D,OAAQd,IAChD4E,EAAW/B,KAAKyQ,EAAUtT,IAE5B4E,EAAW5B,YAGjBqQ,EA3DA,CAA4C5J,EA2D5ClC,8BCtDA,WAGE,SAAFgM,EAAqBC,EAAqB1Q,EAAkBC,GAAvC/D,KAArBwU,KAAqBA,EAAqBxU,KAA1C8D,MAA0CA,EAAkB9D,KAA5D+D,MAA4DA,EACxD/D,KAAKuL,SAAoB,MAATiJ,EA6GpB,OArGED,EAAFnS,UAAAqS,QAAE,SAAQC,GACN,OAAQ1U,KAAKwU,MACX,IAAK,IACH,OAAOE,EAAS7Q,MAAQ6Q,EAAS7Q,KAAK7D,KAAK8D,OAC7C,IAAK,IACH,OAAO4Q,EAAS3Q,OAAS2Q,EAAS3Q,MAAM/D,KAAK+D,OAC/C,IAAK,IACH,OAAO2Q,EAAS1Q,UAAY0Q,EAAS1Q,aAY3CuQ,EAAFnS,UAAAuS,MAAE,SAAG9Q,EAA0BE,EAA4BC,GAEvD,OADahE,KAAKwU,MAEhB,IAAK,IACH,OAAO3Q,GAAQA,EAAK7D,KAAK8D,OAC3B,IAAK,IACH,OAAOC,GAASA,EAAM/D,KAAK+D,OAC7B,IAAK,IACH,OAAOC,GAAYA,MAazBuQ,EAAFnS,UAAAwS,OAAE,SAAOnN,EAA2D1D,EAA4BC,GAC5F,OAAIyD,GAAuE,mBAAzBA,EAAgB5D,KACzD7D,KAAKyU,QAA4BhN,GAEjCzH,KAAK2U,MAAuBlN,EAAgB1D,EAAOC,IAS9DuQ,EAAFnS,UAAAyS,aAAE,WAEE,OADa7U,KAAKwU,MAEhB,IAAK,IACH,OAAO/J,EAAflC,WAA0BwJ,GAAG/R,KAAK8D,OAC5B,IAAK,IACH,OAAO2G,EAAflC,WAA0BuM,SAAM9U,KAAK+D,OAC/B,IAAK,IACH,OAAO0G,EAAflC,WAA0BpG,QAEtB,MAAM,IAAIrB,MAAM,uCAaXyT,EAATQ,WAAE,SAAqBjR,GACnB,YAAqB,IAAVA,EACF,IAAIyQ,EAAa,IAAKzQ,GAExByQ,EAAaS,4BAUfT,EAATU,YAAE,SAAsBpU,GACpB,OAAO,IAAI0T,EAAa,IAAK1H,UAAWhM,IAOnC0T,EAATW,eAAE,WACE,OAAOX,EAAaY,sBAjCPZ,EAAjBY,qBAA2D,IAAIZ,EAAa,KAC3DA,EAAjBS,2BAAiE,IAAIT,EAAa,IAAK1H,WAkCvF0H,EAjHA,4LCuCgB,IAAhBa,GAAA,SAA6BpJ,EAAuBI,GAClD,YADF,IAAAA,IAAoDA,EAApD,GACS,SAAmC1D,GACxC,OAAOA,EAAOF,KAAK,IAAI6M,GAAkBrJ,EAAWI,MAIxDiJ,GAAA,WACE,SAAFA,EAAsBrJ,EAA+BI,QAArD,IAAAA,IAA6CA,EAA7C,GAAsBpM,KAAtBgM,UAAsBA,EAA+BhM,KAArDoM,MAAqDA,EAMrD,OAHEiJ,EAAFjT,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI+N,GAAoB1P,EAAY5F,KAAKgM,UAAWhM,KAAKoM,SAErFiJ,EAPA,GAAAE,GAAAF,GAcAC,GAAA,SAAA7U,GAOE,SAAF6U,EAAcjQ,EACQ2G,EACAI,QAAtB,IAAAA,IAAcA,EAAd,GACI3L,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBgM,UAAsBA,EACAhM,KAAtBoM,MAAsBA,EAuBtB,OAhC4C9K,GAA5CgU,EAAA7U,GACS6U,EAATtG,SAAE,SAAgD6B,GACtC,IAAZ2E,EAAA3E,EAAA2E,aAA0BnQ,EAA1BwL,EAAAxL,YACImQ,EAAaf,QAAQpP,GACrBrF,KAAK6B,eASCyT,EAAVlT,UAAAqT,gBAAE,SAAwBD,GACtBxV,KAAKkD,IAAIlD,KAAKgM,UAAUE,SACtBoJ,EAAoBtG,SACpBhP,KAAKoM,MACL,IAAIsJ,GAAiBF,EAAcxV,KAAKqF,gBAIlCiQ,EAAZlT,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKyV,gBAAgBE,GAAzBpB,aAAsCQ,WAAWjR,KAGrCwR,EAAZlT,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKyV,gBAAgBE,GAAzBpB,aAAsCU,YAAYpU,KAGtCyU,EAAZlT,UAAA2D,UAAE,WACE/F,KAAKyV,gBAAgBE,GAAzBpB,aAAsCW,mBAEtCI,EAhCA,CAA4ChO,EAgC5CvC,YAEA2Q,GACE,SAAmBF,EACAnQ,GADArF,KAArBwV,aAAqBA,EACAxV,KAArBqF,YAAqBA,6DApCrBiQ,oBAkCAI,gMC1FA,SAAAjV,GACE,SAAFmV,EAAsBC,EAAiC7J,GACnDvL,EAAJG,KAAAZ,KAAU,MADYA,KAAtB6V,IAAsBA,EAAiC7V,KAAvDgM,UAAuDA,EADhB1K,GAAvCsU,EAAAnV,GAgESmV,EAATjQ,OAAE,SAAiBkQ,EAAyB7J,GACxC,GAAW,MAAP6J,EAAa,CACf,GAAsC,mBAA3BA,EAAIvM,EAArB1B,YACQ,OAAIiO,aAAepL,EAA3BlC,aAA0CyD,EACzB6J,EAEF,IAAID,EAAkBC,EAAK7J,GAC7B,GAAInJ,EAAjBtC,QAAyBsV,GACjB,OAAO,IAAIC,GAAnBjE,gBAAsCgE,EAAK7J,GAC9B,GAAIpB,EAAjBC,UAA8BgL,GACtB,OAAO,IAAIE,GAAnBhD,kBAAwC8C,EAAK7J,GAChC,GAAoC,mBAAzB6J,EAAI9K,EAA5BnB,WAA8E,iBAARiM,EAC9D,OAAO,IAAIG,GAAnB9C,mBAAyC2C,EAAK7J,GACjC,GAAItB,EAAjBC,YAA6BkL,GACrB,OAAO,IAAII,GAAnB5B,oBAAuCwB,EAAK7J,GAIxC,MAAM,IAAIb,WAAmB,OAAR0K,UAAuBA,GAAOA,GAAO,uBAGlDD,EAAZxT,UAAAkG,WAAE,SAAqB1C,GACnB,IAAMiQ,EAAM7V,KAAK6V,IACX7J,EAAYhM,KAAKgM,UACvB,OAAiB,MAAbA,EACK6J,EAAIvM,EAAjB1B,cAAsCL,UAAU3B,GAEnCiQ,EAAIvM,EAAjB1B,cAAsCL,UAAU,IAAI2O,GAApDZ,oBAAwE1P,EAAYoG,EAAW,KA3F/F,CAAuCvB,EA8FvClC,sMCZA,SAAA9H,GAME,SAAF0V,EAAc9Q,EACQgN,EACA+D,EACAC,QAAtB,IAAAA,IAAcA,EAA6B7H,OAAO8H,mBAC9C7V,EAAJG,KAAAZ,KAAUqF,GAHYrF,KAAtBqS,QAAsBA,EACArS,KAAtBoW,eAAsBA,EACApW,KAAtBqW,WAAsBA,EARZrW,KAAVuW,cAAkC,EACxBvW,KAAVmP,OAAwB,GACdnP,KAAVyN,OAA2B,EACfzN,KAAZsC,MAA4B,EAJqBhB,GAAjD6U,EAAA1V,GAaY0V,EAAZ/T,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAKyN,OAASzN,KAAKqW,WACrBrW,KAAKwW,SAAS1S,GAEd9D,KAAKmP,OAAOlM,KAAKa,IAIXqS,EAAZ/T,UAAAoU,SAAE,SAAmB1S,GACjB,IAAIyG,EACEjI,EAAQtC,KAAKsC,QACnB,IACEiI,EAASvK,KAAKqS,QAAQvO,EAAOxB,GAC7B,MAAOzB,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKyN,SACLzN,KAAKyW,UAAUlM,EAAQzG,EAAOxB,IAGxB6T,EAAV/T,UAAAqU,UAAE,SAAkBZ,EAAyB/R,EAAUxB,GACnDtC,KAAKkD,IAAIyI,EAAbC,kBAAqC5L,KAAM6V,EAAK/R,EAAOxB,KAG3C6T,EAAZ/T,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EACA,IAAhBvW,KAAKyN,QAAuC,IAAvBzN,KAAKmP,OAAO3O,QACnCR,KAAKqF,YAAYrB,YAIrBmS,EAAF/T,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACLnH,KAAKoW,eACPpW,KAAK0W,sBAAsB3P,EAAYC,EAAYC,EAAYC,GAE/DlH,KAAKqF,YAAYxB,KAAKmD,IAIlBmP,EAAV/T,UAAAsU,sBAAE,SAA8B3P,EAAeC,EAAeC,EAAoBC,GAC9E,IAAIqD,EACJ,IACEA,EAASvK,KAAKoW,eAAerP,EAAYC,EAAYC,EAAYC,GACjE,MAAOrG,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IAGxB4L,EAAF/T,UAAAiF,eAAE,SAAeF,GACb,IAAMgI,EAASnP,KAAKmP,OACpBnP,KAAKwC,OAAO2E,GACZnH,KAAKyN,SACe,EAAhB0B,EAAO3O,OACTR,KAAK6F,MAAMsJ,EAAOvB,SACO,IAAhB5N,KAAKyN,QAAgBzN,KAAKuW,cACnCvW,KAAKqF,YAAYrB,YAzEvB,CAAiD8H,EA4EjDjF,2MCzGA,SAAApG,GAIE,SAAFkW,EAActR,EACQuR,EACAlO,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB4W,UAAsBA,EACA5W,KAAtB0I,OAAsBA,EALZ1I,KAAVyP,MAA0B,EAChBzP,KAAVsC,MAA0B,EAFOhB,GAAjCqV,EAAAlW,GAUYkW,EAAZvU,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAK4W,UACP5W,KAAK6W,cAAc/S,GAEnB9D,KAAKyP,SAIDkH,EAAVvU,UAAAyU,cAAE,SAAsB/S,GACpB,IAAIyG,EAEJ,IACEA,EAASvK,KAAK4W,UAAU9S,EAAO9D,KAAKsC,QAAStC,KAAK0I,QAClD,MAAO7H,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAIrB0J,GACFvK,KAAKyP,SAICkH,EAAZvU,UAAA2D,UAAE,WACE/F,KAAKqF,YAAYxB,KAAK7D,KAAKyP,OAC3BzP,KAAKqF,YAAYrB,YAnCrB,CAAiCsD,EAqCjCvC,sMCxCA,SAAAtE,GAKE,SAAFqW,EAAczR,EACQiG,GAClB7K,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBsL,iBAAsBA,EAJZtL,KAAVuL,UAA8B,EACpBvL,KAAV+W,qBAA+C,KAHRzV,GAAvCwV,EAAArW,GAUYqW,EAAZ1U,UAAAyD,MAAE,SAAgB/B,GACd,IACE,IAAMyG,EAASvK,KAAKsL,iBAAiB1K,KAAKZ,KAAM8D,GAE5CyG,GACFvK,KAAKwW,SAAS1S,EAAOyG,GAEvB,MAAO1J,GACPb,KAAKqF,YAAYtB,MAAMlD,KAIjBiW,EAAZ1U,UAAA2D,UAAE,WACE/F,KAAKgX,YACLhX,KAAKqF,YAAYrB,YAGX8S,EAAV1U,UAAAoU,SAAE,SAAiB1S,EAAU2H,GACzB,IAAIpI,EAAerD,KAAK+W,qBACxB/W,KAAK8D,MAAQA,EACb9D,KAAKuL,UAAW,EACZlI,IACFA,EAAaxB,cACb7B,KAAKwC,OAAOa,KAGdA,EAAesI,EAAnBC,kBAAqC5L,KAAMyL,IACrB3J,QAChB9B,KAAKkD,IAAIlD,KAAK+W,qBAAuB1T,IAIzCyT,EAAF1U,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKgX,aAGPF,EAAF1U,UAAAiF,eAAE,WACErH,KAAKgX,aAGPF,EAAF1U,UAAA4U,UAAE,WACE,GAAIhX,KAAKuL,SAAU,CACjB,IAAMzH,EAAQ9D,KAAK8D,MACbT,EAAerD,KAAK+W,qBACtB1T,IACFrD,KAAK+W,qBAAuB,KAC5B1T,EAAaxB,cACb7B,KAAKwC,OAAOa,IAEdrD,KAAK8D,MAAQ,KACb9D,KAAKuL,UAAW,EAChB9K,EAAN2B,UAAYyD,MAAZjF,KAAAZ,KAAkB8D,KA/DlB,CAAuCgI,EAkEvCjF,uMClFgB,IAAhBoQ,GAAA,SAAgC7I,EAAiBpC,GAC/C,YADF,IAAAA,IAAiDA,EAAjD2C,EAAAC,OACS,SAAClG,GAA0B,OAAAA,EAAOF,KAAK,IAAI0O,GAAqB9I,EAASpC,MAGlFkL,GAAA,WACE,SAAFA,EAAsB9I,EAAyBpC,GAAzBhM,KAAtBoO,QAAsBA,EAAyBpO,KAA/CgM,UAA+CA,EAM/C,OAHEkL,EAAF9U,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI4P,GAAuBvR,EAAY5F,KAAKoO,QAASpO,KAAKgM,aAEtFkL,EAPA,GAcAC,GAAA,SAAA1W,GAKE,SAAF0W,EAAc9R,EACQ+I,EACApC,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBoO,QAAsBA,EACApO,KAAtBgM,UAAsBA,EANZhM,KAAVoX,sBAAgD,KACtCpX,KAAVqX,UAAyB,KACfrX,KAAVuL,UAA8B,EAuC9B,OA1CwCjK,GAAxC6V,EAAA1W,GAWY0W,EAAZ/U,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKsX,gBACLtX,KAAKqX,UAAYvT,EACjB9D,KAAKuL,UAAW,EAChBvL,KAAKkD,IAAIlD,KAAKoX,sBAAwBpX,KAAKgM,UAAUE,SAAS2G,GAAc7S,KAAKoO,QAASpO,QAGlFmX,EAAZ/U,UAAA2D,UAAE,WACE/F,KAAKuX,gBACLvX,KAAKqF,YAAYrB,YAGnBmT,EAAF/U,UAAAmV,cAAE,WACEvX,KAAKsX,gBAEDtX,KAAKuL,WACPvL,KAAKqF,YAAYxB,KAAK7D,KAAKqX,WAC3BrX,KAAKqX,UAAY,KACjBrX,KAAKuL,UAAW,IAIZ4L,EAAV/U,UAAAkV,cAAE,WACE,IAAMF,EAAwBpX,KAAKoX,sBAEL,OAA1BA,IACFpX,KAAKwC,OAAO4U,GACZA,EAAsBvV,cACtB7B,KAAKoX,sBAAwB,OAGnCD,EA1CA,CAAwC7P,EA0CxCvC,YAEA,SAAAyS,GAAsB5R,GACpBA,EAAW2R,qOC1Db,SAAA9W,GAGE,SAAFgX,EAAcpS,EAAwCqS,GAClDjX,EAAJG,KAAAZ,KAAUqF,GAD4CrF,KAAtD0X,aAAsDA,EAF5C1X,KAAV2X,SAA6B,EADgBrW,GAA7CmW,EAAAhX,GAOYgX,EAAZrV,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAK2X,SAAU,EACf3X,KAAKqF,YAAYxB,KAAKC,IAGd2T,EAAZrV,UAAA2D,UAAE,WACM/F,KAAK2X,SACP3X,KAAKqF,YAAYxB,KAAK7D,KAAK0X,cAE7B1X,KAAKqF,YAAYrB,YAhBrB,CAA6CsD,EAkB7CvC,kMCmEA6S,IAjEA,SAAAnX,GAuBE,SAAFoX,EAAcxS,EACQ+G,EACAJ,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBoM,MAAsBA,EACApM,KAAtBgM,UAAsBA,EAxBZhM,KAAV8X,MAA0C,GAChC9X,KAAVyN,QAA4B,EAClBzN,KAAVgN,SAA6B,EAHI1L,GAAjCuW,EAAApX,GAKiBoX,EAAjB7I,SAAE,SAAwD7C,GAMtD,IALA,IAAMzD,EAASyD,EAAMzD,OACfoP,EAAQpP,EAAOoP,MACf9L,EAAYG,EAAMH,UAClB3G,EAAc8G,EAAM9G,YAEJ,EAAfyS,EAAMtX,QAAesX,EAAM,GAAGC,KAAO/L,EAAUsB,OAAU,GAC9DwK,EAAMlK,QAAQ4H,aAAaf,QAAQpP,GAGrC,GAAmB,EAAfyS,EAAMtX,OAAY,CACpB,IAAMwX,EAAQjE,KAAKkE,IAAI,EAAGH,EAAM,GAAGC,KAAO/L,EAAUsB,OACpDtN,KAAKkM,SAASC,EAAO6L,QAErBtP,EAAO+E,QAAS,GAUZoK,EAAVzV,UAAA8V,UAAE,SAAkBlM,GAChBhM,KAAKyN,QAAS,EACdzN,KAAKkD,IAAI8I,EAAUE,SAAwB2L,EAAgB7I,SAAUhP,KAAKoM,MAAO,CAC/E1D,OAAQ1I,KAAMqF,YAAarF,KAAKqF,YAAa2G,UAAWA,MAIpD6L,EAAVzV,UAAA+V,qBAAE,SAA6B3C,GAC3B,IAAqB,IAAjBxV,KAAKgN,QAAT,CAIA,IAAMhB,EAAYhM,KAAKgM,UACjB3K,EAAU,IAAIuW,GAAa5L,EAAUsB,MAAQtN,KAAKoM,MAAOoJ,GAC/DxV,KAAK8X,MAAM7U,KAAK5B,IAEI,IAAhBrB,KAAKyN,QACPzN,KAAKkY,UAAUlM,KAIT6L,EAAZzV,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKmY,qBAAqBxC,GAA9BpB,aAA2CQ,WAAWjR,KAG1C+T,EAAZzV,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKgN,SAAU,EACfhN,KAAK8X,MAAQ,GACb9X,KAAKqF,YAAYtB,MAAMlD,IAGfgX,EAAZzV,UAAA2D,UAAE,WACE/F,KAAKmY,qBAAqBxC,GAA9BpB,aAA2CW,mBA7D3C,CAAiC5N,EA+DjCvC,YAGE,SAA4BgT,EACAvC,GADAxV,KAA9B+X,KAA8BA,EACA/X,KAA9BwV,aAA8BA,4LC+B9B4C,IAnGA,SAAA3X,GAKE,SAAF4X,EAAchT,EACQiT,GAClB7X,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBsY,sBAAsBA,EALZtY,KAAVuY,WAA+B,EACrBvY,KAAVwY,2BAA4D,GAClDxY,KAAVsS,OAA6B,GAHWhR,GAAxC+W,EAAA5X,GAUE4X,EAAFjW,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKqF,YAAYxB,KAAKkD,GACtB/G,KAAKyY,mBAAmBtR,GACxBnH,KAAK0Y,eAGPL,EAAFjW,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAK8F,OAAO/B,IAGdsU,EAAFjW,UAAAiF,eAAE,SAAeF,GACb,IAAMrD,EAAQ9D,KAAKyY,mBAAmBtR,GAClCrD,GACF9D,KAAKqF,YAAYxB,KAAKC,GAExB9D,KAAK0Y,eAGGL,EAAZjW,UAAAyD,MAAE,SAAgB/B,GACd,IACE,IAAM6U,EAAgB3Y,KAAKsY,sBAAsBxU,GAC7C6U,GACF3Y,KAAK4Y,SAASD,EAAe7U,GAE/B,MAAOjD,GACPb,KAAKqF,YAAYtB,MAAMlD,KAIjBwX,EAAZjW,UAAA2D,UAAE,WACE/F,KAAKuY,WAAY,EACjBvY,KAAK0Y,eAGCL,EAAVjW,UAAAqW,mBAAE,SAA2BpV,GACzBA,EAAaxB,cAEb,IAAMgX,EAAkB7Y,KAAKwY,2BAA2B9U,QAAQL,GAC5DS,EAAW,KAQf,OANyB,IAArB+U,IACF/U,EAAQ9D,KAAKsS,OAAOuG,GACpB7Y,KAAKwY,2BAA2B7U,OAAOkV,EAAiB,GACxD7Y,KAAKsS,OAAO3O,OAAOkV,EAAiB,IAG/B/U,GAGDuU,EAAVjW,UAAAwW,SAAE,SAAiBD,EAAgC7U,GAC/C,IAAMgV,EAAuBnN,EAAjCC,kBAAmD5L,KAAM2Y,EAAe7U,GAEhEgV,IAAyBA,EAAqBhX,SAChD9B,KAAKkD,IAAI4V,GACT9Y,KAAKwY,2BAA2BvV,KAAK6V,IAGvC9Y,KAAKsS,OAAOrP,KAAKa,IAGXuU,EAAVjW,UAAAsW,YAAE,WACM1Y,KAAKuY,WAAwD,IAA3CvY,KAAKwY,2BAA2BhY,QACpDR,KAAKqF,YAAYrB,YA1EvB,CAAwC8H,EA6ExCjF,iBAOA,SAAApG,GACE,SAAFsY,EAAwBrQ,EAA+BsQ,GACnDvY,EAAJG,KAAAZ,MADwBA,KAAxB0I,OAAwBA,EAA+B1I,KAAvDgZ,kBAAuDA,EADV1X,GAA7CyX,EAAAtY,GAKYsY,EAAZ3W,UAAAkG,WAAE,SAAqB1C,GACnB5F,KAAKgZ,kBAAkBzR,UAAU,IAAI6Q,GAA4BxS,EAAY5F,KAAK0I,UANtF,CAA6C+B,EAQ7ClC,YAOA,SAAA9H,GAGE,SAAF2X,EAAsBxU,EAA+B8E,GACjDjI,EAAJG,KAAAZ,MADsBA,KAAtB4D,OAAsBA,EAA+B5D,KAArD0I,OAAqDA,EAF3C1I,KAAViZ,kBAAsC,EA0BtC,OA3B6C3X,GAA7C8W,EAAA3X,GAOY2X,EAAZhW,UAAAyD,MAAE,SAAgB4M,GACdzS,KAAKkZ,qBAGGd,EAAZhW,UAAA0D,OAAE,SAAiBjF,GACfb,KAAK6B,cACL7B,KAAK4D,OAAOG,MAAMlD,IAGVuX,EAAZhW,UAAA2D,UAAE,WACE/F,KAAKkZ,qBAGCd,EAAVhW,UAAA8W,kBAAE,WACOlZ,KAAKiZ,mBACRjZ,KAAKiZ,kBAAmB,EACxBjZ,KAAK6B,cACL7B,KAAK0I,OAAOnB,UAAUvH,KAAK4D,UAGjCwU,EA3BA,CAA6C9Q,EA2B7CvC,sMC7IA,SAAAtE,GACE,SAAF0Y,EAAc9T,GACV5E,EAAJG,KAAAZ,KAAUqF,GAFyD/D,GAAnE6X,EAAA1Y,GAKY0Y,EAAZ/W,UAAAyD,MAAE,SAAgB/B,GACdA,EAAM2Q,QAAQzU,KAAKqF,cANvB,CAAmEiC,EAQnEvC,YC1DA,SAAAqU,KAGE,OAAF,WAAS,SAATC,IACYrZ,KAAZsZ,QAA2B,GAmBzB,OAjBED,EAAJjX,UAAAc,IAAI,SAAIY,GACG9D,KAAKuZ,IAAIzV,IACZ9D,KAAKsZ,QAAQrW,KAAKa,IAItBuV,EAAJjX,UAAAmX,IAAI,SAAIzV,GACF,OAAwC,IAAjC9D,KAAKsZ,QAAQ5V,QAAQI,IAG9BwC,OAAJkT,eAAQH,EAARjX,UAAA,OAAA,CAAAqX,IAAI,WACE,OAAOzZ,KAAKsZ,QAAQ9Y,wCAGtB6Y,EAAJjX,UAAAsX,MAAI,WACE1Z,KAAKsZ,QAAQ9Y,OAAS,GAE5B6Y,EApBE,GAHc,uBAAhBD,OA0B6B5U,EAA7BE,KAAkCoF,KAAOsP,kMCmCzC,SAAA3Y,GAGE,SAAFkZ,EAActU,EAAoCuU,EAA8BC,GAC5EpZ,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlD4Z,YAAkDA,EAFxC5Z,KAAVsS,OAA4B,IAAIzI,GAAhCC,IAKQ+P,GACF7Z,KAAKkD,IAAIyI,EAAfC,kBAAiC5L,KAAM6Z,IAPOvY,GAA9CqY,EAAAlZ,GAWEkZ,EAAFvX,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKsS,OAAOoH,SAGdC,EAAFvX,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAK8F,OAAO/B,IAGJ4V,EAAZvX,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAK4Z,YACP5Z,KAAK8Z,gBAAgBhW,GAErB9D,KAAK+Z,cAAcjW,EAAOA,IAItB6V,EAAVvX,UAAA0X,gBAAE,SAAwBhW,GACtB,IAAIqG,EACR9E,EAAArF,KAAAqF,YACI,IACE8E,EAAMnK,KAAK4Z,YAAY9V,GACvB,MAAOjD,GAEP,YADAwE,EAAYtB,MAAMlD,GAGpBb,KAAK+Z,cAAc5P,EAAKrG,IAGlB6V,EAAVvX,UAAA2X,cAAE,SAAsB5P,EAAUrG,GACtB,IAAZwO,EAAAtS,KAAAsS,OACSA,EAAOiH,IAAOpP,KACjBmI,EAAOpP,IAAOiH,GACdnK,KAAKqF,YAAYxB,KAAKC,KA7C5B,CAA8CgI,EAiD9CjF,uMCvEgB,IAAhBmT,GAAA,SAA2CC,EAAmCL,GAC5E,OAAO,SAAClR,GAA0B,OAAAA,EAAOF,KAAK,IAAI0R,GAAmCD,EAASL,MAGhGM,GAAA,WACE,SAAFA,EAAsBD,EACAL,GADA5Z,KAAtBia,QAAsBA,EACAja,KAAtB4Z,YAAsBA,EAMtB,OAHEM,EAAF9X,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI4S,GAA+BvU,EAAY5F,KAAKia,QAASja,KAAK4Z,eAE9FM,EARA,GAeAC,GAAA,SAAA1Z,GAIE,SAAF0Z,EAAc9U,EACA4U,EACQL,GAClBnZ,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtB4Z,YAAsBA,EAJZ5Z,KAAVoa,QAA4B,EAMD,mBAAZH,IACTja,KAAKia,QAAUA,GAoCrB,OA7CmD3Y,GAAnD6Y,EAAA1Z,GAaU0Z,EAAV/X,UAAA6X,QAAE,SAAgB5Z,EAAQga,GACtB,OAAOha,IAAMga,GAGLF,EAAZ/X,UAAAyD,MAAE,SAAgB/B,GAEd,IACIqG,EAAWrG,EAEf,GAHoB9D,KAAK4Z,cAIvBzP,EAAMxH,EAAZC,SAAqB5C,KAAK4Z,YAAdjX,CAA2BmB,MACrB5D,EAAlBC,YACQ,OAAOH,KAAKqF,YAAYtB,MAAM7D,EAAtCC,YAAkDN,GAI9C,IAAI0K,GAAc,EAElB,GAAIvK,KAAKoa,QAEP,IADA7P,EAAS5H,EAAfC,SAAwB5C,KAAKia,QAAdtX,CAAuB3C,KAAKmK,IAAKA,MAC3BjK,EAArBC,YACQ,OAAOH,KAAKqF,YAAYtB,MAAM7D,EAAtCC,YAAkDN,QAG5CG,KAAKoa,QAAS,GAGQ,IAApBE,QAAQ/P,KACVvK,KAAKmK,IAAMA,EACXnK,KAAKqF,YAAYxB,KAAKC,KAG5BqW,EA7CA,CAAmD7S,EA6CnDvC,6PC1GA,SAAAtE,GACE,SAAF8Z,IACI,IAAM1Z,EAAWJ,EAArBG,KAAAZ,KAA2B,yBAChBA,KAAMmB,KAAON,EAAIM,KAAO,0BACxBnB,KAAMoB,MAAQP,EAAIO,MAClBpB,KAAMqB,QAAUR,EAAIQ,QAE/B,OAP6CC,GAA7CiZ,EAAA9Z,GAOA8Z,EAPA,CAA6CzZ,oMC6D7C,SAAAL,GAEE,SAAF+Z,EAAcnV,EAAoC/C,EAAuBoV,GACrEjX,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlDsC,MAAkDA,EAAuBtC,KAAzE0X,aAAyEA,EAFpCpW,GAArCkZ,EAAA/Z,GAMY+Z,EAAZpY,UAAAyD,MAAE,SAAgBxF,GACO,GAAjBL,KAAKsC,UACPtC,KAAKqF,YAAYxB,KAAKxD,GACtBL,KAAKqF,YAAYrB,aAIXwW,EAAZpY,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YACP,GAAdrF,KAAKsC,QAC0B,oBAAtBtC,KAAK0X,aACdrS,EAAYxB,KAAK7D,KAAK0X,cAEtBrS,EAAYtB,MAAM,IAAI0W,GAA9BF,0BAGIlV,EAAYrB,YAtBhB,CAAqCsD,EAwBrCvC,sMCtDA,SAAAtE,GAGE,SAAFia,EAAcrV,EACQuR,EACA+D,EACAjS,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAHYrF,KAAtB4W,UAAsBA,EACA5W,KAAtB2a,QAAsBA,EACA3a,KAAtB0I,OAAsBA,EALZ1I,KAAVsC,MAA0B,EAOtBtC,KAAK2a,QAAUA,GAAW3a,KARGsB,GAAjCoZ,EAAAja,GAWUia,EAAVtY,UAAAiF,eAAE,SAAuBuT,GACrB5a,KAAKqF,YAAYxB,KAAK+W,GACtB5a,KAAKqF,YAAYrB,YAGT0W,EAAZtY,UAAAyD,MAAE,SAAgB/B,GACd,IAAIyG,GAAS,EACb,IACEA,EAASvK,KAAK4W,UAAUhW,KAAKZ,KAAK2a,QAAS7W,EAAO9D,KAAKsC,QAAStC,KAAK0I,QACrE,MAAO7H,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAIpB0J,GACHvK,KAAKqH,gBAAe,IAIdqT,EAAZtY,UAAA2D,UAAE,WACE/F,KAAKqH,gBAAe,IA/BxB,CAAiCC,EAiCjCvC,sMChBA,SAAAtE,GAIE,SAAFoa,EAAcxV,GACV5E,EAAJG,KAAAZ,KAAUqF,GAJArF,KAAVuW,cAAkC,EACxBvW,KAAV8a,iBAAqC,EAFExZ,GAAvCuZ,EAAApa,GAQYoa,EAAZzY,UAAAyD,MAAE,SAAgB/B,GACT9D,KAAK8a,kBACR9a,KAAK8a,iBAAkB,EACvB9a,KAAKkD,IAAIyI,EAAfC,kBAAiC5L,KAAM8D,MAI3B+W,EAAZzY,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EACfvW,KAAK8a,iBACR9a,KAAKqF,YAAYrB,YAIrB6W,EAAFzY,UAAAiF,eAAE,SAAeF,GACbnH,KAAKwC,OAAO2E,GACZnH,KAAK8a,iBAAkB,EACnB9a,KAAKuW,cACPvW,KAAKqF,YAAYrB,YA1BvB,CAAuC8H,EA6BvCjF,2MCNA,SAAApG,GAKE,SAAFsa,EAAc1V,EACQgN,EACA+D,GAClB3V,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBqS,QAAsBA,EACArS,KAAtBoW,eAAsBA,EANZpW,KAAV8a,iBAAqC,EAC3B9a,KAAVuW,cAAkC,EACxBvW,KAAVsC,MAA0B,EAHsBhB,GAAhDyZ,EAAAta,GAWYsa,EAAZ3Y,UAAAyD,MAAE,SAAgB/B,GACT9D,KAAK8a,iBACR9a,KAAKgb,QAAQlX,IAITiX,EAAV3Y,UAAA4Y,QAAE,SAAgBlX,GACd,IAAMxB,EAAQtC,KAAKsC,QACb+C,EAAcrF,KAAKqF,YACzB,IACE,IAAMkF,EAASvK,KAAKqS,QAAQvO,EAAOxB,GACnCtC,KAAK8a,iBAAkB,EACvB9a,KAAKkD,IAAIyI,EAAfC,kBAAiC5L,KAAMuK,EAAQzG,EAAOxB,IAChD,MAAOzB,GACPwE,EAAYtB,MAAMlD,KAIZka,EAAZ3Y,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EACfvW,KAAK8a,iBACR9a,KAAKqF,YAAYrB,YAIrB+W,EAAF3Y,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAQiP,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YACQ+Q,EACFpW,KAAKib,gBAAgBlU,EAAYC,EAAYC,EAAYC,GAEzD7B,EAAYxB,KAAKmD,IAIb+T,EAAV3Y,UAAA6Y,gBAAE,SAAwBlU,EAAeC,EACfC,EAAoBC,GAC1C,IAAQkP,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YACI,IACE,IAAMkF,EAAS6L,EAAerP,EAAYC,EAAYC,EAAYC,GAClE7B,EAAYxB,KAAK0G,GACjB,MAAO1J,GACPwE,EAAYtB,MAAMlD,KAItBka,EAAF3Y,UAAAgF,YAAE,SAAYvG,GACVb,KAAKqF,YAAYtB,MAAMlD,IAGzBka,EAAF3Y,UAAAiF,eAAE,SAAeF,GACbnH,KAAKwC,OAAO2E,GAEZnH,KAAK8a,iBAAkB,EACnB9a,KAAKuW,cACPvW,KAAKqF,YAAYrB,YAnEvB,CAAgD8H,EAsEhDjF,2MC1DA,SAAApG,GAME,SAAFya,EAAc7V,EACQgN,EACAgE,EACArK,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAHYrF,KAAtBqS,QAAsBA,EACArS,KAAtBqW,WAAsBA,EACArW,KAAtBgM,UAAsBA,EARZhM,KAAVsC,MAA0B,EAChBtC,KAAVyN,OAA2B,EACjBzN,KAAVuW,cAAkC,EAQ1BF,EAAa7H,OAAO8H,oBACtBtW,KAAKmP,OAAS,IAZwB7N,GAA5C4Z,EAAAza,GAgBiBya,EAAjBlM,SAAE,SAA8B6B,GACrB,IAAXjL,EAAAiL,EAAAjL,WAAuB2E,EAAvBsG,EAAAtG,OAA+BzG,EAA/B+M,EAAA/M,MAAsCxB,EAAtCuO,EAAAvO,MACIsD,EAAWuV,sBAAsB5Q,EAAQzG,EAAOxB,IAGxC4Y,EAAZ9Y,UAAAyD,MAAE,SAAgB/B,GACd,IAAMuB,EAAcrF,KAAKqF,YAEzB,GAAIA,EAAYvD,OACd9B,KAAK+F,gBADP,CAKA,IAAMzD,EAAQtC,KAAKsC,QACnB,GAAItC,KAAKyN,OAASzN,KAAKqW,WAAY,CACjChR,EAAYxB,KAAKC,GACjB,IAAIyG,EAAS5H,EAAnBC,SAA4B5C,KAAKqS,QAAd1P,CAAuBmB,EAAOxB,GAC3C,GAAIiI,IAAWrK,EAArBC,YACQkF,EAAYtB,MAAM7D,EAA1BC,YAAsCN,QACzB,GAAKG,KAAKgM,UAEV,CACL,IAAMG,EAA2B,CAAEvG,WAAY5F,KAAMuK,OAA7DA,EAAqEzG,MAArEA,EAA4ExB,MAA5EA,GACQtC,KAAKkD,IAAIlD,KAAKgM,UAAUE,SAASgP,EAAiBlM,SAAU,EAAG7C,SAH/DnM,KAAKmb,sBAAsB5Q,EAAQzG,EAAOxB,QAM5CtC,KAAKmP,OAAOlM,KAAKa,KAIboX,EAAV9Y,UAAA+Y,sBAAE,SAA8B5Q,EAAazG,EAAUxB,GACnDtC,KAAKyN,SACLzN,KAAKkD,IAAIyI,EAAbC,kBAAqC5L,KAAMuK,EAAQzG,EAAOxB,KAG9C4Y,EAAZ9Y,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EAChBvW,KAAKuW,cAAgC,IAAhBvW,KAAKyN,QAC5BzN,KAAKqF,YAAYrB,YAIrBkX,EAAF9Y,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAK6F,MAAMmB,IAGbkU,EAAF9Y,UAAAiF,eAAE,SAAeF,GACb,IAAMgI,EAASnP,KAAKmP,OACpBnP,KAAKwC,OAAO2E,GACZnH,KAAKyN,SACD0B,GAA0B,EAAhBA,EAAO3O,QACnBR,KAAK6F,MAAMsJ,EAAOvB,SAEhB5N,KAAKuW,cAAgC,IAAhBvW,KAAKyN,QAC5BzN,KAAKqF,YAAYrB,YAxEvB,CAA4C8H,EA2E5CjF,uMCpHgB,IAAhBuU,GAAA,SAA0BxE,EACA+D,GACxB,OAAO,SAAgCjS,GACrC,OAAOA,EAAOF,KAAK,IAAI6S,GAAezE,EAAW+D,MAIrDU,GAAA,WACE,SAAFA,EAAsBzE,EACA+D,GADA3a,KAAtB4W,UAAsBA,EACA5W,KAAtB2a,QAAsBA,EAMtB,OAHEU,EAAFjZ,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI+T,GAAiB1V,EAAY5F,KAAK4W,UAAW5W,KAAK2a,WAElFU,EARA,GAeAC,GAAA,SAAA7a,GAIE,SAAF6a,EAAcjW,EACQuR,EACA+D,GAClBla,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB4W,UAAsBA,EACA5W,KAAtB2a,QAAsBA,EAJpB3a,KAAFyP,MAAkB,EAsBlB,OAxBkCnO,GAAlCga,EAAA7a,GAYY6a,EAAZlZ,UAAAyD,MAAE,SAAgB/B,GACd,IAAIyG,EACJ,IACEA,EAASvK,KAAK4W,UAAUhW,KAAKZ,KAAK2a,QAAS7W,EAAO9D,KAAKyP,SACvD,MAAO5O,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGrB0J,GACFvK,KAAKqF,YAAYxB,KAAKC,IAG5BwX,EAxBA,CAAkChU,EAwBlCvC,uNClEA,SAAAtE,GACE,SAAF8a,EAAclW,EAA4BmW,GACtC/a,EAAJG,KAAAZ,KAAUqF,GACNrF,KAAKkD,IAAI,IAAI+C,EAAjBrE,aAA8B4Z,IAHKla,GAAnCia,EAAA9a,GAAA,CAAmC6G,EAKnCvC,sMCkCA,SAAAtE,GAGE,SAAFgb,EAAcpW,EACQuR,EACAlO,EACAgT,EACAf,GAClBla,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtB4W,UAAsBA,EACA5W,KAAtB0I,OAAsBA,EACA1I,KAAtB0b,WAAsBA,EACA1b,KAAtB2a,QAAsBA,EANZ3a,KAAVsC,MAA0B,EADkBhB,GAA5Cma,EAAAhb,GAWUgb,EAAVrZ,UAAAiF,eAAE,SAAuBvD,GACrB,IAAMuB,EAAcrF,KAAKqF,YAEzBA,EAAYxB,KAAKC,GACjBuB,EAAYrB,YAGJyX,EAAZrZ,UAAAyD,MAAE,SAAgB/B,GACd,IAAQ8S,EAAZ5W,KAAA4W,UAAuB+D,EAAvB3a,KAAA2a,QACUrY,EAAQtC,KAAKsC,QACnB,IACiBsU,EAAUhW,KAAK+Z,GAAW3a,KAAM8D,EAAOxB,EAAOtC,KAAK0I,SAEhE1I,KAAKqH,eAAerH,KAAK0b,WAAapZ,EAAQwB,GAEhD,MAAOjD,GACPb,KAAKqF,YAAYtB,MAAMlD,KAIjB4a,EAAZrZ,UAAA2D,UAAE,WACE/F,KAAKqH,eAAerH,KAAK0b,YAAc,EAAI7O,YAhC/C,CAA4CvF,EAkC5CvC,iNC/FA,SAAAtE,GACE,SAAFkb,IACI,IAAM9a,EAAWJ,EAArBG,KAAAZ,KAA2B,2BAChBA,KAAMmB,KAAON,EAAIM,KAAO,aACxBnB,KAAMoB,MAAQP,EAAIO,MAClBpB,KAAMqB,QAAUR,EAAIQ,QAE/B,OAPgCC,GAAhCqa,EAAAlb,GAOAkb,EAPA,CAAgC7a,oMCkFhC,SAAAL,GAKE,SAAFmb,EAAcvW,EACQuR,EACAR,EACAsB,EACAhP,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtB4W,UAAsBA,EACA5W,KAAtBoW,eAAsBA,EACApW,KAAtB0X,aAAsBA,EACA1X,KAAtB0I,OAAsBA,EARZ1I,KAAVsC,MAA0B,EAChBtC,KAAVuW,cAAkC,EACxBvW,KAAV6b,UAA8B,EAHMva,GAApCsa,EAAAnb,GAaYmb,EAAZxZ,UAAAyD,MAAE,SAAgB/B,GACd,IAAMxB,EAAQtC,KAAKsC,QACftC,KAAK4W,UACP5W,KAAK6W,cAAc/S,EAAOxB,GAE1BtC,KAAK8b,MAAMhY,EAAOxB,IAIdsZ,EAAVxZ,UAAAyU,cAAE,SAAsB/S,EAAUxB,GAC9B,IAAIiI,EACJ,IACEA,EAASvK,KAAK4W,UAAU9S,EAAOxB,EAAOtC,KAAK0I,QAC3C,MAAO7H,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGrB0J,GACFvK,KAAK8b,MAAMhY,EAAOxB,IAIdsZ,EAAVxZ,UAAA0Z,MAAE,SAAchY,EAAYxB,GACpBtC,KAAKoW,eACPpW,KAAK+b,mBAAmBjY,EAAOxB,GAGjCtC,KAAKgc,WAAWlY,IAGV8X,EAAVxZ,UAAA2Z,mBAAE,SAA2BjY,EAAUxB,GACnC,IAAIiI,EACJ,IACEA,EAAevK,KAAMoW,eAAetS,EAAOxB,GAC3C,MAAOzB,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKgc,WAAWzR,IAGVqR,EAAVxZ,UAAA4Z,WAAE,SAAmBlY,GACjB,IAAMuB,EAAcrF,KAAKqF,YACpBrF,KAAK6b,WACR7b,KAAK6b,UAAW,EAChBxW,EAAYxB,KAAKC,GACjBuB,EAAYrB,WACZhE,KAAKuW,cAAe,IAIdqF,EAAZxZ,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YACpBrF,KAAKuW,cAA6C,oBAAtBvW,KAAK0X,aAG1B1X,KAAKuW,cACflR,EAAYtB,MAAM,IAAIkY,GAA5BN,aAHMtW,EAAYxB,KAAK7D,KAAK0X,cACtBrS,EAAYrB,aApElB,CAAoCsD,EAyEpCvC,8NC5JA,SAAAtE,GACE,SAAFyb,IACI,IAAMrb,EAAWJ,EAArBG,KAAAZ,KAA2B,uBAChBA,KAAMmB,KAAON,EAAIM,KAAO,0BACxBnB,KAAMoB,MAAQP,EAAIO,MAClBpB,KAAMqB,QAAUR,EAAIQ,QAE/B,OAP6CC,GAA7C4a,EAAAzb,GAOAyb,EAPA,CAA6Cpb,wNCA7C,SAAAL,GAGE,SAAF0b,EAAqBC,EAA4BxW,GAC7CnF,EAAJG,KAAAZ,MADqBA,KAArBoc,QAAqBA,EAA4Bpc,KAAjD4F,WAAiDA,EAF/C5F,KAAF8B,QAAoB,EA4BpB,OA7B4CR,GAA5C6a,EAAA1b,GAOE0b,EAAF/Z,UAAAP,YAAE,WACE,IAAI7B,KAAK8B,OAAT,CAIA9B,KAAK8B,QAAS,EAEd,IAAMsa,EAAUpc,KAAKoc,QACfC,EAAYD,EAAQC,UAI1B,GAFArc,KAAKoc,QAAU,KAEVC,GAAkC,IAArBA,EAAU7b,SAAgB4b,EAAQhX,YAAagX,EAAQta,OAAzE,CAIA,IAAMwa,EAAkBD,EAAU3Y,QAAQ1D,KAAK4F,aAEtB,IAArB0W,GACFD,EAAU1Y,OAAO2Y,EAAiB,MAGxCH,EA7BA,CAA4ClW,EA6B5CrE,uMC1BA2a,GAAA,SAAA9b,GACE,SAAF8b,EAAwBlX,GACpB5E,EAAJG,KAAAZ,KAAUqF,GADcrF,KAAxBqF,YAAwBA,EAGxB,OAJ0C/D,GAA1Cib,EAAA9b,GAIA8b,EAJA,CAA0CjV,EAI1CvC,YAJAyX,GAAAD,GASAE,GAAA,SAAAhc,GAgBE,SAAFic,IACIjc,EAAJG,KAAAZ,MAXEA,KAAFqc,UAA6B,GAE3Brc,KAAF8B,QAAW,EAET9B,KAAFoF,WAAc,EAEZpF,KAAFsT,UAAa,EAEXtT,KAAF2c,YAAqB,KA8FrB,OA5GgCrb,GAAhCmb,EAAAhc,GAEEgc,EAAFra,UAAGoD,EAAHZ,cAAE,WACE,OAAO,IAAI2X,GAAkBvc,OAqB/Byc,EAAFra,UAAAoG,KAAE,SAAQC,GACN,IAAM2T,EAAU,IAAIQ,GAAiB5c,KAAMA,MAE3C,OADAoc,EAAQ3T,SAAgBA,EACZ2T,GAGdK,EAAFra,UAAAyB,KAAE,SAAKC,GACH,GAAI9D,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBAEI,IAAKlc,KAAKoF,UAIR,IAHQ,IAAdiX,EAAArc,KAAAqc,UACY9Z,EAAM8Z,EAAU7b,OAChBsc,EAAOT,EAAUzJ,QACd5R,EAAI,EAAGA,EAAIuB,EAAKvB,IACvB8b,EAAK9b,GAAG6C,KAAKC,IAKnB2Y,EAAFra,UAAA2B,MAAE,SAAMlD,GACJ,GAAIb,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBAEIlc,KAAKsT,UAAW,EAChBtT,KAAK2c,YAAc9b,EACnBb,KAAKoF,WAAY,EAIjB,IAHQ,IAAZiX,EAAArc,KAAAqc,UACU9Z,EAAM8Z,EAAU7b,OAChBsc,EAAOT,EAAUzJ,QACd5R,EAAI,EAAGA,EAAIuB,EAAKvB,IACvB8b,EAAK9b,GAAG+C,MAAMlD,GAEhBb,KAAKqc,UAAU7b,OAAS,GAG1Bic,EAAFra,UAAA4B,SAAE,WACE,GAAIhE,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBAEIlc,KAAKoF,WAAY,EAIjB,IAHQ,IAAZiX,EAAArc,KAAAqc,UACU9Z,EAAM8Z,EAAU7b,OAChBsc,EAAOT,EAAUzJ,QACd5R,EAAI,EAAGA,EAAIuB,EAAKvB,IACvB8b,EAAK9b,GAAGgD,WAEVhE,KAAKqc,UAAU7b,OAAS,GAG1Bic,EAAFra,UAAAP,YAAE,WACE7B,KAAKoF,WAAY,EACjBpF,KAAK8B,QAAS,EACd9B,KAAKqc,UAAY,MAGTI,EAAZra,UAAA0G,cAAE,SAAwBlD,GACtB,GAAI5F,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBAEM,OAAOzb,EAAb2B,UAAmB0G,cAAnBlI,KAAAZ,KAAiC4F,IAIrB6W,EAAZra,UAAAkG,WAAE,SAAqB1C,GACnB,GAAI5F,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBACW,OAAIlc,KAAKsT,UACd1N,EAAW7B,MAAM/D,KAAK2c,aACf1W,EAAbrE,aAA0BwB,OACXpD,KAAKoF,WACdQ,EAAW5B,WACJiC,EAAbrE,aAA0BwB,QAEpBpD,KAAKqc,UAAUpZ,KAAK2C,GACb,IAAImX,GAAjBZ,oBAAqCnc,KAAM4F,KAIzC6W,EAAFra,UAAA4a,aAAE,WACE,IAAMpV,EAAa,IAAI6C,EAA3BlC,WAEI,OADMX,EAAYc,OAAS1I,KACpB4H,GAtFF6U,EAAT9W,OAA4B,SAAIN,EAA0BqD,GACtD,OAAO,IAAIkU,GAAoBvX,EAAaqD,IAuFhD+T,EA5GA,CAAgChS,EA4GhClC,YA5GA0U,GAAAR,GAiHAG,GAAA,SAAAnc,GACE,SAAFmc,EAAwBvX,EAA2BqD,GAC/CjI,EAAJG,KAAAZ,MADwBA,KAAxBqF,YAAwBA,EAEpBrF,KAAK0I,OAASA,EAgClB,OAnCyCpH,GAAzCsb,EAAAnc,GAMEmc,EAAFxa,UAAAyB,KAAE,SAAKC,GACK,IAAZuB,EAAArF,KAAAqF,YACQA,GAAeA,EAAYxB,MAC7BwB,EAAYxB,KAAKC,IAIrB8Y,EAAFxa,UAAA2B,MAAE,SAAMlD,GACI,IAAZwE,EAAArF,KAAAqF,YACQA,GAAeA,EAAYtB,OAC7B/D,KAAKqF,YAAYtB,MAAMlD,IAI3B+b,EAAFxa,UAAA4B,SAAE,WACU,IAAZqB,EAAArF,KAAAqF,YACQA,GAAeA,EAAYrB,UAC7BhE,KAAKqF,YAAYrB,YAIX4Y,EAAZxa,UAAAkG,WAAE,SAAqB1C,GAEnB,OADJ5F,KAAA0I,OAEa1I,KAAK0I,OAAOnB,UAAU3B,GAEtBK,EAAbrE,aAA0BwB,OAG1BwZ,EAnCA,CAAyCH,yDAAzCG,oBCtIA,WAAA,SAAAM,IACSld,KAATmd,KAAgB,EACNnd,KAAVsZ,QAA2B,GACjBtZ,KAAVod,MAAyB,GAuCzB,OArCEF,EAAF9a,UAAAqX,IAAE,SAAItP,GACF,IAAMnJ,EAAIhB,KAAKod,MAAM1Z,QAAQyG,GAC7B,OAAc,IAAPnJ,EAAW6L,UAAY7M,KAAKsZ,QAAQtY,IAG7Ckc,EAAF9a,UAAAib,IAAE,SAAIlT,EAAUrG,GACZ,IAAM9C,EAAIhB,KAAKod,MAAM1Z,QAAQyG,GAQ7B,OAPW,IAAPnJ,GACFhB,KAAKod,MAAMna,KAAKkH,GAChBnK,KAAKsZ,QAAQrW,KAAKa,GAClB9D,KAAKmd,QAELnd,KAAKsZ,QAAQtY,GAAK8C,EAEb9D,MAGTkd,EAAF9a,UAAAkb,UAAE,SAAOnT,GACL,IAAMnJ,EAAIhB,KAAKod,MAAM1Z,QAAQyG,GAC7B,OAAW,IAAPnJ,IACJhB,KAAKsZ,QAAQ3V,OAAO3C,EAAG,GACvBhB,KAAKod,MAAMzZ,OAAO3C,EAAG,GACrBhB,KAAKmd,QACE,IAGTD,EAAF9a,UAAAsX,MAAE,WACE1Z,KAAKod,MAAM5c,OAAS,EACpBR,KAAKsZ,QAAQ9Y,OAAS,EACtBR,KAAKmd,KAAO,GAGdD,EAAF9a,UAAA2G,QAAE,SAAQwU,EAAc5C,GACpB,IAAK,IAAI3Z,EAAI,EAAGA,EAAIhB,KAAKmd,KAAMnc,IAC7Buc,EAAG3c,KAAK+Z,EAAS3a,KAAKsZ,QAAQtY,GAAIhB,KAAKod,MAAMpc,KAGnDkc,EA1CA,YCGmB1Y,EAAnBE,KAAwBsF,KAAcwT,GAAtCN,yBCHA,WAAA,SAAAO,IACUzd,KAAVsS,OAA2B,GA4B3B,OA1BEmL,EAAFrb,UAAAkb,UAAE,SAAOnT,GAEL,QADAnK,KAAKsS,OAAOnI,GAAO,OAIrBsT,EAAFrb,UAAAib,IAAE,SAAIlT,EAAarG,GAEf,OADA9D,KAAKsS,OAAOnI,GAAOrG,EACZ9D,MAGTyd,EAAFrb,UAAAqX,IAAE,SAAItP,GACF,OAAOnK,KAAKsS,OAAOnI,IAGrBsT,EAAFrb,UAAA2G,QAAE,SAAQwU,EAAoC5C,GAC1C,IAAMrI,EAAStS,KAAKsS,OACpB,IAAK,IAAInI,KAAOmI,EACVA,EAAOoL,eAAevT,IAAwB,OAAhBmI,EAAOnI,IACvCoT,EAAG3c,KAAK+Z,EAASrI,EAAOnI,GAAMA,IAKpCsT,EAAFrb,UAAAsX,MAAE,WACE1Z,KAAKsS,OAAS,IAElBmL,EA7BA,4LCmOAE,IA9GA,SAAAld,GAKE,SAAFmd,EAAcvY,EACQuU,EACAiE,EACAvS,EACAwS,GAClBrd,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtB4Z,YAAsBA,EACA5Z,KAAtB6d,gBAAsBA,EACA7d,KAAtBsL,iBAAsBA,EACAtL,KAAtB8d,gBAAsBA,EARZ9d,KAAV+d,OAAyC,KAChC/d,KAATge,wBAA2C,EAClChe,KAATyP,MAAyB,EAHgBnO,GAAzCsc,EAAAnd,GAaYmd,EAAZxb,UAAAyD,MAAE,SAAgB/B,GACd,IAAIqG,EACJ,IACEA,EAAMnK,KAAK4Z,YAAY9V,GACvB,MAAOjD,GAEP,YADAb,KAAK+D,MAAMlD,GAIbb,KAAKie,OAAOna,EAAOqG,IAGbyT,EAAVxb,UAAA6b,OAAE,SAAena,EAAUqG,GACvB,IAAI4T,EAAS/d,KAAK+d,OAEbA,IACHA,EAAS/d,KAAK+d,OAAwB,iBAAR5T,EAAmB,IAAI+T,GAA3DT,QAAuE,IAAI1T,GAA3EC,KAGI,IAEImU,EAFAC,EAAQL,EAAOtE,IAAItP,GAGvB,GAAInK,KAAK6d,gBACP,IACEM,EAAUne,KAAK6d,gBAAgB/Z,GAC/B,MAAOjD,GACPb,KAAK+D,MAAMlD,QAGbsd,EAAera,EAGjB,IAAKsa,EAAO,CACVA,EAAQpe,KAAK8d,gBAAkB9d,KAAK8d,kBAAoB,IAAIO,GAAlE5B,QACMsB,EAAOV,IAAIlT,EAAKiU,GAChB,IAAME,EAAoB,IAAIC,GAAkBpU,EAAKiU,EAAOpe,MAE5D,GADAA,KAAKqF,YAAYxB,KAAKya,GAClBte,KAAKsL,iBAAkB,CACzB,IAAIG,OAAZ,EACQ,IACEA,EAAWzL,KAAKsL,iBAAiB,IAAIiT,GAAwBpU,EAAiBiU,IAC9E,MAAOvd,GAEP,YADAb,KAAK+D,MAAMlD,GAGbb,KAAKkD,IAAIuI,EAASlE,UAAU,IAAIoW,GAAwBxT,EAAKiU,EAAOpe,SAInEoe,EAAMtc,QACTsc,EAAMva,KAAKsa,IAILP,EAAZxb,UAAA0D,OAAE,SAAiBjF,GACf,IAAMkd,EAAS/d,KAAK+d,OAChBA,IACFA,EAAOhV,QAAQ,SAACqV,EAAOjU,GACrBiU,EAAMra,MAAMlD,KAGdkd,EAAOrE,SAET1Z,KAAKqF,YAAYtB,MAAMlD,IAGf+c,EAAZxb,UAAA2D,UAAE,WACE,IAAMgY,EAAS/d,KAAK+d,OAChBA,IACFA,EAAOhV,QAAQ,SAACqV,EAAOjU,GACrBiU,EAAMpa,aAGR+Z,EAAOrE,SAET1Z,KAAKqF,YAAYrB,YAGnB4Z,EAAFxb,UAAAoc,YAAE,SAAYrU,GACVnK,KAAK+d,OAAOT,UAAOnT,IAGrByT,EAAFxb,UAAAP,YAAE,WACO7B,KAAK8B,SACR9B,KAAKge,wBAAyB,EACX,IAAfhe,KAAKyP,OACPhP,EAAR2B,UAAcP,YAAdjB,KAAAZ,QAnGA,CAAyCsH,EAuGzCvC,YAOA,SAAAtE,GACE,SAAFkd,EAAsBxT,EACAiU,EACAxa,GAClBnD,EAAJG,KAAAZ,KAAUoe,GAHYpe,KAAtBmK,IAAsBA,EACAnK,KAAtBoe,MAAsBA,EACApe,KAAtB4D,OAAsBA,EAetB,OAlB4CtC,GAA5Cqc,EAAAld,GAOYkd,EAAZvb,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKgE,YAGG2Z,EAAZvb,UAAAF,aAAE,WACE,IAAQ0B,EAAZ5D,KAAA4D,OAAoBuG,EAApBnK,KAAAmK,IACInK,KAAKmK,IAAMnK,KAAK4D,OAAS,KACrBA,GACFA,EAAO4a,YAAYrU,IAGzBwT,EAlBA,CAA4CrW,EAkB5CvC,aAUAwZ,GAAA,SAAA9d,GACE,SAAF8d,EAAqBpU,EACCsU,EACAC,GAClBje,EAAJG,KAAAZ,MAHqBA,KAArBmK,IAAqBA,EACCnK,KAAtBye,aAAsBA,EACAze,KAAtB0e,qBAAsBA,EAatB,OAhB6Cpd,GAA7Cid,EAAA9d,GAOY8d,EAAZnc,UAAAkG,WAAE,SAAqB1C,GACnB,IAAMvC,EAAe,IAAI4C,EAA7BrE,aACW8c,EAAX1e,KAAA0e,qBAAiCD,EAAjCze,KAAAye,aAKI,OAJIC,IAAyBA,EAAqB5c,QAChDuB,EAAaH,IAAI,IAAIyb,GAA0BD,IAEjDrb,EAAaH,IAAIub,EAAalX,UAAU3B,IACjCvC,GAEXkb,EAhBA,CAA6C9T,EAgB7ClC,YAOAoW,GAAA,SAAAle,GACE,SAAFke,EAAsB/a,GAClBnD,EAAJG,KAAAZ,OADsBA,KAAtB4D,OAAsBA,GAEX6L,QAaX,OAhBwCnO,GAAxCqd,EAAAle,GAMEke,EAAFvc,UAAAP,YAAE,WACE,IAAM+B,EAAS5D,KAAK4D,OACfA,EAAO9B,QAAW9B,KAAK8B,SAC1BrB,EAAN2B,UAAYP,YAAZjB,KAAAZ,MACM4D,EAAO6L,OAAS,EACK,IAAjB7L,EAAO6L,OAAe7L,EAAOoa,wBAC/Bpa,EAAO/B,gBAIf8c,EAhBA,CAAwC1Y,EAgBxCrE,0MCrQA,SAAAnB,GAAA,SAAAme,IAA0Cne,EAA1CV,MAAAC,KAAAC,WAA0CqB,GAA1Csd,EAAAne,GACYme,EAAZxc,UAAAyD,MAAE,SAAgB4M,GACdxK,EAAJC,QAFA,CAA0CZ,EAI1CvC,sMCjBA,SAAAtE,GACE,SAAFoe,EAAcxZ,GACV5E,EAAJG,KAAAZ,KAAUqF,GAFsB/D,GAAhCud,EAAApe,GAKUoe,EAAVzc,UAAAiF,eAAE,SAAuBsQ,GACrB,IAAMtS,EAAcrF,KAAKqF,YAEzBA,EAAYxB,KAAK8T,GACjBtS,EAAYrB,YAGJ6a,EAAZzc,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKqH,gBAAe,IAGZwX,EAAZzc,UAAA2D,UAAE,WACE/F,KAAKqH,gBAAe,IAjBxB,CAAgCC,EAmBhCvC,sMCuBA,SAAAtE,GAKE,SAAFqe,EAAczZ,EACQuR,EACAR,EACAsB,EACAhP,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtB4W,UAAsBA,EACA5W,KAAtBoW,eAAsBA,EACApW,KAAtB0X,aAAsBA,EACA1X,KAAtB0I,OAAsBA,EAPZ1I,KAAVuL,UAA8B,OACpBvL,KAAVsC,MAA0B,KAQXoV,IACT1X,KAAKqX,UAAYK,EACjB1X,KAAKuL,UAAW,GAbajK,GAAnCwd,EAAAre,GAiBYqe,EAAZ1c,UAAAyD,MAAE,SAAgB/B,GACd,IAAMxB,EAAQtC,KAAKsC,QACnB,GAAItC,KAAK4W,UACP5W,KAAK6W,cAAc/S,EAAOxB,OACrB,CACL,GAAItC,KAAKoW,eAEP,YADApW,KAAK+b,mBAAmBjY,EAAOxB,GAGjCtC,KAAKqX,UAAYvT,EACjB9D,KAAKuL,UAAW,IAIZuT,EAAV1c,UAAAyU,cAAE,SAAsB/S,EAAUxB,GAC9B,IAAIiI,EACJ,IACEA,EAASvK,KAAK4W,UAAU9S,EAAOxB,EAAOtC,KAAK0I,QAC3C,MAAO7H,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzB,GAAI0J,EAAQ,CACV,GAAIvK,KAAKoW,eAEP,YADApW,KAAK+b,mBAAmBjY,EAAOxB,GAGjCtC,KAAKqX,UAAYvT,EACjB9D,KAAKuL,UAAW,IAIZuT,EAAV1c,UAAA2Z,mBAAE,SAA2BjY,EAAUxB,GACnC,IAAIiI,EACJ,IACEA,EAAevK,KAAMoW,eAAetS,EAAOxB,GAC3C,MAAOzB,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqX,UAAY9M,EACjBvK,KAAKuL,UAAW,GAGRuT,EAAZ1c,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YACrBrF,KAAKuL,UACPlG,EAAYxB,KAAK7D,KAAKqX,WACtBhS,EAAYrB,YAEZqB,EAAYtB,MAAM,IAAIkY,GAA5BN,aAnEA,CAAmCrU,EAsEnCvC,kMC9FgB,IAAhBga,GAAA,SAA0B1M,EAAyCsI,GACjE,OAAO,SAAsBjS,GAC3B,GAAuB,mBAAZ2J,EACT,MAAM,IAAIlH,UAAU,8DAEtB,OAAOzC,EAAOF,KAAK,IAAIwW,GAAY3M,EAASsI,MAIhDqE,GAAA,WACE,SAAFA,EAAsB3M,EAAiDsI,GAAjD3a,KAAtBqS,QAAsBA,EAAiDrS,KAAvE2a,QAAuEA,EAMvE,OAHEqE,EAAF5c,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI0X,GAAcrZ,EAAY5F,KAAKqS,QAASrS,KAAK2a,WAE7EqE,EAPA,GAAAE,GAAAF,GAcAC,GAAA,SAAAxe,GAIE,SAAFwe,EAAc5Z,EACQgN,EACRsI,GACVla,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBqS,QAAsBA,EAJpBrS,KAAFyP,MAAkB,EAOdzP,KAAK2a,QAAUA,GAAW3a,KAe9B,OAvBkCsB,GAAlC2d,EAAAxe,GAaYwe,EAAZ7c,UAAAyD,MAAE,SAAgB/B,GACd,IAAIyG,EACJ,IACEA,EAASvK,KAAKqS,QAAQzR,KAAKZ,KAAK2a,QAAS7W,EAAO9D,KAAKyP,SACrD,MAAO5O,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IAE1B0U,EAvBA,CAAkC3X,EAuBlCvC,mOC/BA,SAAAtE,GAIE,SAAF0e,EAAc9Z,EAA4BvB,GACtCrD,EAAJG,KAAAZ,KAAUqF,GACNrF,KAAK8D,MAAQA,EANmBxC,GAApC6d,EAAA1e,GASY0e,EAAZ/c,UAAAyD,MAAE,SAAgBxF,GACdL,KAAKqF,YAAYxB,KAAK7D,KAAK8D,QAV/B,CAAoCwD,EAYpCvC,sMCEA,SAAAtE,GACE,SAAF2e,EAAc/Z,GACV5E,EAAJG,KAAAZ,KAAUqF,GAF6B/D,GAAvC8d,EAAA3e,GAKY2e,EAAZhd,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKqF,YAAYxB,KAAK8R,GAA1BpB,aAAuCQ,WAAWjR,KAGtCsb,EAAZhd,UAAA0D,OAAE,SAAiBjF,GACf,IAAMwE,EAAcrF,KAAKqF,YACzBA,EAAYxB,KAAK8R,GAArBpB,aAAkCU,YAAYpU,IAC1CwE,EAAYrB,YAGJob,EAAZhd,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YACzBA,EAAYxB,KAAK8R,GAArBpB,aAAkCW,kBAC9B7P,EAAYrB,YAlBhB,CAAuCsD,EAoBvCvC,sMCVA,SAAAtE,GAYE,SAAF4e,EAAcha,EAAoCia,EAA6DC,EACzFC,GAClB/e,EAAJG,KAAAZ,KAAUqF,GAFwCrF,KAAlDsf,YAAkDA,EAA6Dtf,KAA/Guf,MAA+GA,EACzFvf,KAAtBwf,QAAsBA,EAZZxf,KAAVsC,MAA0B,EADShB,GAAnC+d,EAAA5e,GAGE6F,OAAFkT,eAAM6F,EAANjd,UAAA,OAAA,CAAAqX,IAAE,WACE,OAAOzZ,KAAKuf,OAGhBlC,IAAE,SAASvZ,GACP9D,KAAKwf,SAAU,EACfxf,KAAKuf,MAAQzb,mCAQLub,EAAZjd,UAAAyD,MAAE,SAAgB/B,GACd,GAAK9D,KAAKwf,QAIR,OAAOxf,KAAKwW,SAAS1S,GAHrB9D,KAAKyf,KAAO3b,EACZ9D,KAAKqF,YAAYxB,KAAKC,IAMlBub,EAAVjd,UAAAoU,SAAE,SAAiB1S,GACf,IACIyG,EADEjI,EAAQtC,KAAKsC,QAEnB,IACEiI,EAASvK,KAAKsf,YAAetf,KAAKyf,KAAM3b,EAAOxB,GAC/C,MAAOzB,GACPb,KAAKqF,YAAYtB,MAAMlD,GAEzBb,KAAKyf,KAAOlV,EACZvK,KAAKqF,YAAYxB,KAAK0G,IAnC1B,CAAmCjD,EAqCnCvC,sMC3CA,SAAAtE,GAIE,SAAFif,EAAcra,EAAoCsa,GAC9Clf,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlD2f,MAAkDA,EAHxC3f,KAAV4f,KAA2B,IAAItf,MACrBN,KAAVyP,MAA0B,EAFUnO,GAApCoe,EAAAjf,GAQYif,EAAZtd,UAAAyD,MAAE,SAAgB/B,GACd,IAAM8b,EAAO5f,KAAK4f,KACZD,EAAQ3f,KAAK2f,MACblQ,EAAQzP,KAAKyP,QAEfmQ,EAAKpf,OAASmf,EAChBC,EAAK3c,KAAKa,GAGV8b,EADcnQ,EAAQkQ,GACR7b,GAIR4b,EAAZtd,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YACrBoK,EAAQzP,KAAKyP,MAEjB,GAAY,EAARA,EAIF,IAHA,IAAMkQ,EAAQ3f,KAAKyP,OAASzP,KAAK2f,MAAQ3f,KAAK2f,MAAQ3f,KAAKyP,MACrDmQ,EAAQ5f,KAAK4f,KAEV5e,EAAI,EAAGA,EAAI2e,EAAO3e,IAAK,CAC9B,IAAMyS,EAAOhE,IAAWkQ,EACxBta,EAAYxB,KAAK+b,EAAKnM,IAI1BpO,EAAYrB,YAnChB,CAAoCsD,EAqCpCvC,sMCtBA,SAAAtE,GAME,SAAFof,EAAcxa,EACQwQ,EACAO,EACAC,QAAtB,IAAAA,IAAcA,EAA6B7H,OAAO8H,mBAC9C7V,EAAJG,KAAAZ,KAAUqF,GAHYrF,KAAtB6V,IAAsBA,EACA7V,KAAtBoW,eAAsBA,EACApW,KAAtBqW,WAAsBA,EARZrW,KAAVuW,cAAkC,EACxBvW,KAAVmP,OAAwB,GACdnP,KAAVyN,OAA2B,EACfzN,KAAZsC,MAA4B,EAJuBhB,GAAnDue,EAAApf,GAaYof,EAAZzd,UAAAyD,MAAE,SAAgB/B,GACd,GAAI9D,KAAKyN,OAASzN,KAAKqW,WAAY,CACjC,IAAMD,EAAiBpW,KAAKoW,eACtB9T,EAAQtC,KAAKsC,QACbuT,EAAM7V,KAAK6V,IACXxQ,EAAcrF,KAAKqF,YAEzBrF,KAAKyN,SACLzN,KAAKyW,UAAUZ,EAAKxQ,EAAa+Q,EAAgBtS,EAAOxB,QAExDtC,KAAKmP,OAAOlM,KAAKa,IAIb+b,EAAVzd,UAAAqU,UAAE,SAAkBZ,EACAxQ,EACA+Q,EACAtS,EACAxB,GAChBtC,KAAKkD,IAAIyI,EAAbC,kBAAqC5L,KAAM6V,EAAK/R,EAAOxB,KAG3Cud,EAAZzd,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EACA,IAAhBvW,KAAKyN,QAAuC,IAAvBzN,KAAKmP,OAAO3O,QACnCR,KAAKqF,YAAYrB,YAIrB6b,EAAFzd,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAQiP,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YACQ+Q,EACFpW,KAAKib,gBAAgBlU,EAAYC,EAAYC,EAAYC,GAEzD7B,EAAYxB,KAAKmD,IAIb6Y,EAAVzd,UAAA6Y,gBAAE,SAAwBlU,EAAeC,EACfC,EAAoBC,GAC1C,IACIqD,EADI6L,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YAEI,IACEkF,EAAS6L,EAAerP,EAAYC,EAAYC,EAAYC,GAC5D,MAAOrG,GAEP,YADAwE,EAAYtB,MAAMlD,GAIpBwE,EAAYxB,KAAK0G,IAGnBsV,EAAFzd,UAAAgF,YAAE,SAAYvG,GACVb,KAAKqF,YAAYtB,MAAMlD,IAGzBgf,EAAFzd,UAAAiF,eAAE,SAAeF,GACb,IAAMgI,EAASnP,KAAKmP,OACpBnP,KAAKwC,OAAO2E,GACZnH,KAAKyN,SACe,EAAhB0B,EAAO3O,OACTR,KAAK6F,MAAMsJ,EAAOvB,SACO,IAAhB5N,KAAKyN,QAAgBzN,KAAKuW,cACnCvW,KAAKqF,YAAYrB,YA9EvB,CAAmD8H,EAiFnDjF,2MCrGA,SAAApG,GAOE,SAAFqf,EAAcza,EACQia,EACAS,EACA1J,GAClB5V,EAAJG,KAAAZ,KAAUqF,GAHYrF,KAAtBsf,YAAsBA,EACAtf,KAAtB+f,IAAsBA,EACA/f,KAAtBqW,WAAsBA,EATZrW,KAAVuL,UAA8B,EACpBvL,KAAVuW,cAAkC,EACxBvW,KAAVmP,OAAsC,GAC5BnP,KAAVyN,OAA2B,EACfzN,KAAZsC,MAA4B,EALmBhB,GAA/Cwe,EAAArf,GAcYqf,EAAZ1d,UAAAyD,MAAE,SAAgB/B,GACd,GAAI9D,KAAKyN,OAASzN,KAAKqW,WAAY,CACjC,IAAM/T,EAAQtC,KAAKsC,QACbuT,EAAMlT,EAAlBC,SAA2B5C,KAAKsf,YAAd3c,CAA2B3C,KAAK+f,IAAKjc,GAC3CuB,EAAcrF,KAAKqF,YACrBwQ,IAAQ3V,EAAlBC,YACQkF,EAAYtB,MAAM7D,EAA1BC,YAAsCN,IAE9BG,KAAKyN,SACLzN,KAAKyW,UAAUZ,EAAK/R,EAAOxB,SAG7BtC,KAAKmP,OAAOlM,KAAKa,IAIbgc,EAAV1d,UAAAqU,UAAE,SAAkBZ,EAAU/R,EAAUxB,GACpCtC,KAAKkD,IAAIyI,EAAbC,kBAAqC5L,KAAM6V,EAAK/R,EAAOxB,KAG3Cwd,EAAZ1d,UAAA2D,UAAE,WACE/F,KAAKuW,cAAe,EACA,IAAhBvW,KAAKyN,QAAuC,IAAvBzN,KAAKmP,OAAO3O,UACb,IAAlBR,KAAKuL,UACPvL,KAAKqF,YAAYxB,KAAK7D,KAAK+f,KAE7B/f,KAAKqF,YAAYrB,aAIrB8b,EAAF1d,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACD,IAAZ9B,EAAArF,KAAAqF,YACIrF,KAAK+f,IAAM/Y,EACXhH,KAAKuL,UAAW,EAChBlG,EAAYxB,KAAKmD,IAGnB8Y,EAAF1d,UAAAiF,eAAE,SAAeF,GACb,IAAMgI,EAASnP,KAAKmP,OACpBnP,KAAKwC,OAAO2E,GACZnH,KAAKyN,SACe,EAAhB0B,EAAO3O,OACTR,KAAK6F,MAAMsJ,EAAOvB,SACO,IAAhB5N,KAAKyN,QAAgBzN,KAAKuW,gBACb,IAAlBvW,KAAKuL,UACPvL,KAAKqF,YAAYxB,KAAK7D,KAAK+f,KAE7B/f,KAAKqF,YAAYrB,aA/DvB,CAA+C8H,EAkE/CjF,uMC7HgB,IAAhBmZ,GAAA,WACE,OAAO,SAAkCtX,GACvC,OAAOA,EAAOF,KAAK,IAAIyX,GAAiBvX,MAI5CuX,GAAA,WACE,SAAFA,EAAsBC,GAAAlgB,KAAtBkgB,YAAsBA,EAgBtB,OAdED,EAAF7d,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAEtB,IAAZwX,EAAAlgB,KAAAkgB,YACWA,EAAaC,YAEpB,IAAMC,EAAa,IAAIC,GAAmBza,EAAYsa,GAChD7c,EAAeqF,EAAOnB,UAAU6Y,GAMtC,OAJKA,EAAWte,SACPse,EAAYE,WAAaJ,EAAYK,WAGvCld,GAEX4c,EAjBA,GAmBAI,GAAA,SAAA5f,GAIE,SAAF4f,EAAchb,EACQ6a,GAClBzf,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBkgB,YAAsBA,EAwDtB,OA7DoC5e,GAApC+e,EAAA5f,GASY4f,EAAZje,UAAAF,aAAE,WAEU,IAAZge,EAAAlgB,KAAAkgB,YACI,GAAKA,EAAL,CAKAlgB,KAAKkgB,YAAc,KACnB,IAAMM,EAAkBN,EAAaC,UACrC,GAAIK,GAAY,EACdxgB,KAAKsgB,WAAa,UAKpB,GADOJ,EAAaC,UAAYK,EAAW,EAC5B,EAAXA,EACFxgB,KAAKsgB,WAAa,SADpB,CA4BQ,IAAZA,EAAAtgB,KAAAsgB,WACUG,EAA0BP,EAAaQ,YAC7C1gB,KAAKsgB,WAAa,MAEdG,GAAsBH,GAAcG,IAAqBH,GAC3DG,EAAiB5e,oBA7CjB7B,KAAKsgB,WAAa,MAgDxBD,EA7DA,CAAoC/Y,EA6DpCvC,qNCvBA4b,IA5DA,SAAAlgB,GAOE,SAAFmgB,EAAwBlY,EACAmY,GACpBpgB,EAAJG,KAAAZ,MAFwBA,KAAxB0I,OAAwBA,EACA1I,KAAxB6gB,eAAwBA,EALZ7gB,KAAZmgB,UAAgC,EAE9BngB,KAAF8gB,aAAgB,EAL8Bxf,GAA9Csf,EAAAngB,GAYYmgB,EAAZxe,UAAAkG,WAAE,SAAqB1C,GACnB,OAAO5F,KAAK+gB,aAAaxZ,UAAU3B,IAG3Bgb,EAAZxe,UAAA2e,WAAE,WACE,IAAM3E,EAAUpc,KAAKghB,SAIrB,OAHK5E,IAAWA,EAAQhX,YACtBpF,KAAKghB,SAAWhhB,KAAK6gB,kBAEhB7gB,KAAKghB,UAGdJ,EAAFxe,UAAAme,QAAE,WACE,IAAID,EAAatgB,KAAK0gB,YAatB,OAZKJ,IACHtgB,KAAK8gB,aAAc,GACnBR,EAAatgB,KAAK0gB,YAAc,IAAIza,EAA1CrE,cACiBsB,IAAIlD,KAAK0I,OACjBnB,UAAU,IAAIoZ,GAAsB3gB,KAAK+gB,aAAc/gB,QACtDsgB,EAAWxe,QACb9B,KAAK0gB,YAAc,KACnBJ,EAAara,EAArBrE,aAAkCwB,OAE1BpD,KAAK0gB,YAAcJ,GAGhBA,GAGTM,EAAFxe,UAAAoe,SAAE,WACE,OAAOS,GAAXT,UAAWS,CAAsBjhB,OA1CjC,CAA8CyK,EA4C9ClC,YAgBA,SAAA9H,GACE,SAAFkgB,EAActb,EACQ6a,GAClBzf,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBkgB,YAAsBA,EAyBtB,OA3BuC5e,GAAvCqf,EAAAlgB,GAKYkgB,EAAZve,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKkC,eACLzB,EAAJ2B,UAAU0D,OAAVlF,KAAAZ,KAAiBa,IAEL8f,EAAZve,UAAA2D,UAAE,WACE/F,KAAKkgB,YAAYY,aAAc,EAC/B9gB,KAAKkC,eACLzB,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAEY2gB,EAAZve,UAAAF,aAAE,WACE,IAAMge,EAAmBlgB,KAAKkgB,YAC9B,GAAIA,EAAa,CACflgB,KAAKkgB,YAAc,KACnB,IAAMI,EAAaJ,EAAYQ,YAC/BR,EAAYC,UAAY,EACxBD,EAAYc,SAAW,KACvBd,EAAYQ,YAAc,KACtBJ,GACFA,EAAWze,gBAInB8e,EA3BA,CAAuCtC,GA2BvC9B,wBAqBA,SAAA9b,GAIE,SAAF4f,EAAchb,EACQ6a,GAClBzf,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtBkgB,YAAsBA,EALc5e,GAApC+e,EAAA5f,GASY4f,EAAZje,UAAAF,aAAE,WAEU,IAAZge,EAAAlgB,KAAAkgB,YACI,GAAKA,EAAL,CAKAlgB,KAAKkgB,YAAc,KACnB,IAAMM,EAAkBN,EAAaC,UACrC,GAAIK,GAAY,EACdxgB,KAAKsgB,WAAa,UAKpB,GADOJ,EAAaC,UAAYK,EAAW,EAC5B,EAAXA,EACFxgB,KAAKsgB,WAAa,SADpB,CA4BQ,IAAZA,EAAAtgB,KAAAsgB,WACUG,EAA0BP,EAAaQ,YAC7C1gB,KAAKsgB,WAAa,MAEdG,GAAsBH,GAAcG,IAAqBH,GAC3DG,EAAiB5e,oBA7CjB7B,KAAKsgB,WAAa,MAbxB,CAAoChZ,EA6DpCvC,sMCtDA,SAAAtE,GACE,SAAFygB,EAAwB7b,EACF8b,GAClB1gB,EAAJG,KAAAZ,KAAUqF,GAFcrF,KAAxBqF,YAAwBA,EACFrF,KAAtBmhB,YAAsBA,EAF0B7f,GAAhD4f,EAAAzgB,GAMEygB,EAAF9e,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAKohB,yBAGPF,EAAF9e,UAAAiF,eAAE,SAAeF,GACbnH,KAAKohB,yBAGGF,EAAZ9e,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKohB,yBAGGF,EAAZ9e,UAAA2D,UAAE,WACE/F,KAAKohB,yBAGCF,EAAV9e,UAAAgf,sBAAE,WACE,IAAMvd,EAAO7D,KAAKmhB,YAAYvT,QAC1B/J,EACF7D,KAAKkD,IAAIyI,EAAfC,kBAAiC5L,KAAM6D,IAEjC7D,KAAKqF,YAAYrB,YA3BvB,CAAgD8H,EA8BhDjF,2MCpGA,SAAApG,GAIE,SAAF4gB,EAAchc,GACV5E,EAAJG,KAAAZ,KAAUqF,GAHArF,KAAVshB,SAA6B,EAFOhgB,GAApC+f,EAAA5gB,GAQE4gB,EAAFjf,UAAAyD,MAAE,SAAM/B,GACA9D,KAAKshB,QACPthB,KAAKqF,YAAYxB,KAAK,CAAC7D,KAAKgI,KAAMlE,IAElC9D,KAAKshB,SAAU,EAGjBthB,KAAKgI,KAAOlE,GAfhB,CAAoCwD,EAiBpCvC,sMChEA,SAAAtE,GAEE,SAAF8gB,EAAsBC,GAClB/gB,EAAJG,KAAAZ,MADsBA,KAAtBwhB,OAAsBA,EAFkBlgB,GAAxCigB,EAAA9gB,GAME6F,OAAFkT,eAAM+H,EAANnf,UAAA,QAAA,CAAAqX,IAAE,WACE,OAAOzZ,KAAKyhB,4CAGJF,EAAZnf,UAAAkG,WAAE,SAAqB1C,GACnB,IAAMvC,EAAe5C,EAAzB2B,UAA+BkG,WAA/B1H,KAAAZ,KAA0C4F,GAItC,OAHIvC,IAAiCA,EAAcvB,QACjD8D,EAAW/B,KAAK7D,KAAKwhB,QAEhBne,GAGTke,EAAFnf,UAAAqf,SAAE,WACE,GAAIzhB,KAAKsT,SACP,MAAMtT,KAAK2c,YACN,GAAI3c,KAAK8B,OACd,MAAM,IAAI+a,GAAhBX,wBAEM,OAAOlc,KAAKwhB,QAIhBD,EAAFnf,UAAAyB,KAAE,SAAKC,GACHrD,EAAJ2B,UAAUyB,KAAVjD,KAAAZ,KAAeA,KAAKwhB,OAAS1d,IA7B7B,CAAwCua,GA+BxC5B,mMChCA,SAAAhc,GAAA,SAAAihB,IAAqCjhB,EAArCV,MAAAC,KAAAC,WACUD,KAAV8D,MAAqB,KACX9D,KAAV2hB,SAA6B,EACnB3hB,KAAVuW,cAAkC,EAHGjV,GAArCogB,EAAAjhB,GAKYihB,EAAZtf,UAAAkG,WAAE,SAAqB1C,GACnB,OAAI5F,KAAKsT,UACP1N,EAAW7B,MAAM/D,KAAK2c,aACf1W,EAAbrE,aAA0BwB,OACXpD,KAAKuW,cAAgBvW,KAAK2hB,SACnC/b,EAAW/B,KAAK7D,KAAK8D,OACrB8B,EAAW5B,WACJiC,EAAbrE,aAA0BwB,OAEf3C,EAAX2B,UAAiBkG,WAAjB1H,KAAAZ,KAA4B4F,IAG1B8b,EAAFtf,UAAAyB,KAAE,SAAKC,GACE9D,KAAKuW,eACRvW,KAAK8D,MAAQA,EACb9D,KAAK2hB,SAAU,IAInBD,EAAFtf,UAAA2B,MAAE,SAAMA,GACC/D,KAAKuW,cACR9V,EAAN2B,UAAY2B,MAAZnD,KAAAZ,KAAkB+D,IAIhB2d,EAAFtf,UAAA4B,SAAE,WACEhE,KAAKuW,cAAe,EAChBvW,KAAK2hB,SACPlhB,EAAN2B,UAAYyB,KAAZjD,KAAAZ,KAAiBA,KAAK8D,OAElBrD,EAAJ2B,UAAU4B,SAAVpD,KAAAZ,OAnCA,CAAqCqe,GAqCrC5B,+MCnCA,SAAAhc,GAEE,SAAFmhB,EAAwB5V,EACAC,GACpBxL,EAAJG,KAAAZ,KAAUgM,EAAWC,GAFGjM,KAAxBgM,UAAwBA,EACAhM,KAAxBiM,KAAwBA,EA8BxB,OAjCoC3K,GAApCsgB,EAAAnhB,GAOSmhB,EAATxf,UAAA8J,SAAE,SAAgBC,EAAWC,GACzB,YADJ,IAAAA,IAA6BA,EAA7B,GACgB,EAARA,EACK3L,EAAb2B,UAAmB8J,SAAnBtL,KAAAZ,KAA4BmM,EAAOC,IAE/BpM,KAAKoM,MAAQA,EACbpM,KAAKmM,MAAQA,EACbnM,KAAKgM,UAAUW,MAAM3M,MACdA,OAGF4hB,EAATxf,UAAA0K,QAAE,SAAeX,EAAUC,GACvB,OAAgB,EAARA,GAAapM,KAAK8B,OACxBrB,EAAN2B,UAAY0K,QAAZlM,KAAAZ,KAAoBmM,EAAOC,GACrBpM,KAAK+M,SAASZ,EAAOC,IAGfwV,EAAZxf,UAAAqK,eAAE,SAAyBT,EAA2BO,EAAUH,GAI5D,YAJJ,IAAAA,IAAgEA,EAAhE,GAImB,OAAVA,GAA0B,EAARA,GAAyB,OAAVA,GAA+B,EAAbpM,KAAKoM,MACpD3L,EAAb2B,UAAmBqK,eAAnB7L,KAAAZ,KAAkCgM,EAAWO,EAAIH,GAGtCJ,EAAUW,MAAM3M,OAE3B4hB,EAjCA,CAAoC7T,EAiCpC1B,yMCuBqB,oBC/DrB,SAAA5L,GAAA,SAAAohB,IAAoCphB,EAApCV,MAAAC,KAAAC,WACA,OADoCqB,GAApCugB,EAAAphB,GACAohB,EADA,CAAoC/T,EACpCN,iBD8DAqU,gBAAwCC,GAAxCF,qMEtDAG,GAAA,SAAAthB,GAKE,SAAFshB,EAAc1S,EACA2S,EACQhW,QAFtB,IAAAqD,IAAcA,EAAqBb,OAAO8H,wBAC1C,IAAA0L,IAAcA,EAAqBxT,OAAO8H,mBAEtC7V,EAAJG,KAAAZ,MADsBA,KAAtBgM,UAAsBA,EANZhM,KAAViiB,QAAsC,GAQlCjiB,KAAKkiB,YAAc7S,EAAa,EAAI,EAAIA,EACxCrP,KAAKmiB,YAAcH,EAAa,EAAI,EAAIA,EA6E5C,OAvFsC1gB,GAAtCygB,EAAAthB,GAaEshB,EAAF3f,UAAAyB,KAAE,SAAKC,GACH,IAAMwJ,EAAMtN,KAAKoiB,UACjBpiB,KAAKiiB,QAAQhf,KAAK,IAAIof,GAAY/U,EAAKxJ,IACvC9D,KAAKsiB,2BACL7hB,EAAJ2B,UAAUyB,KAAVjD,KAAAZ,KAAe8D,IAGHie,EAAZ3f,UAAAkG,WAAE,SAAqB1C,GACnB,IAEIvC,EAFE4e,EAAUjiB,KAAKsiB,2BACftW,EAAYhM,KAAKgM,UAGvB,GAAIhM,KAAK8B,OACP,MAAM,IAAI+a,GAAhBX,wBACelc,KAAKsT,SACdjQ,EAAe4C,EAArBrE,aAAkCwB,MACnBpD,KAAKoF,UACd/B,EAAe4C,EAArBrE,aAAkCwB,OAE5BpD,KAAKqc,UAAUpZ,KAAK2C,GACpBvC,EAAe,IAAI0Z,GAAzBZ,oBAA6Cnc,KAAM4F,IAG3CoG,GACFpG,EAAW1C,IAAI0C,EAAa,IAAIsQ,GAAtCZ,oBAA6D1P,EAAYoG,IAIrE,IADA,IAAMzJ,EAAM0f,EAAQzhB,OACXQ,EAAI,EAAGA,EAAIuB,IAAQqD,EAAW9D,OAAQd,IAC7C4E,EAAW/B,KAAKoe,EAAQjhB,GAAG8C,OAS7B,OANI9D,KAAKsT,SACP1N,EAAW7B,MAAM/D,KAAK2c,aACb3c,KAAKoF,WACdQ,EAAW5B,WAGNX,GAGT0e,EAAF3f,UAAAggB,QAAE,WACE,OAAQpiB,KAAKgM,WAAauW,IAAOjV,OAG3ByU,EAAV3f,UAAAkgB,yBAAE,WAYE,IAXA,IAAMhV,EAAMtN,KAAKoiB,UACXF,EAAcliB,KAAKkiB,YACnBC,EAAcniB,KAAKmiB,YACnBF,EAAUjiB,KAAKiiB,QAEjBO,EAAcP,EAAQzhB,OACtBiiB,EAAc,EAKXA,EAAcD,KACdlV,EAAM2U,EAAQQ,GAAa1K,KAAQoK,IAGxCM,IAWF,OARkBP,EAAdM,IACFC,EAAc1O,KAAKkE,IAAIwK,EAAaD,EAAcN,IAGlC,EAAdO,GACFR,EAAQte,OAAO,EAAG8e,GAGbR,GAEXF,EAvFA,CAAsC1D,GAuFtC5B,SAEA4F,GACE,SAAmBtK,EAAqBjU,GAArB9D,KAArB+X,KAAqBA,EAAqB/X,KAA1C8D,MAA0CA,qBA1F1Cie,gMCmCA,SAAAthB,GAKE,SAAFiiB,EAAcrd,GACV5E,EAAJG,KAAAZ,KAAUqF,GALArF,KAAV2iB,UAA8B,EACpB3iB,KAAVuS,YAA2C,GACjCvS,KAAVwD,cAA0C,GAHHlC,GAAvCohB,EAAAjiB,GASYiiB,EAAZtgB,UAAAyD,MAAE,SAAgB+B,GACd5H,KAAKuS,YAAYtP,KAAK2E,IAGd8a,EAAZtgB,UAAA2D,UAAE,WACE,IAAMwM,EAAcvS,KAAKuS,YACnBhQ,EAAMgQ,EAAY/R,OAExB,GAAY,IAAR+B,EACFvC,KAAKqF,YAAYrB,eACZ,CACL,IAAK,IAAIhD,EAAI,EAAGA,EAAIuB,IAAQvC,KAAK2iB,SAAU3hB,IAAK,CAC9C,IAAI4G,EAAa2K,EAAYvR,GACzBqC,EAAesI,EAA3BC,kBAA6C5L,KAAM4H,EAAYA,EAAY5G,GAE/DhB,KAAKwD,eACPxD,KAAKwD,cAAcP,KAAKI,GAE1BrD,KAAKkD,IAAIG,GAEXrD,KAAKuS,YAAc,OAIvBmQ,EAAFtgB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAKnH,KAAK2iB,SAAU,CAClB3iB,KAAK2iB,UAAW,EAEhB,IAAK,IAAI3hB,EAAI,EAAGA,EAAIhB,KAAKwD,cAAchD,OAAQQ,IAC7C,GAAIA,IAAMiG,EAAY,CACpB,IAAI5D,EAAerD,KAAKwD,cAAcxC,GAEtCqC,EAAaxB,cACb7B,KAAKwC,OAAOa,GAIhBrD,KAAKwD,cAAgB,KAGvBxD,KAAKqF,YAAYxB,KAAKmD,IAnD1B,CAAuC8E,EAqDvCjF,2MCtDA,SAAApG,GACE,SAAFmiB,EAAcvd,EACQoK,EACA/G,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtByP,MAAsBA,EACAzP,KAAtB0I,OAAsBA,EAHYpH,GAAlCshB,EAAAniB,GAMEmiB,EAAFxgB,UAAA4B,SAAE,WACE,IAAKhE,KAAKoF,UAAW,CACnB,IAAQsD,EAAd1I,KAAA0I,OAAsB+G,EAAtBzP,KAAAyP,MACM,GAAc,IAAVA,EACF,OAAOhP,EAAf2B,UAAqB4B,SAArBpD,KAAAZ,OAC0B,EAATyP,IACTzP,KAAKyP,MAAQA,EAAQ,GAEvB/G,EAAOnB,UAAUvH,KAAKgG,4BAd5B,CAAkCsB,EAiBlCvC,sMChBA,SAAAtE,GAOE,SAAFoiB,EAAcxd,EACQyd,EACApa,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB8iB,SAAsBA,EACA9iB,KAAtB0I,OAAsBA,EAJZ1I,KAAV+iB,2BAA+C,EALNzhB,GAAzCuhB,EAAApiB,GAaEoiB,EAAFzgB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAK+iB,2BAA4B,EACjC/iB,KAAK0I,OAAOnB,UAAUvH,OAGxB6iB,EAAFzgB,UAAAiF,eAAE,SAAeF,GACb,IAAuC,IAAnCnH,KAAK+iB,0BACP,OAAOtiB,EAAb2B,UAAmB4B,SAAnBpD,KAAAZ,OAIE6iB,EAAFzgB,UAAA4B,SAAE,WAGE,GAFAhE,KAAK+iB,2BAA4B,GAE5B/iB,KAAKoF,UAAW,CAInB,GAHKpF,KAAKgjB,SACRhjB,KAAKijB,sBAEFjjB,KAAKkjB,qBAAuBljB,KAAKkjB,oBAAoBphB,OACxD,OAAOrB,EAAf2B,UAAqB4B,SAArBpD,KAAAZ,MAGMA,KAAKgG,yBACLhG,KAAKmjB,cAActf,SAIbgf,EAAZzgB,UAAAF,aAAE,WACE,IAAQihB,EAAZnjB,KAAAmjB,cAA2BD,EAA3BljB,KAAAkjB,oBACQC,IACFA,EAActhB,cACd7B,KAAKmjB,cAAgB,MAEnBD,IACFA,EAAoBrhB,cACpB7B,KAAKkjB,oBAAsB,MAE7BljB,KAAKgjB,QAAU,MAGPH,EAAZzgB,UAAA4D,uBAAE,WACE,IAAQmd,EAAZnjB,KAAAmjB,cAA2BH,EAA3BhjB,KAAAgjB,QAAoCE,EAApCljB,KAAAkjB,oBAQI,OAPAljB,KAAKmjB,cAAgB,KACrBnjB,KAAKgjB,QAAU,KACfhjB,KAAKkjB,oBAAsB,KAC3BziB,EAAJ2B,UAAU4D,uBAAVpF,KAAAZ,MACIA,KAAKmjB,cAAgBA,EACrBnjB,KAAKgjB,QAAUA,EACfhjB,KAAKkjB,oBAAsBA,EACpBljB,MAGD6iB,EAAVzgB,UAAA6gB,mBAAE,WACEjjB,KAAKmjB,cAAgB,IAAI9E,GAA7B5B,QACI,IAAMuG,EAAUrgB,EAApBC,SAA6B5C,KAAK8iB,SAAdngB,CAAwB3C,KAAKmjB,eAC7C,GAAIH,IAAY9iB,EAApBC,YACM,OAAOM,EAAb2B,UAAmB4B,SAAnBpD,KAAAZ,MAEIA,KAAKgjB,QAAUA,EACfhjB,KAAKkjB,oBAAsBvX,EAA/BC,kBAAiD5L,KAAMgjB,IA1EvD,CAAyClX,EA4EzCjF,2MChFA,SAAApG,GACE,SAAF2iB,EAAc/d,EACQoK,EACA/G,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtByP,MAAsBA,EACAzP,KAAtB0I,OAAsBA,EAHWpH,GAAjC8hB,EAAA3iB,GAME2iB,EAAFhhB,UAAA2B,MAAE,SAAMlD,GACJ,IAAKb,KAAKoF,UAAW,CACnB,IAAQsD,EAAd1I,KAAA0I,OAAsB+G,EAAtBzP,KAAAyP,MACM,GAAc,IAAVA,EACF,OAAOhP,EAAf2B,UAAqB2B,MAArBnD,KAAAZ,KAA2Ba,IACD,EAAT4O,IACTzP,KAAKyP,MAAQA,EAAQ,GAEvB/G,EAAOnB,UAAUvH,KAAKgG,4BAd5B,CAAiCsB,EAiBjCvC,sMCZA,SAAAtE,GAME,SAAF4iB,EAAche,EACQyd,EACApa,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB8iB,SAAsBA,EACA9iB,KAAtB0I,OAAsBA,EARkBpH,GAAxC+hB,EAAA5iB,GAYE4iB,EAAFjhB,UAAA2B,MAAE,SAAMlD,GACJ,IAAKb,KAAKoF,UAAW,CAEnB,IAAIzE,EAASX,KAAKW,OACdqiB,EAAehjB,KAAKgjB,QACpBE,EAAsBljB,KAAKkjB,oBAE/B,GAAKF,EAQHhjB,KAAKW,OAAS,KACdX,KAAKkjB,oBAAsB,SATf,CAGZ,GAFAviB,EAAS,IAAI0d,GAArB5B,SACQuG,EAAUrgB,EAAlBC,SAA2B5C,KAAK8iB,SAAdngB,CAAwBhC,MAClBT,EAAxBC,YACU,OAAOM,EAAjB2B,UAAuB2B,MAAvBnD,KAAAZ,KAA6BE,EAA7BC,YAAyCN,GAEjCqjB,EAAsBvX,EAA9BC,kBAAgD5L,KAAMgjB,GAMhDhjB,KAAKgG,yBAELhG,KAAKW,OAASA,EACdX,KAAKgjB,QAAUA,EACfhjB,KAAKkjB,oBAAsBA,EAE3BviB,EAAOkD,KAAKhD,KAINwiB,EAAZjhB,UAAAF,aAAE,WACE,IAAQvB,EAAZX,KAAAW,OAAoBuiB,EAApBljB,KAAAkjB,oBACQviB,IACFA,EAAOkB,cACP7B,KAAKW,OAAS,MAEZuiB,IACFA,EAAoBrhB,cACpB7B,KAAKkjB,oBAAsB,MAE7BljB,KAAKgjB,QAAU,MAGjBK,EAAFjhB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAQxG,EAAZX,KAAAW,OAAoBqiB,EAApBhjB,KAAAgjB,QAA6BE,EAA7BljB,KAAAkjB,oBACIljB,KAAKW,OAAS,KACdX,KAAKgjB,QAAU,KACfhjB,KAAKkjB,oBAAsB,KAE3BljB,KAAKgG,yBAELhG,KAAKW,OAASA,EACdX,KAAKgjB,QAAUA,EACfhjB,KAAKkjB,oBAAsBA,EAE3BljB,KAAK0I,OAAOnB,UAAUvH,OApE1B,CAAwC8L,EAsExCjF,2MCpDA,SAAApG,GAAA,SAAA6iB,IAAqC7iB,EAArCV,MAAAC,KAAAC,WAEUD,KAAVuL,UAA8B,EAFOjK,GAArCgiB,EAAA7iB,GAIY6iB,EAAZlhB,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAK8D,MAAQA,EACb9D,KAAKuL,UAAW,GAGlB+X,EAAFlhB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKgX,aAGPsM,EAAFlhB,UAAAiF,eAAE,WACErH,KAAKgX,aAGPsM,EAAFlhB,UAAA4U,UAAE,WACMhX,KAAKuL,WACPvL,KAAKuL,UAAW,EAChBvL,KAAKqF,YAAYxB,KAAK7D,KAAK8D,SAtBjC,CAAqCgI,EAyBrCjF,wMCzBA,SAAApG,GAIE,SAAF8iB,EAAcle,EACQgJ,EACArC,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBqO,OAAsBA,EACArO,KAAtBgM,UAAsBA,EAJpBhM,KAAFuL,UAAsB,EAMlBvL,KAAKkD,IAAI8I,EAAUE,SAASsX,GAAsBnV,EAAQ,CAAEzI,WAAY5F,KAAMqO,OAAlFA,KARsC/M,GAAtCiiB,EAAA9iB,GAWY8iB,EAAZnhB,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKqX,UAAYvT,EACjB9D,KAAKuL,UAAW,GAGlBgY,EAAFnhB,UAAA0E,WAAE,WACM9G,KAAKuL,WACPvL,KAAKuL,UAAW,EAChBvL,KAAKqF,YAAYxB,KAAK7D,KAAKqX,aAnBjC,CAAsC/P,EAsBtCvC,YAEA,SAAAye,GAAoDrX,GAC5C,IAARvG,EAAAuG,EAAAvG,WAAoByI,EAApBlC,EAAAkC,OACEzI,EAAWkB,aACX9G,KAAKkM,SAASC,EAAOkC,+LCsDvBoV,IAjEA,SAAAhjB,GAKE,SAAFijB,EAAcre,EACQse,EACAC,GAClBnjB,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB2jB,UAAsBA,EACA3jB,KAAtB4jB,SAAsBA,EANZ5jB,KAAV6jB,GAAoB,GACV7jB,KAAV8jB,GAAoB,GACV9jB,KAAV+jB,cAAyB,EAMrB/jB,KAAKkD,IAAIygB,EAAUpc,UAAU,IAAIkc,GAAiCpe,EAAarF,QAThCsB,GAAnDoiB,EAAAjjB,GAYYijB,EAAZthB,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAK+jB,cAAmC,IAAnB/jB,KAAK8jB,GAAGtjB,OAC/BR,KAAKgkB,MAAK,IAEVhkB,KAAK6jB,GAAG5gB,KAAKa,GACb9D,KAAKikB,gBAIFP,EAATthB,UAAA2D,UAAE,WACM/F,KAAK+jB,aACP/jB,KAAKgkB,KAAwB,IAAnBhkB,KAAK6jB,GAAGrjB,QAAmC,IAAnBR,KAAK8jB,GAAGtjB,QAE1CR,KAAK+jB,cAAe,GAIxBL,EAAFthB,UAAA6hB,YAAE,WAEE,IADA,IAAQJ,EAAZ7jB,KAAA6jB,GAAgBC,EAAhB9jB,KAAA8jB,GAAoBF,EAApB5jB,KAAA4jB,SACuB,EAAZC,EAAGrjB,QAA0B,EAAZsjB,EAAGtjB,QAAY,CACrC,IAAI0jB,EAAIL,EAAGjW,QACPuW,EAAIL,EAAGlW,QACPwW,GAAW,EACXR,GACFQ,EAAWzhB,EAAnBC,SAA4BghB,EAATjhB,CAAmBuhB,EAAGC,MAChBjkB,EAAzBC,aACUH,KAAKqF,YAAYtB,MAAM7D,EAAjCC,YAA6CN,GAGrCukB,EAAWF,IAAMC,EAEdC,GACHpkB,KAAKgkB,MAAK,KAKhBN,EAAFthB,UAAA4hB,KAAE,SAAKlgB,GACK,IAAZuB,EAAArF,KAAAqF,YACIA,EAAYxB,KAAKC,GACjBuB,EAAYrB,YAGd0f,EAAFthB,UAAAiiB,MAAE,SAAMvgB,GACA9D,KAAK+jB,cAAmC,IAAnB/jB,KAAK6jB,GAAGrjB,OAC/BR,KAAKgkB,MAAK,IAEVhkB,KAAK8jB,GAAG7gB,KAAKa,GACb9D,KAAKikB,gBA5DX,CAAmD3c,EA+DnDvC,YAEA,SAAAtE,GACE,SAAFgjB,EAAcpe,EAAkCzB,GAC5CnD,EAAJG,KAAAZ,KAAUqF,GADsCrF,KAAhD4D,OAAgDA,EAehD,OAhBqDtC,GAArDmiB,EAAAhjB,GAKYgjB,EAAZrhB,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAK4D,OAAOygB,MAAMvgB,IAGV2f,EAAZrhB,UAAA0D,OAAE,SAAiBjF,GACfb,KAAK4D,OAAOG,MAAMlD,IAGV4iB,EAAZrhB,UAAA2D,UAAE,WACE/F,KAAK4D,OAAOmC,aAEhB0d,EAhBA,CAAqDnc,EAgBrDvC,iCCvJA,SAA+BsK,EAAqB2S,EAAqBhW,GACvE,OAAO,SAACtD,GAA0B,OAAAA,EAAOF,MAGX6G,EAHoCA,EAGf2S,EAH2BA,EAGNhW,EAHkBA,EAKtFwU,EAAW,EAGX8D,EADAhR,GAAW,EAGR,SAAmD5K,GACxD8X,IACKpE,IAAW9I,IACdA,GAAW,EACX8I,EAAU,IAAImI,GAApBxC,cAAqC1S,EAAY2S,EAAYhW,GACvD3I,EAAeqF,EAAOnB,UAAU,CAC9B1D,KAAR,SAAaC,GAASsY,EAAQvY,KAAKC,IAC3BC,MAAR,SAAclD,GACJyS,GAAW,EACX8I,EAAQrY,MAAMlD,IAEhBmD,SAAR,WACUsgB,GAAa,EACblI,EAAQpY,eAKd,IAAMmD,EAAWiV,EAAQ7U,UAAUvH,MAEnC,OAAO,WACLwgB,IACArZ,EAAStF,cACLwB,GAA6B,IAAbmd,GAAkB8D,GACpCjhB,EAAaxB,kBA/BrB,IAAgCwN,EAAqB2S,EAAqBhW,EACpEoQ,EAEA/Y,EADAmd,EAEAlN,EACAgR,iMCwBN,SAAA7jB,GAKE,SAAF+jB,EAAcnf,EACQuR,EACAlO,GAClBjI,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB4W,UAAsBA,EACA5W,KAAtB0I,OAAsBA,EANZ1I,KAAVykB,WAA+B,EAErBzkB,KAAVsC,MAA0B,EAHQhB,GAAlCkjB,EAAA/jB,GAWU+jB,EAAVpiB,UAAAsiB,iBAAE,SAAyB5gB,GACnB9D,KAAKykB,UACPzkB,KAAKqF,YAAYtB,MAAM,4CAEvB/D,KAAKykB,WAAY,EACjBzkB,KAAK2kB,YAAc7gB,IAIb0gB,EAAZpiB,UAAAyD,MAAE,SAAgB/B,GACd,IAAMxB,EAAQtC,KAAKsC,QAEftC,KAAK4W,UACP5W,KAAKgb,QAAQlX,EAAOxB,GAEpBtC,KAAK0kB,iBAAiB5gB,IAIlB0gB,EAAVpiB,UAAA4Y,QAAE,SAAgBlX,EAAUxB,GACxB,IACMtC,KAAK4W,UAAU9S,EAAOxB,EAAOtC,KAAK0I,SACpC1I,KAAK0kB,iBAAiB5gB,GAExB,MAAOjD,GACPb,KAAKqF,YAAYtB,MAAMlD,KAIjB2jB,EAAZpiB,UAAA2D,UAAE,WACE,IAAMV,EAAcrF,KAAKqF,YAER,EAAbrF,KAAKsC,OACP+C,EAAYxB,KAAK7D,KAAKykB,UAAYzkB,KAAK2kB,YAAc9X,WACrDxH,EAAYrB,YAEZqB,EAAYtB,MAAM,IAAIkY,GAA5BN,aA/CA,CAAkCrU,EAkDlCvC,sMC3DA,SAAAtE,GAGE,SAAFmkB,EAAcvf,EAAoCsa,GAC9Clf,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlD2f,MAAkDA,EAFhD3f,KAAFyP,MAAkB,EADcnO,GAAhCsjB,EAAAnkB,GAOYmkB,EAAZxiB,UAAAyD,MAAE,SAAgBxF,KACRL,KAAKyP,MAAQzP,KAAK2f,OACtB3f,KAAKqF,YAAYxB,KAAKxD,IAT5B,CAAgCiH,EAYhCvC,sMCmBA,SAAAtE,GAIE,SAAFokB,EAAcxf,EAAoCyf,GAC9CrkB,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlD8kB,WAAkDA,EAFxC9kB,KAAV+kB,OAA2B,EAIvB/kB,KAAKglB,MAAQ,IAAI1kB,MAASwkB,GANMxjB,GAApCujB,EAAApkB,GASYokB,EAAZziB,UAAAyD,MAAE,SAAgB/B,GACd,IAAMmhB,EAAYjlB,KAAK8kB,WACjBrV,EAAQzP,KAAK+kB,SAEnB,GAAItV,EAAQwV,EACVjlB,KAAKglB,MAAMvV,GAAS3L,MACf,CACL,IAAMohB,EAAezV,EAAQwV,EACvBrF,EAAO5f,KAAKglB,MACZG,EAAWvF,EAAKsF,GAEtBtF,EAAKsF,GAAgBphB,EACrB9D,KAAKqF,YAAYxB,KAAKshB,KArB5B,CAAoC7d,EAwBpCvC,sMCnDA,SAAAtE,GAKE,SAAF2kB,EAAc/f,EACAyd,GACVriB,EAAJG,KAAAZ,KAAUqF,GALArF,KAAVuL,UAA8B,EACpBvL,KAAVqlB,gBAAoC,EAKhCrlB,KAAKkD,IAAIyI,EAAbC,kBAA+B5L,KAAM8iB,IARGxhB,GAAxC8jB,EAAA3kB,GAWY2kB,EAAZhjB,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAKuL,UACP9K,EAAN2B,UAAYyD,MAAZjF,KAAAZ,KAAkB8D,IAINshB,EAAZhjB,UAAA2D,UAAE,WACM/F,KAAKqlB,eACP5kB,EAAN2B,UAAY2D,UAAZnF,KAAAZ,MAEMA,KAAK6B,eAITujB,EAAFhjB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKuL,UAAW,GAGlB6Z,EAAFhjB,UAAAiF,eAAE,WACErH,KAAKqlB,gBAAiB,EAClBrlB,KAAKoF,WACP3E,EAAN2B,UAAY2D,UAAZnF,KAAAZ,OAlCA,CAAwC8L,EAqCxCjF,2MCxCA,SAAApG,GAIE,SAAF6kB,EAAcjgB,EACQuR,GAClBnW,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtB4W,UAAsBA,EAJZ5W,KAAVulB,UAA8B,EACpBvlB,KAAVsC,MAA0B,EAFWhB,GAArCgkB,EAAA7kB,GASY6kB,EAAZljB,UAAAyD,MAAE,SAAgB/B,GACd,IAAMuB,EAAcrF,KAAKqF,YACrBrF,KAAKulB,UACPvlB,KAAKwlB,iBAAiB1hB,GAGnB9D,KAAKulB,UACRlgB,EAAYxB,KAAKC,IAIbwhB,EAAVljB,UAAAojB,iBAAE,SAAyB1hB,GACvB,IACE,IAAMyG,EAASvK,KAAK4W,UAAU9S,EAAO9D,KAAKsC,SAC1CtC,KAAKulB,SAAWjL,QAAQ/P,GACxB,MAAO1J,GACPb,KAAKqF,YAAYtB,MAAMlD,KAzB7B,CAAqCyG,EA4BrCvC,sMCqBA,SAAAtE,GAIE,SAAFglB,EAAcpgB,EACQgN,EACA+D,GAClB3V,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBqS,QAAsBA,EACArS,KAAtBoW,eAAsBA,EALZpW,KAAVsC,MAA0B,EADiBhB,GAA3CmkB,EAAAhlB,GAUYglB,EAAZrjB,UAAAyD,MAAE,SAAgB/B,GACd,IAAIyG,EACEjI,EAAQtC,KAAKsC,QACnB,IACEiI,EAASvK,KAAKqS,QAAQvO,EAAOxB,GAC7B,MAAOyB,GAEP,YADA/D,KAAKqF,YAAYtB,MAAMA,GAGzB/D,KAAKyW,UAAUlM,EAAQzG,EAAOxB,IAGxBmjB,EAAVrjB,UAAAqU,UAAE,SAAkBlM,EAA4BzG,EAAUxB,GACtD,IAAMoJ,EAAoB1L,KAAK0L,kBAC3BA,GACFA,EAAkB7J,cAEpB7B,KAAKkD,IAAIlD,KAAK0L,kBAAoBC,EAAtCC,kBAAwD5L,KAAMuK,EAAQzG,EAAOxB,KAGjEmjB,EAAZrjB,UAAA2D,UAAE,WACS,IAAX2F,EAAA1L,KAAA0L,kBACSA,IAAqBA,EAAkB5J,QAC1CrB,EAAN2B,UAAY2D,UAAZnF,KAAAZ,OAIYylB,EAAZrjB,UAAAF,aAAE,WACElC,KAAK0L,kBAAoB,MAG3B+Z,EAAFrjB,UAAAiF,eAAE,SAAeF,GACbnH,KAAKwC,OAAO2E,GACZnH,KAAK0L,kBAAoB,KACrB1L,KAAKoF,WACP3E,EAAN2B,UAAY2D,UAAZnF,KAAAZ,OAIEylB,EAAFrjB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACLnH,KAAKoW,eACPpW,KAAK0lB,eAAe3e,EAAYC,EAAYC,EAAYC,GAExDlH,KAAKqF,YAAYxB,KAAKmD,IAIlBye,EAAVrjB,UAAAsjB,eAAE,SAAuB3e,EAAeC,EAAeC,EAAoBC,GACvE,IAAIqD,EACJ,IACEA,EAASvK,KAAKoW,eAAerP,EAAYC,EAAYC,EAAYC,GACjE,MAAOrG,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IAnE1B,CAA2CuB,EAqE3CjF,2MC3EA,SAAApG,GAIE,SAAFklB,EAActgB,EACQugB,EACAxP,GAClB3V,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB4lB,MAAsBA,EACA5lB,KAAtBoW,eAAsBA,EALZpW,KAAVsC,MAA0B,EADmBhB,GAA7CqkB,EAAAllB,GAUYklB,EAAZvjB,UAAAyD,MAAE,SAAgB/B,GACd,IAAM4H,EAAoB1L,KAAK0L,kBAC3BA,GACFA,EAAkB7J,cAEpB7B,KAAKkD,IAAIlD,KAAK0L,kBAAoBC,EAAtCC,kBAAwD5L,KAAMA,KAAK4lB,MAAO9hB,EAAO9D,KAAKsC,WAG1EqjB,EAAZvjB,UAAA2D,UAAE,WACS,IAAX2F,EAAA1L,KAAA0L,kBACSA,IAAqBA,EAAkB5J,QAC1CrB,EAAN2B,UAAY2D,UAAZnF,KAAAZ,OAIY2lB,EAAZvjB,UAAAF,aAAE,WACElC,KAAK0L,kBAAoB,MAG3Bia,EAAFvjB,UAAAiF,eAAE,SAAeF,GACbnH,KAAKwC,OAAO2E,GACZnH,KAAK0L,kBAAoB,KACrB1L,KAAKoF,WACP3E,EAAN2B,UAAY2D,UAAZnF,KAAAZ,OAIE2lB,EAAFvjB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACT,IAAQiP,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YACQ+Q,EACFpW,KAAK6lB,kBAAkB9e,EAAYC,EAAYC,EAAYC,GAE3D7B,EAAYxB,KAAKmD,IAIb2e,EAAVvjB,UAAAyjB,kBAAE,SAA0B9e,EAAeC,EACfC,EAAoBC,GAC5C,IACIqD,EADI6L,EAAZpW,KAAAoW,eAA4B/Q,EAA5BrF,KAAAqF,YAEI,IACEkF,EAAS6L,EAAerP,EAAYC,EAAYC,EAAYC,GAC5D,MAAOrG,GAEP,YADAwE,EAAYtB,MAAMlD,GAIpBwE,EAAYxB,KAAK0G,IA3DrB,CAA6CuB,EA6D7CjF,uMCnGgB,IAAhBif,GAAA,SAAwBrW,GACtB,OAAO,SAAC/G,GACN,OAAc,IAAV+G,EACK,IAAIyC,GAAjBN,gBAEalJ,EAAOF,KAAK,IAAIud,GAAatW,MAK1CsW,GAAA,WACE,SAAFA,EAAsBpG,GAClB,GADkB3f,KAAtB2f,MAAsBA,EACd3f,KAAK2f,MAAQ,EACf,MAAM,IAAIlF,GAAhBF,wBAOA,OAHEwL,EAAF3jB,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAIye,GAAepgB,EAAY5F,KAAK2f,SAEhEoG,EAVA,GAiBAC,GAAA,SAAAvlB,GAGE,SAAFulB,EAAc3gB,EAAoCsa,GAC9Clf,EAAJG,KAAAZ,KAAUqF,GADwCrF,KAAlD2f,MAAkDA,EAFxC3f,KAAVyP,MAA0B,EAiB1B,OAlBgCnO,GAAhC0kB,EAAAvlB,GAOYulB,EAAZ5jB,UAAAyD,MAAE,SAAgB/B,GACd,IAAM6b,EAAQ3f,KAAK2f,MACblQ,IAAUzP,KAAKyP,MACjBA,GAASkQ,IACX3f,KAAKqF,YAAYxB,KAAKC,GAClB2L,IAAUkQ,IACZ3f,KAAKqF,YAAYrB,WACjBhE,KAAK6B,iBAIbmkB,EAlBA,CAAgC1e,EAkBhCvC,iNC1CgB,IAAhBkhB,GAAA,SAA6BnD,GAC3B,OAAO,SAACpa,GAA0B,OAAAA,EAAOF,KAAK,IAAI0d,GAAkBpD,MAGtEoD,GAAA,WACE,SAAFA,EAAsBpD,GAAA9iB,KAAtB8iB,SAAsBA,EAMtB,OAHEoD,EAAF9jB,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAI4e,GAAoBvgB,EAAY5F,KAAK8iB,YAErEoD,EAPA,GAcAC,GAAA,SAAA1lB,GAEE,SAAF0lB,EAAc9gB,EACQyd,GAClBriB,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtB8iB,SAAsBA,EAElB9iB,KAAKkD,IAAIyI,EAAbC,kBAA+B5L,KAAM8iB,IAYrC,OAjBwCxhB,GAAxC6kB,EAAA1lB,GAQE0lB,EAAF/jB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKgE,YAGPmiB,EAAF/jB,UAAAiF,eAAE,aAGF8e,EAjBA,CAAwCra,EAiBxCjF,+NCnBA,SAAApG,GAGE,SAAF2lB,EAAc/gB,EACQuR,GAClBnW,EAAJG,KAAAZ,KAAUqF,GADYrF,KAAtB4W,UAAsBA,EAHZ5W,KAAVsC,MAA0B,EADWhB,GAArC8kB,EAAA3lB,GAQY2lB,EAAZhkB,UAAAyD,MAAE,SAAgB/B,GACd,IACIyG,EADElF,EAAcrF,KAAKqF,YAEzB,IACEkF,EAASvK,KAAK4W,UAAU9S,EAAO9D,KAAKsC,SACpC,MAAOzB,GAEP,YADAwE,EAAYtB,MAAMlD,GAGpBb,KAAKqmB,eAAeviB,EAAOyG,IAGrB6b,EAAVhkB,UAAAikB,eAAE,SAAuBviB,EAAUwiB,GAC/B,IAAMjhB,EAAcrF,KAAKqF,YACrBiV,QAAQgM,GACVjhB,EAAYxB,KAAKC,GAEjBuB,EAAYrB,YAzBlB,CAAqCsD,EA4BrCvC,kMCnCgB,IAAhBwhB,GAAA,SAAuB9e,EACA1D,EACAC,GACrB,OAAO,SAA6B0E,GAClC,OAAOA,EAAOF,KAAK,IAAIge,GAAW/e,EAAgB1D,EAAOC,MAI7DwiB,GAAA,WACE,SAAFA,EAAsB/e,EACA1D,EACAC,GAFAhE,KAAtByH,eAAsBA,EACAzH,KAAtB+D,MAAsBA,EACA/D,KAAtBgE,SAAsBA,EAKtB,OAHEwiB,EAAFpkB,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UAAU,IAAIkf,GAAa7gB,EAAY5F,KAAKyH,eAAgBzH,KAAK+D,MAAO/D,KAAKgE,YAE/FwiB,EARA,GAeAC,GAAA,SAAAhmB,GAIE,SAAFgmB,EAAcphB,EACAoC,EACA1D,EACAC,GACVvD,EAAJG,KAAAZ,KAAUqF,GAEN,IAAMqhB,EAAiB,IAAIpf,EAA/BvC,WAA6C0C,EAAgB1D,EAAOC,GAChE0iB,EAAevhB,oBAAqB,EACpCnF,KAAKkD,IAAIwjB,GACT1mB,KAAK0mB,eAAiBA,EAgC1B,OA7C8BplB,GAA9BmlB,EAAAhmB,GAgBYgmB,EAAZrkB,UAAAyD,MAAE,SAAgB/B,GACN,IAAZ4iB,EAAA1mB,KAAA0mB,eACIA,EAAe7iB,KAAKC,GAChB4iB,EAAexhB,gBACjBlF,KAAKqF,YAAYtB,MAAM2iB,EAAezhB,gBAEtCjF,KAAKqF,YAAYxB,KAAKC,IAIhB2iB,EAAZrkB,UAAA0D,OAAE,SAAiBjF,GACP,IAAZ6lB,EAAA1mB,KAAA0mB,eACIA,EAAe3iB,MAAMlD,GACjB6lB,EAAexhB,gBACjBlF,KAAKqF,YAAYtB,MAAM2iB,EAAezhB,gBAEtCjF,KAAKqF,YAAYtB,MAAMlD,IAIjB4lB,EAAZrkB,UAAA2D,UAAE,WACU,IAAZ2gB,EAAA1mB,KAAA0mB,eACIA,EAAe1iB,WACX0iB,EAAexhB,gBACjBlF,KAAKqF,YAAYtB,MAAM2iB,EAAezhB,gBAEtCjF,KAAKqF,YAAYrB,YAGvByiB,EA7CA,CAA8Bnf,EA6C9BvC,sOCzGaJ,EAAbgiB,sBAAqD,CACnDC,SAAS,EACTC,UAAU,GA2CIliB,EAAhBmiB,SAAA,SAA4Bxb,EACApC,GAC1B,YADF,IAAAA,IAA4BA,EAA5BvE,EAAAgiB,uBACS,SAACje,GAA0B,OAAAA,EAAOF,KAAK,IAAIue,EAAiBzb,EAAkBpC,EAAO0d,QAAS1d,EAAO2d,aAG9G,IAAAE,EAAA,WACE,SAAFA,EAAsBzb,EACAsb,EACAC,GAFA7mB,KAAtBsL,iBAAsBA,EACAtL,KAAtB4mB,QAAsBA,EACA5mB,KAAtB6mB,SAAsBA,EAQtB,OALEE,EAAF3kB,UAAAxB,KAAE,SAAKgF,EAA2B8C,GAC9B,OAAOA,EAAOnB,UACZ,IAAIyf,EAAmBphB,EAAY5F,KAAKsL,iBAAkBtL,KAAK4mB,QAAS5mB,KAAK6mB,YAGnFE,EAXA,GAkBAC,EAAA,SAAAvmB,GAKE,SAAFumB,EAAwB3hB,EACFiG,EACA2b,EACAC,GAClBzmB,EAAJG,KAAAZ,KAAUqF,GAJcrF,KAAxBqF,YAAwBA,EACFrF,KAAtBsL,iBAAsBA,EACAtL,KAAtBinB,SAAsBA,EACAjnB,KAAtBknB,UAAsBA,EALZlnB,KAAVmnB,mBAA8B,EAwE9B,OA3EuC7lB,EAAvC0lB,EAAAvmB,GAYYumB,EAAZ5kB,UAAAyD,MAAE,SAAgB/B,GACd,GAAI9D,KAAKwL,UACHxL,KAAKknB,YACPlnB,KAAKmnB,mBAAoB,EACzBnnB,KAAKonB,eAAiBtjB,OAEnB,CACL,IAAM2H,EAAWzL,KAAKqnB,oBAAoBvjB,GACtC2H,GACFzL,KAAKkD,IAAIlD,KAAKwL,UAAYG,EAAlCC,kBAAoD5L,KAAMyL,IAEhDzL,KAAKinB,WACPjnB,KAAKqF,YAAYxB,KAAKC,GAClB9D,KAAKknB,YACPlnB,KAAKmnB,mBAAoB,EACzBnnB,KAAKonB,eAAiBtjB,MAMtBkjB,EAAV5kB,UAAAilB,oBAAE,SAA4BvjB,GAC1B,IACE,OAAO9D,KAAKsL,iBAAiBxH,GAC7B,MAAOjD,GAEP,OADAb,KAAKqF,YAAYtB,MAAMlD,GAChB,OAIDmmB,EAAZ5kB,UAAAF,aAAE,WACE,IAAQsJ,EAAZxL,KAAAwL,UAAAxL,KAAAonB,eAAApnB,KAAAmnB,kBAAAnnB,KAAAknB,UAEIlnB,KAAKonB,eAAiB,KACtBpnB,KAAKmnB,mBAAoB,EAErB3b,IACFxL,KAAKwC,OAAOgJ,GACZxL,KAAKwL,UAAY,KACjBA,EAAU3J,gBAINmlB,EAAV5kB,UAAAklB,cAAE,WACE,IAAAzD,EAAJ7jB,KAAYqF,EAAZwe,EAAAxe,YAAyBmG,EAAzBqY,EAAArY,UAAoC0b,EAApCrD,EAAAqD,UAA+CE,EAA/CvD,EAAAuD,eAA+DD,EAA/DtD,EAAAsD,kBACQ3b,GAAa0b,GAAaC,IAC5B9hB,EAAYxB,KAAKujB,GACjBpnB,KAAKonB,eAAiB,KACtBpnB,KAAKmnB,mBAAoB,IAI7BH,EAAF5kB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKsnB,gBACLtnB,KAAKkC,gBAGP8kB,EAAF5kB,UAAAiF,eAAE,WACErH,KAAKsnB,gBACLtnB,KAAKkC,gBAET8kB,EA3EA,CAAuClb,EA2EvCjF,mPCtFA,SAAApG,GAKE,SAAF8mB,EAAcliB,EACQoG,EACAO,EACA4a,EACAC,GAClBpmB,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtByL,SAAsBA,EACAzL,KAAtBgM,UAAsBA,EACAhM,KAAtB4mB,QAAsBA,EACA5mB,KAAtB6mB,SAAsBA,EAPZ7mB,KAAVmnB,mBAAuC,EAC7BnnB,KAAVonB,eAA8B,KAHU9lB,GAAxCimB,EAAA9mB,GAaY8mB,EAAZnlB,UAAAyD,MAAE,SAAgB/B,GACV9D,KAAKwL,UACHxL,KAAK6mB,WACP7mB,KAAKonB,eAAiBtjB,EACtB9D,KAAKmnB,mBAAoB,IAG3BnnB,KAAKkD,IAAIlD,KAAKwL,UAAYxL,KAAKgM,UAAUE,SAAS2G,GAAc7S,KAAKyL,SAAU,CAAE7F,WAAY5F,QACzFA,KAAK4mB,SACP5mB,KAAKqF,YAAYxB,KAAKC,KAK5ByjB,EAAFnlB,UAAAyJ,cAAE,WACE,IAAML,EAAYxL,KAAKwL,UACnBA,IACExL,KAAK6mB,UAAY7mB,KAAKmnB,oBACxBnnB,KAAKqF,YAAYxB,KAAK7D,KAAKonB,gBAC3BpnB,KAAKonB,eAAiB,KACtBpnB,KAAKmnB,mBAAoB,GAE3B3b,EAAU3J,cACV7B,KAAKwC,OAAOgJ,GACZxL,KAAKwL,UAAY,OArCvB,CAAwClE,EAwCxCvC,YAMA,SAAAyiB,GAAyB3W,GACzBA,EAAAjL,WACaiG,4MC9Gb4b,GACE,SAAmB3jB,EAAiB4jB,GAAjB1nB,KAArB8D,MAAqBA,EAAiB9D,KAAtC0nB,SAAsCA,OAoBtC,SAAAjnB,GAGE,SAAFknB,EAActiB,EAAkD2G,GAC5DvL,EAAJG,KAAAZ,KAAUqF,GADsDrF,KAAhEgM,UAAgEA,EAFtDhM,KAAV4nB,SAA6B,EAKzB5nB,KAAK4nB,SAAW5b,EAAUsB,MANUhM,GAAxCqmB,EAAAlnB,GASYknB,EAAZvlB,UAAAyD,MAAE,SAAgB/B,GACd,IAAIwJ,EAAMtN,KAAKgM,UAAUsB,MACrBua,EAAOva,EAAMtN,KAAK4nB,SACtB5nB,KAAK4nB,SAAWta,EAEhBtN,KAAKqF,YAAYxB,KAAK,IAAI4jB,GAAa3jB,EAAO+jB,KAdlD,CAAwCvgB,EAgBxCvC,sMCzCA,SAAAtE,GACE,SAAFqnB,IACI,IAAMjnB,EAAWJ,EAArBG,KAAAZ,KAA2B,wBAChBA,KAAMmB,KAAON,EAAIM,KAAO,eACxBnB,KAAMoB,MAAQP,EAAIO,MAClBpB,KAAMqB,QAAUR,EAAIQ,QALGC,GAAlCwmB,EAAArnB,GAAA,CAAkCK,iMC+FlC,SAAAL,GAIE,SAAFsnB,EAAc1iB,EACQ2iB,EACAC,EACAjc,EACAkc,GAClBznB,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtBgoB,gBAAsBA,EACAhoB,KAAtBioB,QAAsBA,EACAjoB,KAAtBgM,UAAsBA,EACAhM,KAAtBkoB,cAAsBA,EANZloB,KAAV2N,OAAiD,KAQ7C3N,KAAKmoB,kBAV0B7mB,GAAnCymB,EAAAtnB,GAaiBsnB,EAAjBK,gBAAE,SAAkCxiB,GAChCA,EAAW7B,MAAM6B,EAAWsiB,gBAGtBH,EAAV3lB,UAAA+lB,gBAAE,WACU,IAAZxa,EAAA3N,KAAA2N,OACQA,EAMF3N,KAAK2N,OAAyCA,EAAOzB,SAASlM,KAAMA,KAAKioB,SAEzEjoB,KAAKkD,IAAIlD,KAAK2N,OAAyC3N,KAAKgM,UAAUE,SACpE6b,EAAkBK,gBAAiBpoB,KAAKioB,QAASjoB,QAK7C+nB,EAAZ3lB,UAAAyD,MAAE,SAAgB/B,GACT9D,KAAKgoB,iBACRhoB,KAAKmoB,kBAEP1nB,EAAJ2B,UAAUyD,MAAVjF,KAAAZ,KAAgB8D,IAGJikB,EAAZ3lB,UAAAF,aAAE,WACElC,KAAK2N,OAAS,KACd3N,KAAKgM,UAAY,KACjBhM,KAAKkoB,cAAgB,MA3CzB,CAAmC5gB,EA6CnCvC,sMCtDA,SAAAtE,GAIE,SAAF4nB,EAAchjB,EACQ2iB,EACAC,EACAK,EACAtc,GAClBvL,EAAJG,KAAAZ,KAAUqF,GAJYrF,KAAtBgoB,gBAAsBA,EACAhoB,KAAtBioB,QAAsBA,EACAjoB,KAAtBsoB,eAAsBA,EACAtoB,KAAtBgM,UAAsBA,EANZhM,KAAV2N,OAAwD,KAQpD3N,KAAKmoB,kBAViC7mB,GAA1C+mB,EAAA5nB,GAaiB4nB,EAAjBD,gBAAE,SAAqCxiB,GAC3B,IAAZ0iB,EAAA1iB,EAAA0iB,eACW1iB,EAAYI,yBACnBJ,EAAW1C,IAAIyI,EAAnBC,kBAAqChG,EAAY0iB,KAGvCD,EAAVjmB,UAAA+lB,gBAAE,WACU,IAAZxa,EAAA3N,KAAA2N,OACQA,EAMF3N,KAAK2N,OAAgDA,EAAOzB,SAASlM,KAAMA,KAAKioB,SAEhFjoB,KAAKkD,IAAIlD,KAAK2N,OAAgD3N,KAAKgM,UAAUE,SAC3Emc,EAAsBD,gBAAiBpoB,KAAKioB,QAASjoB,QAKjDqoB,EAAZjmB,UAAAyD,MAAE,SAAgB/B,GACT9D,KAAKgoB,iBACRhoB,KAAKmoB,kBAEP1nB,EAAJ2B,UAAUyD,MAAVjF,KAAAZ,KAAgB8D,IAGJukB,EAAZjmB,UAAAF,aAAE,WACElC,KAAK2N,OAAS,KACd3N,KAAKgM,UAAY,KACjBhM,KAAKsoB,eAAiB,MA7C1B,CAA0Cxc,EA+C1CjF,2MCrEA,SAAApG,GAIE,SAAF8nB,EAAcljB,GACV5E,EAAJG,KAAAZ,KAAUqF,GAHArF,KAAVkE,OAA+B,IAAIma,GAAnC5B,QAIIpX,EAAYxB,KAAK7D,KAAKkE,QANQ5C,GAAlCinB,EAAA9nB,GASE8nB,EAAFnmB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKwoB,cAGPD,EAAFnmB,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAK8F,OAAO/B,IAGdwkB,EAAFnmB,UAAAiF,eAAE,SAAeF,GACbnH,KAAK+F,aAGGwiB,EAAZnmB,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKkE,OAAOL,KAAKC,IAGTykB,EAAZnmB,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKkE,OAAOH,MAAMlD,GAClBb,KAAKqF,YAAYtB,MAAMlD,IAGf0nB,EAAZnmB,UAAA2D,UAAE,WACE/F,KAAKkE,OAAOF,WACZhE,KAAKqF,YAAYrB,YAGTukB,EAAZnmB,UAAAF,aAAE,WACElC,KAAKkE,OAAS,MAGRqkB,EAAVnmB,UAAAomB,WAAE,WACE,IAAMC,EAAazoB,KAAKkE,OACpBukB,GACFA,EAAWzkB,WAEb,IAAMqB,EAAcrF,KAAKqF,YACnBqjB,EAAY1oB,KAAKkE,OAAS,IAAIma,GAAxC5B,QACIpX,EAAYxB,KAAK6kB,IAhDrB,CAAkC5c,EAkDlCjF,2MC5CA,SAAApG,GAIE,SAAFkoB,EAAwBtjB,EACFujB,EACAC,GAClBpoB,EAAJG,KAAAZ,KAAUqF,GAHcrF,KAAxBqF,YAAwBA,EACFrF,KAAtB4oB,WAAsBA,EACA5oB,KAAtB6oB,iBAAsBA,EALZ7oB,KAAV8oB,QAAkC,CAAE,IAAIzK,GAAxC5B,SACUzc,KAAVyP,MAA0B,EAMtBpK,EAAYxB,KAAK7D,KAAK8oB,QAAQ,IARKxnB,GAAvCqnB,EAAAloB,GAWYkoB,EAAZvmB,UAAAyD,MAAE,SAAgB/B,GAOd,IANA,IAAM+kB,EAA4C,EAAxB7oB,KAAK6oB,iBAAwB7oB,KAAK6oB,iBAAmB7oB,KAAK4oB,WAC9EvjB,EAAcrF,KAAKqF,YACnBujB,EAAa5oB,KAAK4oB,WAClBE,EAAU9oB,KAAK8oB,QACfvmB,EAAMumB,EAAQtoB,OAEXQ,EAAI,EAAGA,EAAIuB,IAAQvC,KAAK8B,OAAQd,IACvC8nB,EAAQ9nB,GAAG6C,KAAKC,GAElB,IAAMilB,EAAI/oB,KAAKyP,MAAQmZ,EAAa,EAIpC,GAHS,GAALG,GAAUA,EAAIF,GAAqB,IAAM7oB,KAAK8B,QAChDgnB,EAAQlb,QAAQ5J,aAEZhE,KAAKyP,MAAQoZ,GAAqB,IAAM7oB,KAAK8B,OAAQ,CACzD,IAAMknB,EAAS,IAAI3K,GAAzB5B,QACMqM,EAAQ7lB,KAAK+lB,GACb3jB,EAAYxB,KAAKmlB,KAIXL,EAAZvmB,UAAA0D,OAAE,SAAiBjF,GACf,IAAMioB,EAAU9oB,KAAK8oB,QACrB,GAAIA,EACF,KAAwB,EAAjBA,EAAQtoB,SAAeR,KAAK8B,QACjCgnB,EAAQlb,QAAQ7J,MAAMlD,GAG1Bb,KAAKqF,YAAYtB,MAAMlD,IAGf8nB,EAAZvmB,UAAA2D,UAAE,WACE,IAAM+iB,EAAU9oB,KAAK8oB,QACrB,GAAIA,EACF,KAAwB,EAAjBA,EAAQtoB,SAAeR,KAAK8B,QACjCgnB,EAAQlb,QAAQ5J,WAGpBhE,KAAKqF,YAAYrB,YAGT2kB,EAAZvmB,UAAAF,aAAE,WACElC,KAAKyP,MAAQ,EACbzP,KAAK8oB,QAAU,MAtDnB,CAAuCxhB,EAwDvCvC,kMCcAkkB,GAAA,SAAAxoB,GAAA,SAAAwoB,IAAgCxoB,EAAhCV,MAAAC,KAAAC,WACUD,KAAVkpB,sBAA0C,EAU1C,OAXgC5nB,GAAhC2nB,EAAAxoB,GAGEwoB,EAAF7mB,UAAAyB,KAAE,SAAKC,GACH9D,KAAKkpB,wBACLzoB,EAAJ2B,UAAUyB,KAAVjD,KAAAZ,KAAe8D,IAGbwC,OAAFkT,eAAMyP,EAAN7mB,UAAA,uBAAA,CAAAqX,IAAE,WACE,OAAOzZ,KAAKkpB,uDAEhBD,EAXA,CAAgC5K,GAWhC5B,UAOA,SAAAhc,GAGE,SAAF0oB,EAAwB9jB,EACF+jB,EACAC,EACAC,EACAtd,GAClBvL,EAAJG,KAAAZ,KAAUqF,GALcrF,KAAxBqF,YAAwBA,EACFrF,KAAtBopB,eAAsBA,EACAppB,KAAtBqpB,uBAAsBA,EACArpB,KAAtBspB,cAAsBA,EACAtpB,KAAtBgM,UAAsBA,EANZhM,KAAV8oB,QAAyC,GASrC,IAAM5kB,EAASlE,KAAKwoB,aACpB,GAA+B,OAA3Ba,GAA6D,GAA1BA,EAA6B,CAClE,IAAMhZ,EAA4B,CAAEzK,WAAY5F,KAAMkE,OAA5DA,EAAoEmC,QAAc,MACtEiK,EAAkC,CAAE8Y,eAAhDA,EAAgEC,uBAAhEA,EAAwFzjB,WAAY5F,KAAMgM,UAA1GA,GACMhM,KAAKkD,IAAI8I,EAAUE,SAASqd,GAAqBH,EAAgB/Y,IACjErQ,KAAKkD,IAAI8I,EAAUE,SAASsd,GAAwBH,EAAwB/Y,QACvE,CACL,IAAMJ,EAA0C,CAAEtK,WAAY5F,KAAMkE,OAA1EA,EAAkFklB,eAAlFA,GACMppB,KAAKkD,IAAI8I,EAAUE,SAASud,GAA4BL,EAAgBlZ,KAlBxC5O,GAAtC6nB,EAAA1oB,GAsBY0oB,EAAZ/mB,UAAAyD,MAAE,SAAgB/B,GAGd,IAFA,IAAMglB,EAAU9oB,KAAK8oB,QACfvmB,EAAMumB,EAAQtoB,OACXQ,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAMgoB,EAASF,EAAQ9nB,GAClBgoB,EAAOlnB,SACVknB,EAAOnlB,KAAKC,GACRklB,EAAOU,sBAAwB1pB,KAAKspB,eACtCtpB,KAAK2pB,YAAYX,MAMfG,EAAZ/mB,UAAA0D,OAAE,SAAiBjF,GAEf,IADA,IAAMioB,EAAU9oB,KAAK8oB,QACG,EAAjBA,EAAQtoB,QACbsoB,EAAQlb,QAAQ7J,MAAMlD,GAExBb,KAAKqF,YAAYtB,MAAMlD,IAGfsoB,EAAZ/mB,UAAA2D,UAAE,WAEE,IADA,IAAM+iB,EAAU9oB,KAAK8oB,QACG,EAAjBA,EAAQtoB,QAAY,CACzB,IAAMopB,EAASd,EAAQlb,QAClBgc,EAAO9nB,QACV8nB,EAAO5lB,WAGXhE,KAAKqF,YAAYrB,YAGZmlB,EAAT/mB,UAAAomB,WAAE,WACE,IAAMtkB,EAAS,IAAI+kB,GAInB,OAHAjpB,KAAK8oB,QAAQ7lB,KAAKiB,GACElE,KAAKqF,YACbxB,KAAKK,GACVA,GAGFilB,EAAT/mB,UAAAunB,YAAE,SAAmBzlB,GACjBA,EAAOF,WACP,IAAM8kB,EAAU9oB,KAAK8oB,QACrBA,EAAQnlB,OAAOmlB,EAAQplB,QAAQQ,GAAS,IAlE5C,CAAsCoD,EAoEtCvC,YAEA,SAAA0kB,GAA2Etd,GACjE,IAAVvG,EAAAuG,EAAAvG,WAAsBwjB,EAAtBjd,EAAAid,eAAsCllB,EAAtCiI,EAAAjI,OACMA,GACF0B,EAAW+jB,YAAYzlB,GAEzBiI,EAAMjI,OAAS0B,EAAW4iB,aAC1BxoB,KAAKkM,SAASC,EAAOid,GAGvB,SAAAI,GAAmErd,GACzD,IAAVid,EAAAjd,EAAAid,eAA0BxjB,EAA1BuG,EAAAvG,WAAsCoG,EAAtCG,EAAAH,UAAiDqd,EAAjDld,EAAAkd,uBAGMhjB,EAAiC,CAAEsH,OADxB3N,KACgCqD,aAAmB,MAC5DwmB,EAA+B,CAAEjkB,WAAzCA,EAAqD1B,OAHpC0B,EAAW4iB,aAGiCniB,QAA7DA,GACEA,EAAQhD,aAAe2I,EAAUE,SAASqd,GAAqBH,EAAgBS,GAHhE7pB,KAIRkD,IAAImD,EAAQhD,cAJJrD,KAKRkM,SAASC,EAAOkd,GAGzB,SAAAE,GAAgCpd,GACtB,IAAVvG,EAAAuG,EAAAvG,WAAsB1B,EAAtBiI,EAAAjI,OAA8BmC,EAA9B8F,EAAA9F,QACMA,GAAWA,EAAQsH,QAAUtH,EAAQhD,cACvCgD,EAAQsH,OAAOnL,OAAO6D,EAAQhD,cAEhCuC,EAAW+jB,YAAYzlB,mMCnLzB,SAAAzD,GAIE,SAAFqpB,EAAczkB,EACQ0L,EACAC,GAClBvQ,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB+Q,SAAsBA,EACA/Q,KAAtBgR,gBAAsBA,EALZhR,KAAV+P,SAAyC,GAOrC/P,KAAKkD,IAAIlD,KAAK+pB,iBAAmBpe,EAArCC,kBAAuD5L,KAAM+Q,EAAUA,IAR5BzP,GAA3CwoB,EAAArpB,GAWYqpB,EAAZ1nB,UAAAyD,MAAE,SAAgB/B,GACN,IAAZiM,EAAA/P,KAAA+P,SACI,GAAIA,EAEF,IADA,IAAMxN,EAAMwN,EAASvP,OACZQ,EAAI,EAAGA,EAAIuB,EAAKvB,IACvB+O,EAAS/O,GAAGkD,OAAOL,KAAKC,IAKpBgmB,EAAZ1nB,UAAA0D,OAAE,SAAiBjF,GAEP,IAAZkP,EAAA/P,KAAA+P,SAGI,GAFA/P,KAAK+P,SAAW,KAEZA,EAIF,IAHA,IAAMxN,EAAMwN,EAASvP,OACjB8B,GAAS,IAEJA,EAAQC,GAAK,CACpB,IAAM8D,EAAU0J,EAASzN,GACzB+D,EAAQnC,OAAOH,MAAMlD,GACrBwF,EAAQhD,aAAaxB,cAIzBpB,EAAJ2B,UAAU0D,OAAVlF,KAAAZ,KAAiBa,IAGLipB,EAAZ1nB,UAAA2D,UAAE,WACU,IAAZgK,EAAA/P,KAAA+P,SAEI,GADA/P,KAAK+P,SAAW,KACZA,EAGF,IAFA,IAAMxN,EAAMwN,EAASvP,OACjB8B,GAAS,IACJA,EAAQC,GAAK,CACpB,IAAM8D,EAAU0J,EAASzN,GACzB+D,EAAQnC,OAAOF,WACfqC,EAAQhD,aAAaxB,cAGzBpB,EAAJ2B,UAAU2D,UAAVnF,KAAAZ,OAGY8pB,EAAZ1nB,UAAAF,aAAE,WACU,IAAZ6N,EAAA/P,KAAA+P,SAEI,GADA/P,KAAK+P,SAAW,KACZA,EAGF,IAFA,IAAMxN,EAAMwN,EAASvP,OACjB8B,GAAS,IACJA,EAAQC,GAAK,CACpB,IAAM8D,EAAU0J,EAASzN,GACzB+D,EAAQnC,OAAOrC,cACfwE,EAAQhD,aAAaxB,gBAK3BioB,EAAF1nB,UAAA0E,WAAE,SAAWC,EAAiBC,EACjBC,EAAoBC,EACpBC,GAET,GAAIJ,IAAe/G,KAAK+Q,SAAU,CAExB,IAAdC,EAAAhR,KAAAgR,gBACY9B,EAAkBvM,EAA9BC,SAAuCoO,EAATrO,CAA0BqE,GAElD,GAAIkI,IAAoBhP,EAA9BC,YACQ,OAAOH,KAAK+D,MAAM7D,EAA1BC,YAAsCN,GAE9B,IAAMmpB,EAAS,IAAI3K,GAA3B5B,QACcpZ,EAAe,IAAI4C,EAAjCrE,aACcyE,EAAU,CAAEnC,OAA1B8kB,EAAkC3lB,aAAlCA,GACQrD,KAAK+P,SAAS9M,KAAKoD,GACnB,IAAMqF,EAAoBC,EAAlCC,kBAAoD5L,KAAMkP,EAAiB7I,GAE/DqF,EAAkB5J,OACpB9B,KAAK2pB,YAAY3pB,KAAK+P,SAASvP,OAAS,IAEjCkL,EAAmBrF,QAAUA,EACpChD,EAAaH,IAAIwI,IAGnB1L,KAAKqF,YAAYxB,KAAKmlB,QAIxBhpB,KAAK2pB,YAAY3pB,KAAK+P,SAASrM,QAAQqD,KAI3C+iB,EAAF1nB,UAAAgF,YAAE,SAAYvG,GACVb,KAAK+D,MAAMlD,IAGbipB,EAAF1nB,UAAAiF,eAAE,SAAeue,GACTA,IAAU5lB,KAAK+pB,kBACjB/pB,KAAK2pB,YAAY3pB,KAAK+P,SAASrM,QAAekiB,EAAOvf,WAIjDyjB,EAAV1nB,UAAAunB,YAAE,SAAoBrnB,GAClB,IAAe,IAAXA,EAAJ,CAIQ,IAAZyN,EAAA/P,KAAA+P,SACU1J,EAAU0J,EAASzN,GAC7B4B,EAAAmC,EAAAnC,OAAoBb,EAApBgD,EAAAhD,aACI0M,EAASpM,OAAOrB,EAAO,GACvB4B,EAAOF,WACPX,EAAaxB,gBA1HjB,CAA2CiK,EA4H3CjF,2MCvIA,SAAApG,GAIE,SAAF8nB,EAAwBljB,EACF2L,GAClBvQ,EAAJG,KAAAZ,KAAUqF,GAFcrF,KAAxBqF,YAAwBA,EACFrF,KAAtBgR,gBAAsBA,EAElBhR,KAAKwoB,aAPyBlnB,GAAlCinB,EAAA9nB,GAUE8nB,EAAFnmB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKwoB,WAAWrhB,IAGlBohB,EAAFnmB,UAAAgF,YAAE,SAAYrD,EAAYoD,GACtBnH,KAAK8F,OAAO/B,IAGdwkB,EAAFnmB,UAAAiF,eAAE,SAAeF,GACbnH,KAAKwoB,WAAWrhB,IAGRohB,EAAZnmB,UAAAyD,MAAE,SAAgB/B,GACd9D,KAAKkE,OAAOL,KAAKC,IAGTykB,EAAZnmB,UAAA0D,OAAE,SAAiBjF,GACfb,KAAKkE,OAAOH,MAAMlD,GAClBb,KAAKqF,YAAYtB,MAAMlD,GACvBb,KAAKgqB,kCAGGzB,EAAZnmB,UAAA2D,UAAE,WACE/F,KAAKkE,OAAOF,WACZhE,KAAKqF,YAAYrB,WACjBhE,KAAKgqB,kCAGCzB,EAAVnmB,UAAA4nB,+BAAE,WACMhqB,KAAKiqB,qBACPjqB,KAAKiqB,oBAAoBpoB,eAIrB0mB,EAAVnmB,UAAAomB,WAAE,SAAmBrhB,QAArB,IAAAA,IAAqBA,EAArB,MACQA,IACFnH,KAAKwC,OAAO2E,GACZA,EAAStF,eAGX,IAAM4mB,EAAazoB,KAAKkE,OACpBukB,GACFA,EAAWzkB,WAGb,IAAME,EAASlE,KAAKkE,OAAS,IAAIma,GAArC5B,QACIzc,KAAKqF,YAAYxB,KAAKK,GAEtB,IAAMgL,EAAkBvM,EAA5BC,SAAqC5C,KAAKgR,gBAAdrO,GACxB,GAAIuM,IAAoBhP,EAA5BC,YAAyC,CACnC,IAAMU,EAAMX,EAAlBC,YAA8BN,EACxBG,KAAKqF,YAAYtB,MAAMlD,GACvBb,KAAKkE,OAAOH,MAAMlD,QAElBb,KAAKkD,IAAIlD,KAAKiqB,oBAAsBte,EAA1CC,kBAA4D5L,KAAMkP,KAlElE,CAAkCpD,EAqElCjF,2MClDA,SAAApG,GAIE,SAAFypB,EAAc7kB,EACQkN,EACAF,GAClB5R,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtBuS,YAAsBA,EACAvS,KAAtBqS,QAAsBA,EAJZrS,KAAVwS,UAAgC,GAM5B,IAAMjQ,EAAMgQ,EAAY/R,OACxBR,KAAKsS,OAAS,IAAIhS,MAAMiC,GAExB,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAKvB,IACvBhB,KAAKwS,UAAUvP,KAAKjC,GAGtB,IAASA,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAI4G,EAAa2K,EAAYvR,GAC7BhB,KAAKkD,IAAIyI,EAAfC,kBAAuC5L,KAAM4H,EAAiBA,EAAY5G,KAjB7BM,GAA7C4oB,EAAAzpB,GAqBEypB,EAAF9nB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKsS,OAAOrL,GAAcD,EAC1B,IAAMwL,EAAYxS,KAAKwS,UACvB,GAAuB,EAAnBA,EAAUhS,OAAY,CACxB,IAAM2pB,EAAQ3X,EAAU9O,QAAQuD,IACjB,IAAXkjB,GACF3X,EAAU7O,OAAOwmB,EAAO,KAK9BD,EAAF9nB,UAAAiF,eAAE,aAIU6iB,EAAZ9nB,UAAAyD,MAAE,SAAgB/B,GACd,GAA8B,IAA1B9D,KAAKwS,UAAUhS,OAAc,CAC/B,IAAM4pB,EAAO,CAACtmB,GAApBpC,OAA8B1B,KAAKsS,QACzBtS,KAAKqS,QACPrS,KAAK2S,YAAYyX,GAEjBpqB,KAAKqF,YAAYxB,KAAKumB,KAKpBF,EAAV9nB,UAAAuQ,YAAE,SAAoByX,GAClB,IAAI7f,EACJ,IACEA,EAASvK,KAAKqS,QAAQtS,MAAMC,KAAMoqB,GAClC,MAAOvpB,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IAzD1B,CAA6CuB,EA2D7CjF,uMCuFAwjB,IAjHA,SAAA5pB,GAME,SAAF6pB,EAAcjlB,EACAgN,EACAC,QAAd,IAAAA,IAAcA,EAAchM,OAAOX,OAAO,OACtClF,EAAJG,KAAAZ,KAAUqF,GANArF,KAAVuqB,UAAgD,GACtCvqB,KAAVyN,OAAmB,EAMfzN,KAAKqS,QAA8B,mBAAZA,EAA0BA,EAAU,KAC3DrS,KAAKsS,OAASA,EAXuBhR,GAAzCgpB,EAAA7pB,GAcY6pB,EAAZloB,UAAAyD,MAAE,SAAgB/B,GACd,IAAMymB,EAAYvqB,KAAKuqB,UACnB1nB,EAARtC,QAAgBuD,GACVymB,EAAUtnB,KAAK,IAAIunB,GAAoB1mB,IACI,mBAA3BA,EAAMiH,EAA5BnB,UACM2gB,EAAUtnB,KAAK,IAAIonB,GAAevmB,EAAMiH,EAA9CnB,cAEM2gB,EAAUtnB,KAAK,IAAIwnB,GAAkBzqB,KAAKqF,YAAarF,KAAM8D,KAIvDwmB,EAAZloB,UAAA2D,UAAE,WACE,IAAMwkB,EAAYvqB,KAAKuqB,UACjBhoB,EAAMgoB,EAAU/pB,OAEtB,GAAY,IAAR+B,EAAJ,CAKAvC,KAAKyN,OAASlL,EACd,IAAK,IAAIvB,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAI4I,EAA6C2gB,EAAUvpB,GACvD4I,EAAS8gB,kBACX1qB,KAAKkD,IAAI0G,EAASrC,UAAUqC,EAAU5I,IAEtChB,KAAKyN,eAVPzN,KAAKqF,YAAYrB,YAerBsmB,EAAFloB,UAAAuoB,eAAE,WACE3qB,KAAKyN,SACe,IAAhBzN,KAAKyN,QACPzN,KAAKqF,YAAYrB,YAIrBsmB,EAAFloB,UAAAwoB,eAAE,WAME,IALA,IAAML,EAAYvqB,KAAKuqB,UACjBhoB,EAAMgoB,EAAU/pB,OAChB6E,EAAcrF,KAAKqF,YAGhBrE,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAE5B,GAAiC,mBAD7B4I,EAAW2gB,EAAUvpB,IACLuK,WAA4B3B,EAAS2B,WACvD,OAIJ,IAAIsf,GAAiB,EACfT,EAAc,GACpB,IAASppB,EAAI,EAAGA,EAAIuB,EAAKvB,IAAK,CAC5B,IAAI4I,EACAW,GADAX,EAAW2gB,EAAUvpB,IACH6C,OAQtB,GAJI+F,EAAS2M,iBACXsU,GAAiB,GAGftgB,EAAOU,KAET,YADA5F,EAAYrB,WAIdomB,EAAKnnB,KAAKsH,EAAOzG,OAGf9D,KAAKqS,QACPrS,KAAK2S,YAAYyX,GAEjB/kB,EAAYxB,KAAKumB,GAGfS,GACFxlB,EAAYrB,YAINsmB,EAAZloB,UAAAuQ,YAAE,SAAsByX,GACpB,IAAI7f,EACJ,IACEA,EAASvK,KAAKqS,QAAQtS,MAAMC,KAAMoqB,GAClC,MAAOvpB,GAEP,YADAb,KAAKqF,YAAYtB,MAAMlD,GAGzBb,KAAKqF,YAAYxB,KAAK0G,IAxG1B,CAAyCjD,EA0GzCvC,YAOA,WAGE,SAAFslB,EAAsBzgB,GAAA5J,KAAtB4J,SAAsBA,EAClB5J,KAAK8qB,WAAalhB,EAAS/F,OAiB/B,OAdEwmB,EAAFjoB,UAAAmJ,SAAE,WACE,OAAO,GAGT8e,EAAFjoB,UAAAyB,KAAE,WACE,IAAM0G,EAASvK,KAAK8qB,WAEpB,OADA9qB,KAAK8qB,WAAa9qB,KAAK4J,SAAS/F,OACzB0G,GAGT8f,EAAFjoB,UAAAmU,aAAE,WACE,IAAMuU,EAAa9qB,KAAK8qB,WACxB,OAAOA,GAAcA,EAAW7f,MAEpCof,EArBA,IAuBAG,GAAA,WAIE,SAAFA,EAAsB1Y,GAAA9R,KAAtB8R,MAAsBA,EAHZ9R,KAAVsC,MAAkB,EACRtC,KAAVQ,OAAmB,EAGfR,KAAKQ,OAASsR,EAAMtR,OAoBxB,OAjBEgqB,EAAFpoB,UAAG2I,EAAHnB,UAAE,WACE,OAAO5J,MAGTwqB,EAAFpoB,UAAAyB,KAAE,SAAKC,GACH,IAAM9C,EAAIhB,KAAKsC,QACTwP,EAAQ9R,KAAK8R,MACnB,OAAO9Q,EAAIhB,KAAKQ,OAAS,CAAEsD,MAAOgO,EAAM9Q,GAAIiK,MAAM,GAAU,CAAEnH,MAAO,KAAMmH,MAAM,IAGnFuf,EAAFpoB,UAAAmJ,SAAE,WACE,OAAOvL,KAAK8R,MAAMtR,OAASR,KAAKsC,OAGlCkoB,EAAFpoB,UAAAmU,aAAE,WACE,OAAOvW,KAAK8R,MAAMtR,SAAWR,KAAKsC,OAEtCkoB,EAzBA,GAgCAC,GAAA,SAAAhqB,GAKE,SAAFgqB,EAAcplB,EACQzB,EACAgE,GAClBnH,EAAJG,KAAAZ,KAAUqF,GAFYrF,KAAtB4D,OAAsBA,EACA5D,KAAtB4H,WAAsBA,EANpB5H,KAAF0qB,mBAAsB,EACpB1qB,KAAFmP,OAAgB,GACdnP,KAAFskB,YAAe,EAkDf,OArDsChjB,GAAtCmpB,EAAAhqB,GAWEgqB,EAAFroB,UAAG2I,EAAHnB,UAAE,WACE,OAAO5J,MAKTyqB,EAAFroB,UAAAyB,KAAE,WACE,IAAMsL,EAASnP,KAAKmP,OACpB,OAAsB,IAAlBA,EAAO3O,QAAgBR,KAAKskB,WACvB,CAAExgB,MAAO,KAAMmH,MAAM,GAErB,CAAEnH,MAAOqL,EAAOvB,QAAS3C,MAAM,IAI1Cwf,EAAFroB,UAAAmJ,SAAE,WACE,OAA4B,EAArBvL,KAAKmP,OAAO3O,QAGrBiqB,EAAFroB,UAAAmU,aAAE,WACE,OAA8B,IAAvBvW,KAAKmP,OAAO3O,QAAgBR,KAAKskB,YAG1CmG,EAAFroB,UAAAiF,eAAE,WAC2B,EAArBrH,KAAKmP,OAAO3O,QACdR,KAAKskB,YAAa,EAClBtkB,KAAK4D,OAAO+mB,kBAEZ3qB,KAAKqF,YAAYrB,YAIrBymB,EAAFroB,UAAA0E,WAAE,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTnH,KAAKmP,OAAOlM,KAAK+D,GACjBhH,KAAK4D,OAAOgnB,kBAGdH,EAAFroB,UAAAmF,UAAE,SAAUzD,EAAYxB,GACpB,OAAOqJ,EAAXC,kBAAuC5L,KAAMA,KAAK4H,WAAY5H,KAAMsC,IAEpEmoB,EArDA,CAAsC3e,EAqDtCjF,iBCvUAkkB,GAAAC,GAAAD,aACAE,GAKAC,GAAAD,qBACAE,GAMAC,GAAAD,OACApqB,GAQAsqB,GAAAtqB,IACAuqB,GAgCAC,GAAAD,YACAE,GAgBAC,GAAAD,KACAE,GACAC,GAAAD,UACAE,GACAC,GAAAD,IACAE,GAAAhF,SCrFA,SAAAiF,GAFCrjB,GAGA,OAFOH,EAAAA,WAAW5C,OAAO,SAAC+O,GAGzB,IAFMsX,EAAatjB,EAAO,SAAA7I,GAGzB6U,EAFS7Q,KAAKhE,KAKf,OAFO,WAAM,OAAAmsB,EAAWC,aCR1B,IACCC,GAAA,IAAAC,EAAAA,eAAA,uBCEAC,GAAA,IAAAD,EAAAA,eAAA,yBCIDE,GAAA,WAqCA,SAAAA,EAJYC,EACAC,EACFC,GAFExsB,KAAZssB,oBAAYA,EACAtsB,KAAZusB,cAAYA,EACFvsB,KAAVwsB,KAAUA,EAvBDxsB,KAATysB,aAAwB,IAAIhQ,EAAAA,QAG3Bzc,KAAD0sB,YADe1sB,KAAKysB,aAAazP,eAGhChd,KAAD2sB,WADcpkB,EAAAA,WAAW5C,OAAO,SAAC+O,GAE/B,IADMkY,EAASC,SAASC,cAAc,UAEtCF,EADOG,KAAO,kBAEdH,EADOI,IAAM,oBAEbJ,EADOK,OAAS,WAEf/oB,OADOgpB,QAAQhkB,OAAO,CAACikB,MAAO,CAAAC,GAAK,aAEnClpB,OADOgpB,QAAQ,CAAC,yBAA0B,WAGzCxY,EADS7Q,UAMXgpB,SADSQ,KAAKC,YAAYV,KACxBrjB,KAAK+hB,GAAY,WAerBhlB,OAAAkT,eAPE6S,EAOFjqB,UAAA,SAAA,CAAAqX,IAAA,WACE,OAPOzZ,KAAKutB,8CAGZlB,EAAFjqB,UAAAorB,oCAAE,SAAAC,GAWAC,OAVOC,UAAUC,WAAWC,mBAAmBC,mBAAmBL,IAGlEpB,EAAFjqB,UAAA2rB,6BAAE,SAAAC,EAAAC,GAeAP,OAdOC,UAAUC,WAAWC,mBAAmBK,YAAYF,EAAMC,IAGjE5B,EAAFjqB,UAAA+rB,4BAAE,WAiBA,GAhBKnuB,KAAKssB,oBAqBV,IAhBiC,IAgBnC8B,EAAA,EAhBmCC,EAAAruB,KAAKssB,oBAAL8B,EAgBnCC,EAAA7tB,OAhBmC4tB,IAgBnC,CAAO,IAhBME,EAgBbD,EAAAD,GACGV,OAhBOC,UAAUY,+BAA+BD,EAAmBE,SAAUF,KAI9EjC,EAAFjqB,UAAAqsB,4BAAE,SAAAC,EAAAC,GAAA,IAAFhoB,EAAA3G,KACQ4uB,EAAU7C,GAAe4C,EAAME,cAActoB,KAAKooB,IAAQplB,KAAKiiB,GAAK,IAuB1EO,GApBe4C,EAAMG,mBAAmBvoB,KAAKooB,IAqB3CplB,KACAxI,GApBI,WAAM,OAAA4tB,EAAMlN,aAqBhBiK,GApBUkD,IAsBVrnB,UApBU,SAAAwnB,GAqBVpoB,EApBK6lB,KAAKwC,IAAI,WAqBbroB,EApBK8lB,aAAa5oB,KAoBvByC,OAAA2oB,OAAA,GACSP,EADT,CAEMK,QAFNA,UAWA1C,EAAAjqB,UAAA8sB,cAAA,WACE,GApBKhrB,OAAOwpB,OAwBZ,IApBoB,IAoBtBU,EAAA,EApBsBC,EAAAX,OAAOyB,OAAOC,YAAdhB,EAoBtBC,EAAA7tB,OApBsB4tB,IAoBtB,CAAAC,EAAAD,GAnBSnC,YA8BTI,EAAAjqB,UAAAitB,KAAA,SApBEC,EAAAC,GAoBF,IAAA5oB,EAAA3G,UApBA,IAAAuvB,IAAEA,EAAF,IAqBE,IApBMhD,EAAgBgD,EAAQJ,QAAUnvB,KAAKusB,eAAiB,GAsB9D,OApBOvsB,KAAK2sB,WAAWpjB,KAqBtBqiB,GApBI,WAsBHjlB,EApBKuoB,gBAuBLvoB,EApBK4mB,aAAeG,OAAOyB,OAAOxpB,OAAO2pB,EAAUE,cAoBvDlpB,OAAA2oB,OAAA,CACKQ,MApBOF,EAAQE,OAqBZlD,IAIJ5lB,EApBKwnB,8BAuBDxnB,EApBK+nB,MAqBR/nB,EApBK+oB,KAAK/oB,EAAK+nB,UA+BpBrC,EAAAjqB,UAAAstB,KAAA,SApBEhB,GAuBA,GAFA1uB,KApBK0uB,KAAOA,EAEP1uB,KAAKutB,aAoBV,CAKA,IApBMoC,EAAMjC,OAAOkC,IAAIlB,KAAKA,EAAKiB,KAE7BhB,EAAQjB,OAAOyB,OAAOU,SAASF,GAsB/BhB,IACCD,EApBKF,UAAYG,EAAMmB,cAAgBpB,EAAKF,UAqB/CG,EApBM1C,UAsBN0C,EApBQ9hB,WAsBR8hB,EApBMoB,SAASrB,EAAKK,UAIjBJ,IAqBJA,EApBQjB,OAAOyB,OAAOa,YAAYtB,EAAKK,QAASL,EAAKF,SAAUmB,GAuB/D3vB,KApBKyuB,4BAA4BC,EAAMC,IAuBxC3uB,KApBKutB,aAAa0C,SAAStB,KA4B7BtC,EAAAjqB,UAAA8tB,cAAA,SApBEX,GAqBIvvB,KApBKutB,cAqBRvtB,KApBKutB,aAAa2C,cAAcX,IA6BnClD,EAAAjqB,UAAA+tB,SAAA,SApBEV,GAqBIvrB,OApBOwpB,QAqBVA,OApBOyB,OAAOgB,SAASV,MAnL1B,GAsLOpD,GAAP+D,WAA2C,CAqB3C,CApBErD,KAAMsD,EAAAA,aAGPhE,GAADiE,eAAC,WAAA,MAAA,CAuBD,CAACvD,KAAMzsB,MAAO8vB,WAAY,CAAC,CAAErD,KAAMwD,EAAAA,UAAY,CAAExD,KAAMyD,EAAAA,OAAQpG,KAAM,CAAC8B,OACtE,CAACa,KAAMlgB,UAAWujB,WAAY,CAAC,CAAErD,KAAMwD,EAAAA,UAAY,CAAExD,KAAMyD,EAAAA,OAAQpG,KAAM,CAACgC,OAC1E,CAACW,KAAM0D,EAAAA,UCtNP,IAAAC,GAAA,WAqBA,SAAAA,EADUC,EACAC,GADA5wB,KAAV2wB,oBAAUA,EACA3wB,KAAV4wB,UAAUA,EARR5wB,KAAF6wB,MADU,IAAIC,EAAAA,aAEZ9wB,KAAF+wB,WADe,IAAID,EAAAA,aAGV9wB,KAATgxB,QAAmB,IAAIvU,EAAAA,QACdzc,KAATixB,SAAoB,IAAIxU,EAAAA,eAWxBiU,EAAAtuB,UAAA8uB,SAAA,WACElxB,KAJKgxB,QAAQntB,QAYf6sB,EAAAtuB,UAAAstB,KAAA,SAJEhB,GAKA1uB,KAJK2wB,oBAAoBjB,KAAKhB,IAShCgC,EAAAtuB,UAAA+uB,SAAA,WAAA,IAAAxqB,EAAA3G,KAEEA,KANK2wB,oBAAoBtB,KAAKrvB,KAAK4wB,UAAW,CAO7CnB,MANOzvB,KAAKyvB,MAOZN,OANQnvB,KAAKuvB,UACXhoB,UAAU,WAOZZ,EANKkqB,MAAM7M,SAUZhkB,KANK2wB,oBAAoBjE,YAAYnjB,KAOpCmiB,GANU1rB,KAAKixB,WACd1pB,UAAU,SAAAmnB,GAOX/nB,EANKoqB,WAAW/M,KAAK0K,KAUtB1uB,KANKgxB,QAAQznB,KAOZ4hB,GANO,WAAM,OAAA7Q,QAAQ3T,EAAKgqB,oBAAoBxB,UAO9CpuB,GANI,WAIP,MAAA,CAJeqwB,MAAOzqB,EAAKiqB,UAAUpB,cAAc6B,YAAaC,OAAQ3qB,EAAKiqB,UAAUpB,cAAc+B,gBAOlGtG,GANqB,SAAC/G,EAAGC,GAAM,OAAAD,EAAEkN,QAAUjN,EAAEiN,OAASlN,EAAEoN,SAAWnN,EAAEmN,SAOrEvG,GANa,IAObW,GANU1rB,KAAKixB,WACd1pB,UAAU,SAAAiqB,GAOX7qB,EANKgqB,oBAAoBxB,OAAOsC,OAAOD,MAY1Cd,EAAAtuB,UAAAsvB,YAAA,WACE1xB,KARKixB,SAASptB,QAchB6sB,EAAAtuB,UAAAuvB,YAAA,SAXEC,GAYIA,EAXQrC,SAaXvvB,KAXK2wB,oBAAoBT,cAAc0B,EAAQrC,QAAQsC,cAcpDD,EAXQnC,OAaXzvB,KAXK2wB,oBAAoBR,SAASyB,EAAQnC,MAAMoC,cAc7CD,EAXQlD,MAaX1uB,KAXK0vB,KAAKkC,EAAQlD,KAAKmD,eAiB1BnB,EAAAtuB,UAAA0vB,mBAAA,WACE9xB,KAbKgxB,QAAQntB,UAvFf,GAyFO6sB,GAAPN,WAA2C,CAc3C,CAbErD,KAAMgF,EAAAA,UAAW3H,KAAM,CAAA,CAcxB5Y,SAbU,oCAIVkf,GAADJ,eAAC,WAAA,MAAA,CAgBD,CAACvD,KAAMV,IACP,CAACU,KAAMiF,EAAAA,cAbAtB,GAAPuB,eAAgE,CAgBhExC,MAfS,CAAA,CAAG1C,KAAMmF,EAAAA,QAgBlBxD,KAfQ,CAAA,CAAG3B,KAAMmF,EAAAA,QAgBjB3C,QAfW,CAAA,CAAGxC,KAAMmF,EAAAA,QAgBpBrB,MAfS,CAAA,CAAG9D,KAAMoF,EAAAA,SAgBlBpB,WAfc,CAAA,CAAGhE,KAAMoF,EAAAA,SAgBvBjB,SAfY,CAAA,CAAGnE,KAAMqF,EAAAA,aAAchI,KAAM,CAAA,oBCpGzC,IAAAiI,GAAA,WAAA,SAAAA,YAIEA,EAAFC,QAMA,SANEppB,GAOA,YAPF,IAAAA,IAAEA,EAAF,IACS,CAONqpB,SANUF,EAOVG,UANW,CAOVnG,GACA,CAACoG,QANSrG,GAAuBsG,SAAUxpB,EAAOqmB,SAAW,SATjE,GAaO8C,GAAPjC,WAA2C,CAO3C,CANErD,KAAM4F,EAAAA,SAAUvI,KAAM,CAAA,CAOvBwI,QANS,CAORC,EAAAA,cAEDC,aANc,CAObpC,IAED/rB,QANS,CAOR+rB,QADD2B,GAAD/B,eAAC,WAAA,MAAA"}
